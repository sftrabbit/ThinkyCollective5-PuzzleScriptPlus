<!doctype html> <html> <head> <meta charset="UTF-8"> <title>__GAMETITLE__</title> <style> body{ background-color:black; font-family:"Courier New", Courier, monospace }#gameCanvas{ position:absolute;top:0px;left:0px;width:100%;height:100%;bottom:0px;right:0px;border:0px;background-color:black; -webkit-tap-highlight-color:rgba(0,0,0,0);image-rendering:-moz-crisp-edges;image-rendering:-webkit-crisp-edges;image-rendering:pixelated;image-rendering:crisp-edges;}h1{ color:lightblue;font-weight:normal;}a{ color:lightblue;}.title{ background-color:none;text-align:center;font-size:100%;float:center;color:gray;position:absolute;left:10%;right:10%;top:0%;height:10%;}.footer{ background-color:none;text-align:center;float:center;color:white;position:absolute;margin-top:10px;left:10%;right:10%;top:90%;bottom:10%;}.gameContainer{ background-color:none;position:absolute;left:10%;right:10%;top:70px;bottom:70px;touch-action:none;}.mobile-menu{ position:relative;top:4em;margin-left:auto;margin-right:auto;font-weight:bold;border-radius:0.25em;}.mobile-menu.item-count-3{ width:30em;}.mobile-menu.item-count-3 .button{ width:28.3333%; padding:7.5% 0%;}.mobile-menu.item-count-2{ width:20em;}.mobile-menu.item-count-2 .button{ width:46%; padding:12.1765% 0%;}.mobile-menu.item-count-1{ width:10em;}.mobile-menu.item-count-1 .button{ width:98%; padding:26.5% 0%;}.mobile-menu, .tab-icon, .mobile-menu .close{ background:rgba(0,0,0,0.4);border:2px solid rgba(255, 255, 255, 0.4);color:rgba(255, 255, 255, 1);}.mobile-menu .button{ margin:2%;border-radius:0.25em;text-align:center;float:left;}.mobile-menu .clear{ clear:both;}.tab-affordance, .close-affordance{ width:6em;height:6em;position:absolute;z-index:1000;}.tab-affordance{ left:-2em;top:55px;}.close-affordance{ left:-4em;top:-1em;}.tab-icon, .mobile-menu .close{ height:48px;position:absolute;border-radius:6px;}.tab-icon{ left:-0.5em;top:70px;width:18px;border-radius:0 6px 6px 0;border-left:0;}.mobile-menu .close{ left:-18px;width:18px;top:0px;border-radius:6px 0 0 6px;border-right:0;}.tab-icon .slice, .mobile-menu .close .slice{ margin:4.5px 1px;width:2px;height:80%;background:rgba(255, 255, 255, 0.4);}.tab-icon .slice{ float:right;}.tab-icon .slice:first-child{ margin-right:4.5px;}.mobile-menu .close .slice{ float:left;}.mobile-menu .close .slice:first-child{ margin-left:4.5px;}@media screen and (max-width:32em){ .mobile-menu{ font-size:0.8em;width:90%;}}@media screen and (max-width:24em){ .mobile-menu{ font-size:0.65em;width:90%;}}.disable-select{ -webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}</style> <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"> </head> <body> <div class="title"><h1>__GAMETITLE__</h1></div> <div class="gameContainer"> <canvas id="gameCanvas" onmousemove="mouseMove(event)" onmouseout="mouseOut()" onkeydown="keyDown()"></canvas> </div> <div class="footer"> <span id="errormessage" style="color:red;"></span> <a href="http://__HOMEPAGE__">__HOMEPAGE__</a> </div> <script>function doSetupTitleScreenLevelContinue(){try{if(window.localStorage&&void 0!==localStorage[document.URL]){if(void 0!==localStorage[document.URL+"_checkpoint"]){var e=localStorage[document.URL+"_checkpoint"];curlevelTarget=JSON.parse(e);var t=[];for(var l in Object.keys(curlevelTarget.dat))t[l]=curlevelTarget.dat[l];curlevelTarget.dat=new Int32Array(t)}curlevel=localStorage[document.URL]}}catch(e){}}var unitTesting=!1,curlevel=0,curlevelTarget=null,hasUsedCheckpoint=!1,levelEditorOpened=!1,muted=0,runrulesonlevelstart_phase=!1;doSetupTitleScreenLevelContinue();var verbose_logging=!1,throttle_movement=!1,cache_console_messages=!1,quittingTitleScreen=!1,quittingMessageScreen=!1,deltatime=17,timer=0,repeatinterval=150,autotick=0,autotickinterval=0,winning=!1,againing=!1,againinterval=150,norepeat_action=!1,oldflickscreendat=[],keybuffer=[],restarting=!1,messageselected=!1,textImages={},initLevel={width:5,height:5,layerCount:2,dat:[1,3,3,1,1,2,2,3,3,1,2,1,2,2,3,3,1,1,2,2,3,2,1,3,2,1,3,2,1,3,1,3,3,1,1,2,2,3,3,1,2,1,2,2,3,3,1,1,2,2],movementMask:[1,3,3,1,1,2,2,3,3,1,2,1,2,2,3,3,1,1,2,2,3,2,1,3,2,1,3,2,1,3,1,3,3,1,1,2,2,3,3,1,2,1,2,2,3,3,1,1,2,2],rigidGroupIndexMask:[],rigidMovementAppliedMask:[],bannedGroup:[],colCellContents:[],rowCellContents:[]},level=initLevel;</script> <script>function stripTags(n){var e=document.createElement("div");return e.innerHTML=n,e.textContent||e.innerText||""}function consolePrint(n,e){}function consolePrintFromRule(n,e,r){}function consoleCacheDump(n){}function consoleError(n,e){var r=document.getElementById("errormessage");n=stripTags(n),r.innerHTML+=n+"<br>"}function logErrorNoLine(n){var e=document.getElementById("errormessage");n=stripTags(n),e.innerHTML+=n+"<br>"}function logBetaMessage(n){var e=document.getElementById("errormessage");n=stripTags(n),e.innerHTML+=n+"<br>"}function clearInputHistory(){}function pushInput(n){}var canSetHTMLColors=!0,canDump=!1,canOpenEditor=!1,canYoutube=!0,IDE=!1;</script> <script>var font = { 
    '0':` 
00000 
00000 
00000 
01110 
10001 
10011 
10101 
11001 
10001 
01110 
00000 
00000`, 
 '1':` 
00000 
00000 
00000 
11100 
00100 
00100 
00100 
00100 
00100 
11111 
00000 
00000`, 
 '2':` 
00000 
00000 
00000 
11110 
00001 
00001 
01110 
10000 
10000 
11111 
00000 
00000`, 
 '3':` 
00000 
00000 
00000 
11110 
00001 
00110 
00001 
00001 
00001 
11110 
00000 
00000`, 
 '4':` 
00000 
00000 
00000 
10000 
10000 
10000 
10010 
11111 
00010 
00010 
00000 
00000`, 
 '5':` 
00000 
00000 
00000 
11111 
10000 
11110 
00001 
00001 
00001 
11110 
00000 
00000`, 
 '6':` 
00000 
00000 
00000 
01110 
10000 
11110 
10001 
10001 
10001 
01110 
00000 
00000`, 
 '7':` 
00000 
00000 
00000 
11111 
00001 
00010 
00100 
00100 
00100 
00100 
00000 
00000`, 
 '8':` 
00000 
00000 
00000 
01110 
10001 
01110 
10001 
10001 
10001 
01110 
00000 
00000`, 
 '9':` 
00000 
00000 
00000 
01110 
10001 
10001 
10001 
01111 
00001 
01110 
00000 
00000`, 
 'a':` 
00000 
00000 
00000 
00000 
00000 
01111 
10001 
10001 
10001 
01111 
00000 
00000`, 
 'b':` 
00000 
00000 
00000 
10000 
10000 
11110 
10001 
10001 
10001 
01110 
00000 
00000`, 
 'c':` 
00000 
00000 
00000 
00000 
00000 
01111 
10000 
10000 
10000 
01111 
00000 
00000`, 
 'd':` 
00000 
00000 
00000 
00001 
00001 
01111 
10001 
10001 
10001 
01111 
00000 
00000`, 
 'e':` 
00000 
00000 
00000 
00000 
00000 
01110 
10001 
11111 
10000 
01110 
00000 
00000`, 
 'f':` 
00000 
00000 
00000 
00011 
00100 
11111 
00100 
00100 
00100 
00100 
00000 
00000`, 
 'g':` 
00000 
00000 
00000 
00000 
00000 
01111 
10001 
10001 
10001 
01111 
00001 
01110`, 
 'h':` 
00000 
00000 
00000 
10000 
10000 
11110 
10001 
10001 
10001 
10001 
00000 
00000`, 
 'i':` 
00000 
00000 
00000 
00100 
00000 
01100 
00100 
00100 
00100 
01110 
00000 
00000`, 
 'j':` 
00000 
00000 
00000 
00100 
00000 
01100 
00100 
00100 
00100 
00100 
10100 
01000`, 
 'k':` 
00000 
00000 
00000 
10000 
10000 
10001 
10010 
11100 
10010 
10001 
00000 
00000`, 
 'l':` 
00000 
00000 
00000 
01100 
00100 
00100 
00100 
00100 
00100 
01110 
00000 
00000`, 
 'm':` 
00000 
00000 
00000 
00000 
00000 
01010 
10101 
10101 
10101 
10101 
00000 
00000`, 
 'n':` 
00000 
00000 
00000 
00000 
00000 
01110 
10001 
10001 
10001 
10001 
00000 
00000`, 
 'o':` 
00000 
00000 
00000 
00000 
00000 
01110 
10001 
10001 
10001 
01110 
00000 
00000`, 
 'p':` 
00000 
00000 
00000 
00000 
00000 
11110 
10001 
10001 
10001 
11110 
10000 
10000`, 
 'q':` 
00000 
00000 
00000 
00000 
00000 
01111 
10001 
10001 
10001 
01111 
00001 
00001`, 
 'r':` 
00000 
00000 
00000 
00000 
00000 
01111 
10000 
10000 
10000 
10000 
00000 
00000`, 
 's':` 
00000 
00000 
00000 
00000 
00000 
01111 
10000 
01110 
00001 
11110 
00000 
00000`, 
 't':` 
00000 
00000 
00000 
00100 
00100 
11111 
00100 
00100 
00100 
00011 
00000 
00000`, 
 'u':` 
00000 
00000 
00000 
00000 
00000 
10001 
10001 
10001 
10001 
01111 
00000 
00000`, 
 'v':` 
00000 
00000 
00000 
00000 
00000 
10001 
10010 
10100 
11000 
10000 
00000 
00000`, 
 'w':` 
00000 
00000 
00000 
00000 
00000 
10101 
10101 
10101 
10101 
01010 
00000 
00000`, 
 'x':` 
00000 
00000 
00000 
00000 
00000 
10001 
01010 
00100 
01010 
10001 
00000 
00000`, 
 '×':` 
00000 
00000 
00000 
00000 
00000 
10001 
01010 
00100 
01010 
10001 
00000 
00000`, 
 'y':` 
00000 
00000 
00000 
00000 
00000 
10001 
10001 
10001 
10001 
01111 
00001 
11110`, 
 'z':` 
00000 
00000 
00000 
00000 
00000 
11111 
00010 
00100 
01000 
11111 
00000 
00000`, 
 'A':` 
00000 
00000 
00000 
01110 
10001 
10001 
10001 
11111 
10001 
10001 
00000 
00000`, 
 'B':` 
00000 
00000 
00000 
11110 
10001 
11110 
10001 
10001 
10001 
11110 
00000 
00000`, 
 'C':` 
00000 
00000 
00000 
01111 
10000 
10000 
10000 
10000 
10000 
01111 
00000 
00000`, 
 'D':` 
00000 
00000 
00000 
11110 
10001 
10001 
10001 
10001 
10001 
11110 
00000 
00000`, 
 'E':` 
00000 
00000 
00000 
11111 
10000 
11111 
10000 
10000 
10000 
11111 
00000 
00000`, 
 'F':` 
00000 
00000 
00000 
11111 
10000 
11111 
10000 
10000 
10000 
10000 
00000 
00000`, 
 'G':` 
00000 
00000 
00000 
01111 
10000 
10000 
10000 
10011 
10001 
01111 
00000 
00000`, 
 'H':` 
00000 
00000 
00000 
10001 
10001 
11111 
10001 
10001 
10001 
10001 
00000 
00000`, 
 'I':` 
00000 
00000 
00000 
11111 
00100 
00100 
00100 
00100 
00100 
11111 
00000 
00000`, 
 'J':` 
00000 
00000 
00000 
01111 
00001 
00001 
00001 
00001 
00001 
01110 
00000 
00000`, 
 'K':` 
00000 
00000 
00000 
10001 
10010 
10100 
11000 
10100 
10010 
10001 
00000 
00000`, 
 'L':` 
00000 
00000 
00000 
10000 
10000 
10000 
10000 
10000 
10000 
11111 
00000 
00000`, 
 'M':` 
00000 
00000 
00000 
11111 
10101 
10101 
10101 
10101 
10101 
10101 
00000 
00000`, 
 'N':` 
00000 
00000 
00000 
10001 
11001 
10101 
10011 
10001 
10001 
10001 
00000 
00000`, 
 'O':` 
00000 
00000 
00000 
01110 
10001 
10001 
10001 
10001 
10001 
01110 
00000 
00000`, 
 'P':` 
00000 
00000 
00000 
11110 
10001 
10001 
10001 
11110 
10000 
10000 
00000 
00000`, 
 'Q':` 
00000 
00000 
00000 
01110 
10001 
10001 
10001 
10001 
10101 
01110 
00100 
00000`, 
 'R':` 
00000 
00000 
00000 
11110 
10001 
10001 
11110 
10001 
10001 
10001 
00000 
00000`, 
 'S':` 
00000 
00000 
00000 
01111 
10000 
01110 
00001 
00001 
00001 
11110 
00000 
00000`, 
 'T':` 
00000 
00000 
00000 
11111 
00100 
00100 
00100 
00100 
00100 
00100 
00000 
00000`, 
 'U':` 
00000 
00000 
00000 
10001 
10001 
10001 
10001 
10001 
10001 
01110 
00000 
00000`, 
 'V':` 
00000 
00000 
00000 
10001 
10001 
10001 
10001 
10001 
01010 
00100 
00000 
00000`, 
 'W':` 
00000 
00000 
00000 
10101 
10101 
10101 
10101 
10101 
10101 
01010 
00000 
00000`, 
 'X':` 
00000 
00000 
00000 
10001 
10001 
01010 
00100 
01010 
10001 
10001 
00000 
00000`, 
 'Y':` 
00000 
00000 
00000 
10001 
10001 
01010 
00100 
00100 
00100 
00100 
00000 
00000`, 
 'Z':` 
00000 
00000 
00000 
11111 
00001 
00010 
00100 
01000 
10000 
11111 
00000 
00000`, 
 '.':` 
00000 
00000 
00000 
00000 
00000 
00000 
00000 
00000 
00000 
00100 
00000 
00000`, 
 '·':` 
00000 
00000 
00000 
00000 
00000 
00000 
00100 
00000 
00000 
00000 
00000 
00000`, 
 '•':` 
00000 
00000 
00000 
00000 
00000 
01110 
01110 
01110 
00000 
00000 
00000 
00000`, 
 '…':` 
00000 
00000 
00000 
00000 
00000 
00000 
00000 
00000 
00000 
10101 
00000 
00000`, 
 '†':` 
00000 
00100 
00100 
01110 
00100 
00100 
00100 
00100 
00100 
00100 
00000 
00000`, 
 '‡':` 
00000 
00100 
00100 
01110 
00100 
00100 
00100 
00100 
01110 
00100 
00000 
00000`, 
 'ƒ':` 
00000 
00000 
00000 
00011 
00100 
11111 
00100 
00100 
00100 
00100 
01000 
00000`, 
 '‚':` 
00000 
00000 
00000 
00000 
00000 
00000 
00000 
00000 
00100 
01100 
00000 
00000`, 
 '„':` 
00000 
00000 
00000 
00000 
00000 
00000 
00000 
00000 
01001 
11011 
00000 
00000`, 
 ',':` 
00000 
00000 
00000 
00000 
00000 
00000 
00000 
00000 
00100 
01100 
00000 
00000`, 
 ';':` 
00000 
00000 
00000 
00000 
00000 
00100 
00000 
00000 
00100 
01100 
00000 
00000`, 
 ':':` 
00000 
00000 
00000 
00000 
00000 
00100 
00000 
00000 
00000 
00100 
00000 
00000`, 
 '?':` 
00000 
00000 
00000 
01110 
10001 
00001 
00001 
00110 
00000 
00100 
00000 
00000`, 
 '¿':` 
00000 
00000 
00000 
00100 
00000 
01100 
10000 
10000 
10001 
01110 
00000 
00000`, 
 '!':` 
00000 
00000 
00000 
00100 
00100 
00100 
00100 
00100 
00000 
00100 
00000 
00000`, 
 '¡':` 
00000 
00000 
00000 
00100 
00000 
00100 
00100 
00100 
00100 
00100 
00000 
00000`, 
 '@':` 
00000 
00000 
00000 
00000 
00000 
01110 
10001 
10111 
10000 
01110 
00000 
00000`, 
 '£':` 
00000 
00000 
00000 
00000 
00000 
01110 
01001 
11100 
01000 
11111 
00000 
00000`, 
 '$':` 
00000 
00000 
00000 
00000 
00100 
01111 
10100 
01110 
00101 
11110 
00100 
00000`, 
 '%':` 
00000 
00000 
00000 
00000 
00000 
11001 
11010 
00100 
01011 
10011 
00000 
00000`, 
 '‰':` 
00000 
00000 
00000 
00000 
11001 
11010 
00100 
01011 
10011 
00000 
00011 
00011`, 
 '^':` 
00000 
00000 
00000 
00100 
01010 
00000 
00000 
00000 
00000 
00000 
00000 
00000`, 
 '&':` 
00000 
00000 
00000 
00000 
00000 
01100 
10000 
01011 
10010 
01100 
00000 
00000`, 
 '*':` 
00000 
00000 
00000 
00000 
00000 
01010 
00100 
01010 
00000 
00000 
00000 
00000`, 
 '(':` 
00000 
00000 
00000 
00010 
00100 
00100 
00100 
00100 
00100 
00010 
00000 
00000`, 
 ')':` 
00000 
00000 
00000 
01000 
00100 
00100 
00100 
00100 
00100 
01000 
00000 
00000`, 
 '+':` 
00000 
00000 
00000 
00000 
00000 
00100 
00100 
11111 
00100 
00100 
00000 
00000`, 
 '÷':` 
00000 
00000 
00000 
00000 
00000 
00100 
00000 
11111 
00000 
00100 
00000 
00000`, 
 '±':` 
00000 
00000 
00000 
00000 
00000 
00100 
00100 
11111 
00100 
11111 
00000 
00000`, 
 '-':` 
00000 
00000 
00000 
00000 
00000 
00000 
00000 
01110 
00000 
00000 
00000 
00000`, 
 '–':` 
00000 
00000 
00000 
00000 
00000 
00000 
00000 
11110 
00000 
00000 
00000 
00000`, 
 '—':` 
00000 
00000 
00000 
00000 
00000 
00000 
00000 
11111 
00000 
00000 
00000 
00000`, 
 '_':` 
00000 
00000 
00000 
00000 
00000 
00000 
00000 
00000 
00000 
11111 
00000 
00000`, 
 '=':` 
00000 
00000 
00000 
00000 
00000 
00000 
11111 
00000 
11111 
00000 
00000 
00000`, 
 ' ':` 
00000 
00000 
00000 
00000 
00000 
00000 
00000 
00000 
00000 
00000 
00000 
00000`, 
 '{':` 
00000 
00000 
00000 
00110 
00100 
00100 
01100 
00100 
00100 
00110 
00000 
00000`, 
 '}':` 
00000 
00000 
00000 
01100 
00100 
00100 
00110 
00100 
00100 
01100 
00000 
00000`, 
 '[':` 
00000 
00000 
00000 
00110 
00100 
00100 
00100 
00100 
00100 
00110 
00000 
00000`, 
 ']':` 
00000 
00000 
00000 
01100 
00100 
00100 
00100 
00100 
00100 
01100 
00000 
00000`, 
 '\'':` 
00000 
00000 
00000 
00100 
00100 
00100 
00000 
00000 
00000 
00000 
00000 
00000`, 
 '‘':` 
00000 
00000 
00000 
00110 
00100 
00000 
00000 
00000 
00000 
00000 
00000 
00000`, 
 '’':` 
00000 
00000 
00000 
00100 
01100 
00000 
00000 
00000 
00000 
00000 
00000 
00000`, 
 '“':` 
00000 
00000 
00000 
11011 
10010 
00000 
00000 
00000 
00000 
00000 
00000 
00000`, 
 '”':` 
00000 
00000 
00000 
01001 
11011 
00000 
00000 
00000 
00000 
00000 
00000 
00000`, 
 '"':` 
00000 
00000 
00000 
01010 
01010 
01010 
00000 
00000 
00000 
00000 
00000 
00000`, 
 '/':` 
00000 
00000 
00000 
00000 
00000 
00001 
00010 
00100 
01000 
10000 
00000 
00000`, 
 '\\':` 
00000 
00000 
00000 
00000 
00000 
10000 
01000 
00100 
00010 
00001 
00000 
00000`, 
 '|':` 
00000 
00000 
00000 
00000 
00000 
00100 
00100 
00100 
00100 
00100 
00000 
00000`, 
 '¦':` 
00000 
00000 
00000 
00000 
00100 
00100 
00000 
00100 
00100 
00100 
00000 
00000`, 
 '<':` 
00000 
00000 
00000 
00000 
00000 
00010 
00100 
01000 
00100 
00010 
00000 
00000`, 
 '‹':` 
00000 
00000 
00000 
00000 
00000 
00000 
00100 
01000 
00100 
00000 
00000 
00000`, 
 '«':` 
00000 
00000 
00000 
00000 
00000 
00000 
01001 
10010 
01001 
00000 
00000 
00000`, 
 '>':` 
00000 
00000 
00000 
00000 
00000 
01000 
00100 
00010 
00100 
01000 
00000 
00000`, 
 '›':` 
00000 
00000 
00000 
00000 
00000 
00000 
00100 
00010 
00100 
00000 
00000 
00000`, 
 '»':` 
00000 
00000 
00000 
00000 
00000 
00000 
10010 
01001 
10010 
00000 
00000 
00000`, 
 '~':` 
00000 
00000 
00000 
00000 
00000 
00000 
01000 
10101 
00010 
00000 
00000 
00000`, 
 '˜':` 
00000 
00000 
00000 
00000 
00000 
01010 
10100 
00000 
00000 
00000 
00000 
00000`, 
 '`':` 
00000 
00000 
00000 
00000 
00000 
01000 
00100 
00000 
00000 
00000 
00000 
00000`, 
 '#':` 
00000 
00000 
00000 
00000 
00000 
01010 
11111 
01010 
11111 
01010 
00000 
00000`, 
 'À':` 
01000 
00100 
00000 
01110 
10001 
10001 
10001 
11111 
10001 
10001 
00000 
00000`, 
 'Á':` 
00010 
00100 
00000 
01110 
10001 
10001 
10001 
11111 
10001 
10001 
00000 
00000`, 
 'Â':` 
00100 
01010 
00000 
01110 
10001 
10001 
10001 
11111 
10001 
10001 
00000 
00000`, 
 'Ã':` 
01000 
10101 
00010 
01110 
10001 
10001 
10001 
11111 
10001 
10001 
00000 
00000`, 
 'Ä':` 
00000 
01010 
00000 
01110 
10001 
10001 
10001 
11111 
10001 
10001 
00000 
00000`, 
 'Å':` 
00100 
01010 
00100 
01110 
10001 
10001 
10001 
11111 
10001 
10001 
00000 
00000`, 
 'Æ':` 
00000 
00000 
00000 
01111 
10100 
10100 
10100 
11111 
10100 
10111 
00000 
00000`, 
 'Ç':` 
00000 
00000 
00000 
01111 
10000 
10000 
10000 
10000 
10000 
01111 
00100 
01000`, 
 'È':` 
01000 
00100 
00000 
11111 
10000 
11111 
10000 
10000 
10000 
11111 
00000 
00000`, 
 'É':` 
00010 
00100 
00000 
11111 
10000 
11111 
10000 
10000 
10000 
11111 
00000 
00000`, 
 'Ê':` 
00100 
01010 
00000 
11111 
10000 
11111 
10000 
10000 
10000 
11111 
00000 
00000`, 
 'Ë':` 
00000 
01010 
00000 
11111 
10000 
11111 
10000 
10000 
10000 
11111 
00000 
00000`, 
 'Ì':` 
01000 
00100 
00000 
11111 
00100 
00100 
00100 
00100 
00100 
11111 
00000 
00000`, 
 'Í':` 
00010 
00100 
00000 
11111 
00100 
00100 
00100 
00100 
00100 
11111 
00000 
00000`, 
 'Î':` 
00100 
01010 
00000 
11111 
00100 
00100 
00100 
00100 
00100 
11111 
00000 
00000`, 
 'Ï':` 
00000 
01010 
00000 
11111 
00100 
00100 
00100 
00100 
00100 
11111 
00000 
00000`, 
 'Ð':` 
00000 
00000 
00000 
01110 
01001 
01001 
11101 
01001 
01001 
01110 
00000 
00000`, 
 'Ñ':` 
01001 
10110 
00000 
10001 
11001 
10101 
10011 
10001 
10001 
10001 
00000 
00000`, 
 'Ò':` 
01000 
00100 
00000 
01110 
10001 
10001 
10001 
10001 
10001 
01110 
00000 
00000`, 
 'Ó':` 
00010 
00100 
00000 
01110 
10001 
10001 
10001 
10001 
10001 
01110 
00000 
00000`, 
 'Ô':` 
00100 
01010 
00000 
01110 
10001 
10001 
10001 
10001 
10001 
01110 
00000 
00000`, 
 'Õ':` 
01001 
10110 
00000 
01110 
10001 
10001 
10001 
10001 
10001 
01110 
00000 
00000`, 
 'Ö':` 
00000 
01010 
00000 
01110 
10001 
10001 
10001 
10001 
10001 
01110 
00000 
00000`, 
 'Ø':` 
00000 
00010 
00100 
01110 
10101 
10101 
10101 
10101 
10101 
01110 
00100 
01000`, 
 'Ù':` 
00000 
01000 
00100 
10001 
10001 
10001 
10001 
10001 
10001 
01110 
00000 
00000`, 
 'Ú':` 
00000 
00010 
00100 
10001 
10001 
10001 
10001 
10001 
10001 
01110 
00000 
00000`, 
 'Û':` 
00100 
01010 
00000 
10001 
10001 
10001 
10001 
10001 
10001 
01110 
00000 
00000`, 
 'Ü':` 
00000 
01010 
00000 
10001 
10001 
10001 
10001 
10001 
10001 
01110 
00000 
00000`, 
 'Ý':` 
00000 
00000 
00100 
10001 
10001 
01010 
00100 
00100 
00100 
00100 
00000 
00000`, 
 'Þ':` 
00000 
00000 
10000 
11110 
10001 
10001 
10001 
10001 
10001 
11110 
10000 
00000`, 
 'ß':` 
00000 
00000 
00000 
01110 
10001 
10110 
10001 
10001 
10001 
10110 
10000 
00000`, 
 'ẞ':` 
00000 
00000 
00000 
01110 
10001 
10110 
10001 
10001 
10001 
10110 
00000 
00000`, 
 'à':` 
00000 
00000 
01000 
00100 
00000 
01111 
10001 
10001 
10001 
01111 
00000 
00000`, 
 'á':` 
00000 
00000 
00010 
00100 
00000 
01111 
10001 
10001 
10001 
01111 
00000 
00000`, 
 'â':` 
00000 
00000 
00100 
01010 
00000 
01111 
10001 
10001 
10001 
01111 
00000 
00000`, 
 'ã':` 
00000 
00000 
01001 
10110 
00000 
01111 
10001 
10001 
10001 
01111 
00000 
00000`, 
 'ä':` 
00000 
00000 
00000 
01010 
00000 
01111 
10001 
10001 
10001 
01111 
00000 
00000`, 
 'å':` 
00000 
00100 
01010 
00100 
00000 
01111 
10001 
10001 
10001 
01111 
00000 
00000`, 
 'æ':` 
00000 
00000 
00000 
00000 
00000 
01110 
10101 
10110 
10100 
01111 
00000 
00000`, 
 'ç':` 
00000 
00000 
00000 
00000 
00000 
01111 
10000 
10000 
10000 
01111 
00100 
01000`, 
 'è':` 
00000 
00000 
01000 
00100 
00000 
01110 
10001 
11111 
10000 
01110 
00000 
00000`, 
 'é':` 
00000 
00000 
00010 
00100 
00000 
01110 
10001 
11111 
10000 
01110 
00000 
00000`, 
 'ê':` 
00000 
00000 
00100 
01010 
00000 
01110 
10001 
11111 
10000 
01110 
00000 
00000`, 
 'ë':` 
00000 
00000 
00000 
01010 
00000 
01110 
10001 
11111 
10000 
01110 
00000 
00000`, 
 'ì':` 
00000 
00000 
01000 
00100 
00000 
01100 
00100 
00100 
00100 
01110 
00000 
00000`, 
 'í':` 
00000 
00000 
00010 
00100 
00000 
01100 
00100 
00100 
00100 
01110 
00000 
00000`, 
 'î':` 
00000 
00000 
00100 
01010 
00000 
01100 
00100 
00100 
00100 
01110 
00000 
00000`, 
 'ï':` 
00000 
00000 
00000 
01010 
00000 
01100 
00100 
00100 
00100 
01110 
00000 
00000`, 
 'ð':` 
00000 
00000 
00010 
00111 
00010 
01110 
10010 
10010 
10010 
01110 
00000 
00000`, 
 'ñ':` 
00000 
00000 
01001 
10110 
00000 
01110 
10001 
10001 
10001 
10001 
00000 
00000`, 
 'ò':` 
00000 
00000 
01000 
00100 
00000 
01110 
10001 
10001 
10001 
01110 
00000 
00000`, 
 'ó':` 
00000 
00000 
00010 
00100 
00000 
01110 
10001 
10001 
10001 
01110 
00000 
00000`, 
 'ô':` 
00000 
00000 
00100 
01010 
00000 
01110 
10001 
10001 
10001 
01110 
00000 
00000`, 
 'õ':` 
00000 
00000 
01001 
10110 
00000 
01110 
10001 
10001 
10001 
01110 
00000 
00000`, 
 'ö':` 
00000 
00000 
00000 
01010 
00000 
01110 
10001 
10001 
10001 
01110 
00000 
00000`, 
 'ø':` 
00000 
00000 
00000 
00010 
00100 
01110 
10101 
10101 
10101 
01110 
00100 
01000`, 
 'ù':` 
00000 
00000 
00000 
01000 
00100 
10001 
10001 
10001 
10001 
01111 
00000 
00000`, 
 'ú':` 
00000 
00000 
00000 
00010 
00100 
10001 
10001 
10001 
10001 
01111 
00000 
00000`, 
 'û':` 
00000 
00000 
00100 
01010 
00000 
10001 
10001 
10001 
10001 
01111 
00000 
00000`, 
 'ü':` 
00000 
00000 
00000 
01010 
00000 
10001 
10001 
10001 
10001 
01111 
00000 
00000`, 
 'ý':` 
00000 
00000 
00000 
00010 
00100 
10001 
10001 
10001 
10001 
01111 
00001 
11110`, 
 'þ':` 
00000 
00000 
00000 
10000 
10000 
11110 
10001 
10001 
10001 
11110 
10000 
10000`, 
 'ÿ':` 
00000 
00000 
00000 
01010 
00000 
10001 
10001 
10001 
10001 
01111 
00001 
11110`, 
 'Ā':` 
00000 
01110 
00000 
01110 
10001 
10001 
10001 
11111 
10001 
10001 
00000 
00000`, 
 'ā':` 
00000 
00000 
00000 
01110 
00000 
01111 
10001 
10001 
10001 
01111 
00000 
00000`, 
 'Ă':` 
01010 
00100 
00000 
01110 
10001 
10001 
10001 
11111 
10001 
10001 
00000 
00000`, 
 'ă':` 
00000 
00000 
01010 
00100 
00000 
01111 
10001 
10001 
10001 
01111 
00000 
00000`, 
 'Ą':` 
00000 
00000 
00000 
01110 
10001 
10001 
10001 
11111 
10001 
10001 
00010 
00001`, 
 'ą':` 
00000 
00000 
00000 
00000 
00000 
01111 
10001 
10001 
10001 
01111 
00010 
00001`, 
 'Ć':` 
00010 
00100 
00000 
01111 
10000 
10000 
10000 
10000 
10000 
01111 
00000 
00000`, 
 'ć':` 
00000 
00000 
00010 
00100 
00000 
01111 
10000 
10000 
10000 
01111 
00000 
00000`, 
 'Ĉ':` 
00100 
01010 
00000 
01111 
10000 
10000 
10000 
10000 
10000 
01111 
00000 
00000`, 
 'ĉ':` 
00000 
00000 
00100 
01010 
00000 
01111 
10000 
10000 
10000 
01111 
00000 
00000`, 
 'Ċ':` 
00000 
00100 
00000 
01111 
10000 
10000 
10000 
10000 
10000 
01111 
00000 
00000`, 
 'ċ':` 
00000 
00000 
00000 
00100 
00000 
01111 
10000 
10000 
10000 
01111 
00000 
00000`, 
 'Č':` 
01010 
00100 
00000 
01111 
10000 
10000 
10000 
10000 
10000 
01111 
00000 
00000`, 
 'č':` 
00000 
00000 
01010 
00100 
00000 
01111 
10000 
10000 
10000 
01111 
00000 
00000`, 
 'Ď':` 
01010 
00100 
00000 
11110 
10001 
10001 
10001 
10001 
10001 
11110 
00000 
00000`, 
 'ď':` 
00000 
00000 
00000 
00101 
00101 
01100 
10100 
10100 
10100 
01100 
00000 
00000`, 
 'Đ':` 
00000 
00000 
00000 
01110 
01001 
01001 
11101 
01001 
01001 
01110 
00000 
00000`, 
 'đ':` 
00000 
00000 
00010 
00111 
00010 
01110 
10010 
10010 
10010 
01110 
00000 
00000`, 
 'Ē':` 
00000 
01110 
00000 
11111 
10000 
11111 
10000 
10000 
10000 
11111 
00000 
00000`, 
 'ē':` 
00000 
00000 
00000 
01110 
00000 
01110 
10001 
11111 
10000 
01110 
00000 
00000`, 
 'Ĕ':` 
01010 
00100 
00000 
11111 
10000 
11111 
10000 
10000 
10000 
11111 
00000 
00000`, 
 'ĕ':` 
00000 
00000 
01010 
00100 
00000 
01110 
10001 
11111 
10000 
01110 
00000 
00000`, 
 'Ė':` 
00000 
00100 
00000 
11111 
10000 
11111 
10000 
10000 
10000 
11111 
00000 
00000`, 
 'ė':` 
00000 
00000 
00000 
00100 
00000 
01110 
10001 
11111 
10000 
01110 
00000 
00000`, 
 'Ę':` 
00000 
00000 
00000 
11111 
10000 
11111 
10000 
10000 
10000 
11111 
00010 
00001`, 
 'ę':` 
00000 
00000 
00000 
00000 
00000 
01110 
10001 
11111 
10000 
01110 
00010 
00001`, 
 'Ě':` 
01010 
00100 
00000 
11111 
10000 
11111 
10000 
10000 
10000 
11110 
00000 
00000`, 
 'ě':` 
00000 
00000 
01010 
00100 
00000 
01110 
10001 
11111 
10000 
01110 
00000 
00000`, 
 'Ĝ':` 
00100 
01010 
00000 
01111 
10000 
10000 
10000 
10011 
10001 
01111 
00000 
00000`, 
 'ĝ':` 
00000 
00000 
00100 
01010 
00000 
01111 
10001 
10001 
10001 
01111 
00001 
01110`, 
 'Ğ':` 
01010 
00100 
00000 
01111 
10000 
10000 
10000 
10011 
10001 
01111 
00000 
00000`, 
 'ğ':` 
00000 
00000 
01010 
00100 
00000 
01111 
10001 
10001 
10001 
01111 
00001 
01110`, 
 'Ġ':` 
00000 
00100 
00000 
01111 
10000 
10000 
10000 
10011 
10001 
01111 
00000 
00000`, 
 'ġ':` 
00000 
00000 
00000 
00100 
00000 
01111 
10001 
10001 
10001 
01111 
00001 
01110`, 
 'Ģ':` 
00000 
00000 
00000 
01111 
10000 
10000 
10000 
10011 
10001 
01111 
00000 
01100`, 
 'ģ':` 
00010 
00100 
00000 
01111 
10000 
10000 
10000 
10011 
10001 
01111 
00000 
00000`, 
 'Ĥ':` 
00100 
01010 
00000 
10001 
10001 
11111 
10001 
10001 
10001 
10001 
00000 
00000`, 
 'ĥ':` 
00100 
01010 
00000 
10000 
10000 
11110 
10001 
10001 
10001 
10001 
00000 
00000`, 
 'Ħ':` 
00000 
00000 
01010 
11111 
01010 
01110 
01010 
01010 
01010 
01010 
00000 
00000`, 
 'ħ':` 
00000 
00000 
01000 
11100 
01000 
01110 
01001 
01001 
01001 
01001 
00000 
00000`, 
 'Ĩ':` 
01001 
10110 
00000 
11111 
00100 
00100 
00100 
00100 
00100 
11111 
00000 
00000`, 
 'ĩ':` 
01010 
10100 
00000 
00100 
00000 
01100 
00100 
00100 
00100 
01110 
00000 
00000`, 
 'Ī':` 
00000 
01110 
00000 
11111 
00100 
00100 
00100 
00100 
00100 
11111 
00000 
00000`, 
 'ī':` 
00000 
00000 
00000 
01110 
00000 
01100 
00100 
00100 
00100 
01110 
00000 
00000`, 
 'Ĭ':` 
01010 
00100 
00000 
11111 
00100 
00100 
00100 
00100 
00100 
11111 
00000 
00000`, 
 'ĭ':` 
00000 
00000 
01010 
00100 
00000 
01100 
00100 
00100 
00100 
01110 
00000 
00000`, 
 'Į':` 
00000 
00000 
00000 
11111 
00100 
00100 
00100 
00100 
00100 
11111 
00010 
00001`, 
 'į':` 
00000 
00000 
00000 
00100 
00000 
01100 
00100 
00100 
00100 
01110 
00010 
00001`, 
 'İ':` 
00000 
00100 
00000 
11111 
00100 
00100 
00100 
00100 
00100 
11111 
00000 
00000`, 
 'ı':` 
00000 
00000 
00000 
00000 
00000 
01100 
00100 
00100 
00100 
01110 
00000 
00000`, 
 'Ĳ':` 
00000 
00000 
00000 
10010 
10010 
10010 
10010 
10010 
10010 
10110 
00000 
00000`, 
 'ĳ':` 
00000 
00000 
00000 
01001 
00000 
11001 
01001 
01001 
01001 
11101 
00001 
00010`, 
 'Ĵ':` 
00010 
00101 
00000 
01111 
00001 
00001 
00001 
00001 
00001 
01110 
00000 
00000`, 
 'ĵ':` 
00000 
00000 
00100 
01010 
00000 
01100 
00100 
00100 
00100 
00100 
10100 
01000`, 
 'Ķ':` 
00000 
00000 
00000 
10001 
10010 
10100 
11000 
10100 
10010 
10001 
00100 
01000`, 
 'ķ':` 
00000 
00000 
00000 
10000 
10000 
10001 
10010 
11100 
10010 
10001 
00100 
01000`, 
 'ĸ':` 
00000 
00000 
00000 
00000 
00000 
10001 
10010 
11100 
10010 
10001 
00000 
00000`, 
 'Ĺ':` 
00000 
00010 
00100 
10000 
10000 
10000 
10000 
10000 
10000 
11111 
00000 
00000`, 
 'ĺ':` 
00010 
00100 
00000 
01100 
00100 
00100 
00100 
00100 
00100 
01110 
00000 
00000`, 
 'Ļ':` 
00000 
00000 
00000 
10000 
10000 
10000 
10000 
10000 
10000 
11111 
00000 
00100`, 
 'ļ':` 
00000 
00000 
00000 
01100 
00100 
00100 
00100 
00100 
00100 
01110 
00000 
00100`, 
 'Ľ':` 
00000 
00000 
00000 
10010 
10010 
10000 
10000 
10000 
10000 
11111 
00000 
00000`, 
 'ľ':` 
00000 
00000 
00000 
01101 
00101 
00100 
00100 
00100 
00100 
01110 
00000 
00000`, 
 'Ŀ':` 
00000 
00000 
00000 
10000 
10000 
10100 
10000 
10000 
10000 
11111 
00000 
00000`, 
 'ŀ':` 
00000 
00000 
00000 
01100 
00100 
00100 
00101 
00100 
00100 
01110 
00000 
00000`, 
 'Ł':` 
00000 
00000 
00000 
01000 
01010 
01100 
11000 
01000 
01000 
01111 
00000 
00000`, 
 'ł':` 
00000 
00000 
00000 
01100 
00100 
00100 
00110 
01100 
00100 
01110 
00000 
00000`, 
 'Ń':` 
00000 
00010 
00100 
10001 
11001 
10101 
10011 
10001 
10001 
10001 
00000 
00000`, 
 'ń':` 
00000 
00000 
00010 
00100 
00000 
01110 
10001 
10001 
10001 
10001 
00000 
00000`, 
 'Ņ':` 
00000 
00000 
00000 
10001 
11001 
10101 
10011 
10001 
10001 
10001 
00100 
01000`, 
 'ņ':` 
00000 
00000 
00000 
00000 
00000 
01110 
10001 
10001 
10001 
10001 
00100 
01000`, 
 'Ň':` 
00000 
01010 
00100 
10001 
11001 
10101 
10011 
10001 
10001 
10001 
00000 
00000`, 
 'ň':` 
00000 
00000 
01010 
00100 
00000 
01110 
10001 
10001 
10001 
10001 
00000 
00000`, 
 'ŉ':` 
00000 
00000 
00000 
10000 
10000 
00110 
01001 
01001 
01001 
01001 
00000 
00000`, 
 'Ŋ':` 
00000 
00000 
00000 
10001 
11001 
10101 
10011 
10001 
10001 
10001 
00001 
00010`, 
 'ŋ':` 
00000 
00000 
00000 
00000 
00000 
01110 
10001 
10001 
10001 
10001 
00001 
00010`, 
 'Ō':` 
00000 
01110 
00000 
01110 
10001 
10001 
10001 
10001 
10001 
01110 
00000 
00000`, 
 'ō':` 
00000 
00000 
00000 
01110 
00000 
01110 
10001 
10001 
10001 
01110 
00000 
00000`, 
 'Ŏ':` 
01010 
00100 
00000 
01110 
10001 
10001 
10001 
10001 
10001 
01110 
00000 
00000`, 
 'ŏ':` 
00000 
00000 
01010 
00100 
00000 
01110 
10001 
10001 
10001 
01110 
00000 
00000`, 
 'Ő':` 
01001 
10010 
00000 
01110 
10001 
10001 
10001 
10001 
10001 
01110 
00000 
00000`, 
 'ő':` 
00000 
00000 
01001 
10010 
00000 
01110 
10001 
10001 
10001 
01110 
00000 
00000`, 
 'Œ':` 
00000 
00000 
00000 
01111 
10100 
10100 
10111 
10100 
10100 
01111 
00000 
00000`, 
 'œ':` 
00000 
00000 
00000 
00000 
00000 
01110 
10101 
10110 
10100 
01111 
00000 
00000`, 
 'Ŕ':` 
00010 
00100 
00000 
11110 
10001 
10001 
11110 
10001 
10001 
10001 
00000 
00000`, 
 'ŕ':` 
00000 
00000 
00010 
00100 
00000 
01111 
10000 
10000 
10000 
10000 
00000 
00000`, 
 'Ŗ':` 
00000 
00000 
00000 
11110 
10001 
10001 
11110 
10001 
10001 
10001 
00100 
01000`, 
 'ŗ':` 
00000 
00000 
00000 
00000 
00000 
01111 
10000 
10000 
10000 
10000 
00100 
01000`, 
 'Ř':` 
01010 
00100 
00000 
11110 
10001 
10001 
11110 
10001 
10001 
10001 
00000 
00000`, 
 'ř':` 
00000 
00000 
01010 
00100 
00000 
01111 
10000 
10000 
10000 
10000 
00000 
00000`, 
 'Ś':` 
00010 
00100 
00000 
01111 
10000 
01110 
00001 
00001 
00001 
11110 
00000 
00000`, 
 'ś':` 
00000 
00000 
00010 
00100 
00000 
01111 
10000 
01110 
00001 
11110 
00000 
00000`, 
 'Ŝ':` 
00100 
01010 
00000 
01111 
10000 
01110 
00001 
00001 
00001 
11110 
00000 
00000`, 
 'ŝ':` 
00000 
00000 
00100 
01010 
00000 
01111 
10000 
01110 
00001 
11110 
00000 
00000`, 
 'Ş':` 
00000 
00000 
00000 
01111 
10000 
01110 
00001 
00001 
00001 
11110 
00100 
00000`, 
 'ş':` 
00000 
00000 
00000 
00000 
00000 
01111 
10000 
01110 
00001 
11110 
00100 
01000`, 
 'Š':` 
01010 
00100 
00000 
01111 
10000 
01110 
00001 
00001 
00001 
11110 
00000 
00000`, 
 'š':` 
00000 
00000 
01010 
00100 
00000 
01111 
10000 
01110 
00001 
11110 
00000 
00000`, 
 'Ţ':` 
00000 
00000 
00000 
11111 
00100 
00100 
00100 
00100 
00100 
00100 
00010 
00100`, 
 'ţ':` 
00000 
00000 
00000 
00100 
00100 
11111 
00100 
00100 
00100 
00011 
00000 
01100`, 
 'Ť':` 
01010 
00100 
00000 
11111 
00100 
00100 
00100 
00100 
00100 
00100 
00000 
00000`, 
 'ť':` 
00000 
00000 
00001 
00101 
00100 
11111 
00100 
00100 
00100 
00011 
00000 
00000`, 
 'Ŧ':` 
00000 
00000 
00000 
11111 
00100 
00100 
01110 
00100 
00100 
00100 
00000 
00000`, 
 'ŧ':` 
00000 
00000 
00000 
00100 
00100 
11111 
00100 
01110 
00100 
00011 
00000 
00000`, 
 'Ũ':` 
01001 
10110 
00000 
10001 
10001 
10001 
10001 
10001 
10001 
01110 
00000 
00000`, 
 'ũ':` 
00000 
00000 
01001 
10110 
00000 
10001 
10001 
10001 
10001 
01111 
00000 
00000`, 
 'Ū':` 
00000 
01110 
00000 
10001 
10001 
10001 
10001 
10001 
10001 
01110 
00000 
00000`, 
 'ū':` 
00000 
00000 
00000 
01110 
00000 
10001 
10001 
10001 
10001 
01111 
00000 
00000`, 
 'Ŭ':` 
01010 
00100 
00000 
10001 
10001 
10001 
10001 
10001 
10001 
01110 
00000 
00000`, 
 'ŭ':` 
00000 
00000 
01010 
00100 
00000 
10001 
10001 
10001 
10001 
01111 
00000 
00000`, 
 'Ů':` 
00100 
01010 
00100 
10001 
10001 
10001 
10001 
10001 
10001 
01110 
00000 
00000`, 
 'ů':` 
00000 
00000 
00100 
01010 
00100 
10001 
10001 
10001 
10001 
01111 
00000 
00000`, 
 'Ű':` 
01001 
10010 
00000 
10001 
10001 
10001 
10001 
10001 
10001 
01110 
00000 
00000`, 
 'ű':` 
00000 
00000 
01001 
10010 
00000 
10001 
10001 
10001 
10001 
01111 
00000 
00000`, 
 'Ų':` 
00000 
00000 
00000 
10001 
10001 
10001 
10001 
10001 
10001 
01110 
00100 
00010`, 
 'ų':` 
00000 
00000 
00000 
00000 
00000 
10001 
10001 
10001 
10001 
01111 
00010 
00001`, 
 'Ŵ':` 
00100 
01010 
00000 
10101 
10101 
10101 
10101 
10101 
10101 
01010 
00000 
00000`, 
 'ŵ':` 
00000 
00000 
00100 
01010 
00000 
10101 
10101 
10101 
10101 
01010 
00000 
00000`, 
 'Ŷ':` 
00100 
01010 
00000 
10001 
10001 
01010 
00100 
00100 
00100 
00100 
00000 
00000`, 
 'ŷ':` 
00000 
00000 
00100 
01010 
00000 
10001 
10001 
10001 
10001 
01111 
00001 
11110`, 
 'Ÿ':` 
00000 
01010 
00000 
10001 
10001 
01010 
00100 
00100 
00100 
00100 
00000 
00000`, 
 'Ź':` 
00010 
00100 
00000 
11111 
00001 
00010 
00100 
01000 
10000 
11111 
00000 
00000`, 
 'ź':` 
00000 
00000 
00010 
00100 
00000 
11111 
00010 
00100 
01000 
11111 
00000 
00000`, 
 'Ż':` 
00000 
00100 
00000 
11111 
00001 
00010 
00100 
01000 
10000 
11111 
00000 
00000`, 
 'ż':` 
00000 
00000 
00000 
00100 
00000 
11111 
00010 
00100 
01000 
11111 
00000 
00000`, 
 'Ž':` 
01010 
00100 
00000 
11111 
00001 
00010 
00100 
01000 
10000 
11111 
00000 
00000`, 
 'ž':` 
00000 
00000 
01010 
00100 
00000 
11111 
00010 
00100 
01000 
11111 
00000 
00000`, 
  
 '€':` 
00000 
00000 
00000 
00111 
01000 
11110 
01000 
11110 
01000 
00111 
00000 
00000`, 
  
 '™':` 
00000 
11111 
00100 
00100 
00100 
00000 
01010 
10101 
10101 
10101 
00000 
00000`, 
 '¢':` 
00000 
00000 
00000 
00010 
00100 
01111 
10100 
10100 
10100 
01111 
00100 
01000`, 
  
 '¤':` 
00000 
00000 
00000 
00000 
10001 
01110 
10001 
10001 
01110 
10001 
00000 
00000`, 
 '¥':` 
00000 
00000 
10001 
01010 
00100 
01110 
00100 
01110 
00100 
00000 
00000`, 
  
 '§':` 
00000 
00000 
00000 
01110 
10000 
01110 
10001 
01110 
00001 
01110 
00000 
00000`, 
 '¨':` 
00000 
00000 
00000 
01010 
00000 
00000 
00000 
00000 
00000 
00000 
00000 
00000`, 
 '©':` 
00000 
00000 
00000 
01110 
10001 
10111 
10101 
10111 
10001 
01110 
00000 
00000`, 
 '®':` 
00000 
00000 
00000 
01110 
10001 
10111 
10101 
10101 
10001 
01110 
00000 
00000`, 
 'ª':` 
00000 
01110 
00010 
01110 
01010 
01110 
00000 
00000 
00000 
00000 
00000 
00000`, 
 'º':` 
00000 
00100 
01010 
01010 
01010 
00100 
00000 
00000 
00000 
00000 
00000 
00000`, 
  
 '¬':` 
00000 
00000 
00000 
00000 
00000 
00000 
00000 
01110 
00010 
00000 
00000 
00000`, 
 '¯':` 
00000 
00000 
00000 
01110 
00000 
00000 
00000 
00000 
00000 
00000 
00000 
00000`, 
 '°':` 
00000 
00000 
00100 
01010 
00100 
00000 
00000 
00000 
00000 
00000 
00000 
00000`, 
}</script> <script>function RC4(t){this.s=new Array(256),this.i=0,this.j=0;for(var n=0;n<256;n++)this.s[n]=n;t&&this.mix(t)}function print_call_stack(){var t=new Error,n=t.stack;console.log(n)}function RNG(t){this.seed=t,null==t?t=(Math.random()+Date.now()).toString():"function"==typeof t?(this.uniform=t,this.nextByte=function(){return~~(256*this.uniform())},t=null):"[object String]"!==Object.prototype.toString.call(t)&&(t=JSON.stringify(t)),this._normal=null,this._state=t?new RC4(t):null}String.prototype.getBytes=function(){for(var t=[],n=0;n<this.length;n++){var i=this.charCodeAt(n),o=[];do{o.push(255&i),i>>=8}while(i>0);t=t.concat(o.reverse())}return t},RC4.prototype._swap=function(t,n){var i=this.s[t];this.s[t]=this.s[n],this.s[n]=i},RC4.prototype.mix=function(t){for(var n=t.getBytes(),i=0,o=0;o<this.s.length;o++)i+=this.s[o]+n[o%n.length],i%=256,this._swap(o,i)},RC4.prototype.next=function(){return this.i=(this.i+1)%256,this.j=(this.j+this.s[this.i])%256,this._swap(this.i,this.j),this.s[(this.s[this.i]+this.s[this.j])%256]},RNG.prototype.nextByte=function(){return this._state.next()},RNG.prototype.uniform=function(){for(var t=0,n=0;n<7;n++)t*=256,t+=this.nextByte();return t/(Math.pow(2,56)-1)},RNG.prototype.random=function(t,n){return null==t?this.uniform():(null==n&&(n=t,t=0),t+Math.floor(this.uniform()*(n-t)))},RNG.prototype.normal=function(){if(null!==this._normal){var t=this._normal;return this._normal=null,t}var n=this.uniform()||Math.pow(2,-53),i=this.uniform();return this._normal=Math.sqrt(-2*Math.log(n))*Math.sin(2*Math.PI*i),Math.sqrt(-2*Math.log(n))*Math.cos(2*Math.PI*i)},RNG.prototype.exponential=function(){return-Math.log(this.uniform()||Math.pow(2,-53))},RNG.prototype.poisson=function(t){var n=Math.exp(-(t||1)),i=0,o=1;do{i++,o*=this.uniform()}while(o>n);return i-1},RNG.prototype.gamma=function(t){var n=(t<1?1+t:t)-1/3,i=1/Math.sqrt(9*n);do{do{var o=this.normal(),r=Math.pow(i*o+1,3)}while(r<=0);var s=this.uniform(),h=Math.pow(o,2)}while(s>=1-.0331*h*h&&Math.log(s)>=.5*h+n*(1-r+Math.log(r)));return t<1?n*r*Math.exp(this.exponential()/-t):n*r},RNG.roller=function(t,n){var i=t.split(/(\d+)?d(\d+)([+-]\d+)?/).slice(1),o=parseFloat(i[0])||1,r=parseFloat(i[1]),s=parseFloat(i[2])||0;return n=n||new RNG,function(){for(var t=o+s,i=0;i<o;i++)t+=n.random(r);return t}};</script> <script>function FastBase64_Init(){for(var a=0;a<4096;a++)FastBase64_encLookup[a]=FastBase64_chars[a>>6]+FastBase64_chars[63&a]}function FastBase64_Encode(a){for(var e=a.length,s="",u=0;e>2;)n=a[u]<<16|a[u+1]<<8|a[u+2],s+=FastBase64_encLookup[n>>12]+FastBase64_encLookup[4095&n],e-=3,u+=3;if(e>0){var r=(252&a[u])>>2,t=(3&a[u])<<4;if(e>1&&(t|=(240&a[++u])>>4),s+=FastBase64_chars[r],s+=FastBase64_chars[t],2==e){var o=(15&a[u++])<<2;o|=(192&a[u])>>6,s+=FastBase64_chars[o]}1==e&&(s+="="),s+="="}return s}function u32ToArray(a){return[255&a,a>>8&255,a>>16&255,a>>24&255]}function u16ToArray(a){return[255&a,a>>8&255]}function MakeRiff(a,e,n){var s=[],u=[],r=[],t={chunkId:[82,73,70,70],chunkSize:0,format:[87,65,86,69],subChunk1Id:[102,109,116,32],subChunk1Size:16,audioFormat:1,numChannels:1,sampleRate:a,byteRate:0,blockAlign:0,bitsPerSample:e,subChunk2Id:[100,97,116,97],subChunk2Size:0};return t.byteRate=t.sampleRate*t.numChannels*t.bitsPerSample>>3,t.blockAlign=t.numChannels*t.bitsPerSample>>3,t.subChunk2Size=n.length,t.chunkSize=36+t.subChunk2Size,u=t.chunkId.concat(u32ToArray(t.chunkSize),t.format,t.subChunk1Id,u32ToArray(t.subChunk1Size),u16ToArray(t.audioFormat),u16ToArray(t.numChannels),u32ToArray(t.sampleRate),u32ToArray(t.byteRate),u16ToArray(t.blockAlign),u16ToArray(t.bitsPerSample),t.subChunk2Id,u32ToArray(t.subChunk2Size),n),r="data:audio/wav;base64,"+FastBase64_Encode(u),{dat:s,wav:u,header:t,dataURI:r}}var FastBase64_chars="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",FastBase64_encLookup=[];FastBase64_Init(),"undefined"!=typeof exports&&(exports.RIFFWAVE=RIFFWAVE);</script> <script>function checkAudioContextExists(){try{null==AUDIO_CONTEXT&&("undefined"!=typeof AudioContext?AUDIO_CONTEXT=new AudioContext:"undefined"!=typeof webkitAudioContext&&(AUDIO_CONTEXT=new webkitAudioContext))}catch(e){window.console.log(e)}}function Params(){var e={};return e.wave_type=SQUARE,e.p_env_attack=0,e.p_env_sustain=.3,e.p_env_punch=0,e.p_env_decay=.4,e.p_base_freq=.3,e.p_freq_limit=0,e.p_freq_ramp=0,e.p_freq_dramp=0,e.p_vib_strength=0,e.p_vib_speed=0,e.p_arp_mod=0,e.p_arp_speed=0,e.p_duty=0,e.p_duty_ramp=0,e.p_repeat_speed=0,e.p_pha_offset=0,e.p_pha_ramp=0,e.p_lpf_freq=1,e.p_lpf_ramp=0,e.p_lpf_resonance=0,e.p_hpf_freq=0,e.p_hpf_ramp=0,e.sound_vol=.5,e.sample_rate=44100,e.bit_depth=8,e}function frnd(e){return seeded?rng.uniform()*e:Math.random()*e}function rnd(e){return seeded?Math.floor(rng.uniform()*(e+1)):Math.floor(Math.random()*(e+1))}function SoundEffect(e,r){this._buffer=AUDIO_CONTEXT.createBuffer(1,e,r)}function ULBS(){if("suspended"===AUDIO_CONTEXT.state){var e=function(){AUDIO_CONTEXT.resume().then(function(){document.body.removeEventListener("touchstart",e),document.body.removeEventListener("touchend",e),document.body.removeEventListener("mousedown",e),document.body.removeEventListener("mouseup",e),document.body.removeEventListener("keydown",e),document.body.removeEventListener("keyup",e)})};document.body.addEventListener("touchstart",e,!1),document.body.addEventListener("touchend",e,!1),document.body.addEventListener("mousedown",e,!1),document.body.addEventListener("mouseup",e,!1),document.body.addEventListener("keydown",e,!1),document.body.addEventListener("keyup",e,!1)}}function cacheSeed(e){if(e in sfxCache)return sfxCache[e];var r=generateFromSeed(e);r.sound_vol=SOUND_VOL,r.sample_rate=SAMPLE_RATE,r.bit_depth=BIT_DEPTH;var _=SoundEffect.generate(r);for(sfxCache[e]=_,cachedSeeds.push(e);cachedSeeds.length>CACHE_MAX;){var p=cachedSeeds[0];cachedSeeds=cachedSeeds.slice(1),delete sfxCache[p]}return _}function playSound(e){if(!muted&&(checkAudioContextExists(),!unitTesting)){cacheSeed(e).play()}}function killAudioButton(){var e=document.getElementById("muteButton"),r=document.getElementById("unMuteButton");e&&(e.remove(),r.remove())}function showAudioButton(){var e=document.getElementById("muteButton"),r=document.getElementById("unMuteButton");e&&(e.style.display="block",r.style.display="none")}function toggleMute(){0===muted?muteAudio():unMuteAudio()}function muteAudio(){muted=1,tryDeactivateYoutube();var e=document.getElementById("muteButton"),r=document.getElementById("unMuteButton");e&&(e.style.display="none",r.style.display="block")}function unMuteAudio(){muted=0,tryActivateYoutube();var e=document.getElementById("muteButton"),r=document.getElementById("unMuteButton");e&&(e.style.display="block",r.style.display="none")}var SOUND_VOL=.25,SAMPLE_RATE=5512,BIT_DEPTH=8,SQUARE=0,SAWTOOTH=1,SINE=2,NOISE=3,TRIANGLE=4,BREAKER=5,SHAPES=["square","sawtooth","sine","noise","triangle","breaker"],AUDIO_CONTEXT;checkAudioContextExists();var masterVolume=1,rng,seeded=!1;pickupCoin=function(){var e=Params();if(e.wave_type=Math.floor(frnd(SHAPES.length)),3===e.wave_type&&(e.wave_type=0),e.p_base_freq=.4+frnd(.5),e.p_env_attack=0,e.p_env_sustain=frnd(.1),e.p_env_decay=.1+frnd(.4),e.p_env_punch=.3+frnd(.3),rnd(1)){e.p_arp_speed=.5+frnd(.2);var r=1+(1|frnd(7)),_=r+(1|frnd(7))+2;e.p_arp_mod=+r/+_}return e},laserShoot=function(){var e=Params();return e.wave_type=rnd(2),e.wave_type===SINE&&rnd(1)&&(e.wave_type=rnd(1)),e.wave_type=Math.floor(frnd(SHAPES.length)),3===e.wave_type&&(e.wave_type=SQUARE),e.p_base_freq=.5+frnd(.5),e.p_freq_limit=e.p_base_freq-.2-frnd(.6),e.p_freq_limit<.2&&(e.p_freq_limit=.2),e.p_freq_ramp=-.15-frnd(.2),0===rnd(2)&&(e.p_base_freq=.3+frnd(.6),e.p_freq_limit=frnd(.1),e.p_freq_ramp=-.35-frnd(.3)),rnd(1)?(e.p_duty=frnd(.5),e.p_duty_ramp=frnd(.2)):(e.p_duty=.4+frnd(.5),e.p_duty_ramp=-frnd(.7)),e.p_env_attack=0,e.p_env_sustain=.1+frnd(.2),e.p_env_decay=frnd(.4),rnd(1)&&(e.p_env_punch=frnd(.3)),0===rnd(2)&&(e.p_pha_offset=frnd(.2),e.p_pha_ramp=-frnd(.2)),rnd(1)&&(e.p_hpf_freq=frnd(.3)),e},explosion=function(){var e=Params();return rnd(1)?(e.p_base_freq=.1+frnd(.4),e.p_freq_ramp=-.1+frnd(.4)):(e.p_base_freq=.2+frnd(.7),e.p_freq_ramp=-.2-frnd(.2)),e.p_base_freq*=e.p_base_freq,0===rnd(4)&&(e.p_freq_ramp=0),0===rnd(2)&&(e.p_repeat_speed=.3+frnd(.5)),e.p_env_attack=0,e.p_env_sustain=.1+frnd(.3),e.p_env_decay=frnd(.5),0===rnd(1)&&(e.p_pha_offset=-.3+frnd(.9),e.p_pha_ramp=-frnd(.3)),e.p_env_punch=.2+frnd(.6),rnd(1)&&(e.p_vib_strength=frnd(.7),e.p_vib_speed=frnd(.6)),0===rnd(2)&&(e.p_arp_speed=.6+frnd(.3),e.p_arp_mod=.8-frnd(1.6)),e},birdSound=function(){var e=Params();return frnd(10)<1?(e.wave_type=Math.floor(frnd(SHAPES.length)),3===e.wave_type&&(e.wave_type=SQUARE),e.p_env_attack=.4304400932967592+frnd(.2)-.1,e.p_env_sustain=.15739346034252394+frnd(.2)-.1,e.p_env_punch=.004488201744871758+frnd(.2)-.1,e.p_env_decay=.07478075528212291+frnd(.2)-.1,e.p_base_freq=.9865265720147687+frnd(.2)-.1,e.p_freq_limit=0+frnd(.2)-.1,e.p_freq_ramp=-.2995018224359539+frnd(.2)-.1,frnd(1)<.5&&(e.p_freq_ramp=.1+frnd(.15)),e.p_freq_dramp=.004598608156964473+frnd(.1)-.05,e.p_vib_strength=-.2202799497929496+frnd(.2)-.1,e.p_vib_speed=.8084998703158364+frnd(.2)-.1,e.p_arp_mod=0,e.p_arp_speed=0,e.p_duty=-.9031808754347107+frnd(.2)-.1,e.p_duty_ramp=-.8128699999808343+frnd(.2)-.1,e.p_repeat_speed=.601486018931999+frnd(.2)-.1,e.p_pha_offset=-.9424902314367765+frnd(.2)-.1,e.p_pha_ramp=-.1055482222272056+frnd(.2)-.1,e.p_lpf_freq=.9989765717851521+frnd(.2)-.1,e.p_lpf_ramp=-.25051720626043017+frnd(.2)-.1,e.p_lpf_resonance=.32777871505494693+frnd(.2)-.1,e.p_hpf_freq=.0023548750981756753+frnd(.2)-.1,e.p_hpf_ramp=-.002375673204842568+frnd(.2)-.1,e):frnd(10)<1?(e.wave_type=Math.floor(frnd(SHAPES.length)),3===e.wave_type&&(e.wave_type=SQUARE),e.p_env_attack=.5277795946672003+frnd(.2)-.1,e.p_env_sustain=.18243733568468432+frnd(.2)-.1,e.p_env_punch=-.020159754546840117+frnd(.2)-.1,e.p_env_decay=.1561353422051903+frnd(.2)-.1,e.p_base_freq=.9028855606533718+frnd(.2)-.1,e.p_freq_limit=-.008842787837148716,e.p_freq_ramp=-.1,e.p_freq_dramp=-.012891241489551925,e.p_vib_strength=-.17923136138403065+frnd(.2)-.1,e.p_vib_speed=.908263385610142+frnd(.2)-.1,e.p_arp_mod=.41690153355414894+frnd(.2)-.1,e.p_arp_speed=.0010766233195860704+frnd(.2)-.1,e.p_duty=-.8735363011184684+frnd(.2)-.1,e.p_duty_ramp=-.7397985366747507+frnd(.2)-.1,e.p_repeat_speed=.0591789344172107+frnd(.2)-.1,e.p_pha_offset=-.9961184222777699+frnd(.2)-.1,e.p_pha_ramp=-.08234769395850523+frnd(.2)-.1,e.p_lpf_freq=.9412475115697335+frnd(.2)-.1,e.p_lpf_ramp=-.18261358925834958+frnd(.2)-.1,e.p_lpf_resonance=.24541438107389477+frnd(.2)-.1,e.p_hpf_freq=-.01831940280978611+frnd(.2)-.1,e.p_hpf_ramp=-.03857383633171346+frnd(.2)-.1,e):frnd(10)<1?(e.wave_type=Math.floor(frnd(SHAPES.length)),3===e.wave_type&&(e.wave_type=SQUARE),e.p_env_attack=.4304400932967592+frnd(.2)-.1,e.p_env_sustain=.15739346034252394+frnd(.2)-.1,e.p_env_punch=.004488201744871758+frnd(.2)-.1,e.p_env_decay=.07478075528212291+frnd(.2)-.1,e.p_base_freq=.9865265720147687+frnd(.2)-.1,e.p_freq_limit=0+frnd(.2)-.1,e.p_freq_ramp=-.2995018224359539+frnd(.2)-.1,e.p_freq_dramp=.004598608156964473+frnd(.2)-.1,e.p_vib_strength=-.2202799497929496+frnd(.2)-.1,e.p_vib_speed=.8084998703158364+frnd(.2)-.1,e.p_arp_mod=-.46410459213693644+frnd(.2)-.1,e.p_arp_speed=-.10955361249587248+frnd(.2)-.1,e.p_duty=-.9031808754347107+frnd(.2)-.1,e.p_duty_ramp=-.8128699999808343+frnd(.2)-.1,e.p_repeat_speed=.7014860189319991+frnd(.2)-.1,e.p_pha_offset=-.9424902314367765+frnd(.2)-.1,e.p_pha_ramp=-.1055482222272056+frnd(.2)-.1,e.p_lpf_freq=.9989765717851521+frnd(.2)-.1,e.p_lpf_ramp=-.25051720626043017+frnd(.2)-.1,e.p_lpf_resonance=.32777871505494693+frnd(.2)-.1,e.p_hpf_freq=.0023548750981756753+frnd(.2)-.1,e.p_hpf_ramp=-.002375673204842568+frnd(.2)-.1,e):frnd(5)>1?(e.wave_type=Math.floor(frnd(SHAPES.length)),3===e.wave_type&&(e.wave_type=SQUARE),rnd(1)?(e.p_arp_mod=.2697849293151393+frnd(.2)-.1,e.p_arp_speed=-.3131172257760948+frnd(.2)-.1,e.p_base_freq=.8090588299313949+frnd(.2)-.1,e.p_duty=-.6210022920964955+frnd(.2)-.1,e.p_duty_ramp=-.00043441813553182567+frnd(.2)-.1,e.p_env_attack=.004321877246874195+frnd(.2)-.1,e.p_env_decay=.1+frnd(.2)-.1,e.p_env_punch=.061737781504416146+frnd(.2)-.1,e.p_env_sustain=.4987252564798832+frnd(.2)-.1,e.p_freq_dramp=.31700340314222614+frnd(.2)-.1,e.p_freq_limit=0+frnd(.2)-.1,e.p_freq_ramp=-.163380391341416+frnd(.2)-.1,e.p_hpf_freq=.4709005021145149+frnd(.2)-.1,e.p_hpf_ramp=.6924667290539194+frnd(.2)-.1,e.p_lpf_freq=.8351398631384511+frnd(.2)-.1,e.p_lpf_ramp=.36616557192873134+frnd(.2)-.1,e.p_lpf_resonance=-.08685777111664439+frnd(.2)-.1,e.p_pha_offset=-.036084571580025544+frnd(.2)-.1,e.p_pha_ramp=-.014806445085568108+frnd(.2)-.1,e.p_repeat_speed=-.8094368475518489+frnd(.2)-.1,e.p_vib_speed=.4496665457171294+frnd(.2)-.1,e.p_vib_strength=.23413762515532424+frnd(.2)-.1):(e.p_arp_mod=-.35697118026766184+frnd(.2)-.1,e.p_arp_speed=.3581140690559588+frnd(.2)-.1,e.p_base_freq=1.3260897696157528+frnd(.2)-.1,e.p_duty=-.30984900436710694+frnd(.2)-.1,e.p_duty_ramp=-.0014374759133411626+frnd(.2)-.1,e.p_env_attack=.3160357835682254+frnd(.2)-.1,e.p_env_decay=.1+frnd(.2)-.1,e.p_env_punch=.24323114016870148+frnd(.2)-.1,e.p_env_sustain=.4+frnd(.2)-.1,e.p_freq_dramp=.2866475886237244+frnd(.2)-.1,e.p_freq_limit=0+frnd(.2)-.1,e.p_freq_ramp=-.10956352368742976+frnd(.2)-.1,e.p_hpf_freq=.20772718017889846+frnd(.2)-.1,e.p_hpf_ramp=.1564090637378835+frnd(.2)-.1,e.p_lpf_freq=.6021372770637031+frnd(.2)-.1,e.p_lpf_ramp=.24016227139979027+frnd(.2)-.1,e.p_lpf_resonance=-.08787383821160144+frnd(.2)-.1,e.p_pha_offset=-.381597686151701+frnd(.2)-.1,e.p_pha_ramp=-.0002481687661373495+frnd(.2)-.1,e.p_repeat_speed=.07812112809425686+frnd(.2)-.1,e.p_vib_speed=-.13648848579133943+frnd(.2)-.1,e.p_vib_strength=.0018874158972302657+frnd(.2)-.1),e):(e.wave_type=Math.floor(frnd(SHAPES.length)),1!==e.wave_type&&3!==e.wave_type||(e.wave_type=2),e.p_base_freq=.85+frnd(.15),e.p_freq_ramp=.3+frnd(.15),e.p_env_attack=0+frnd(.09),e.p_env_sustain=.2+frnd(.3),e.p_env_decay=0+frnd(.1),e.p_duty=frnd(2)-1,e.p_duty_ramp=Math.pow(frnd(2)-1,3),e.p_repeat_speed=.5+frnd(.1),e.p_pha_offset=-.3+frnd(.9),e.p_pha_ramp=-frnd(.3),e.p_arp_speed=.4+frnd(.6),e.p_arp_mod=.8+frnd(.1),e.p_lpf_resonance=frnd(2)-1,e.p_lpf_freq=1-Math.pow(frnd(1),3),e.p_lpf_ramp=Math.pow(frnd(2)-1,3),e.p_lpf_freq<.1&&e.p_lpf_ramp<-.05&&(e.p_lpf_ramp=-e.p_lpf_ramp),e.p_hpf_freq=Math.pow(frnd(1),5),e.p_hpf_ramp=Math.pow(frnd(2)-1,5),e)},pushSound=function(){var e=Params();return e.wave_type=Math.floor(frnd(SHAPES.length)),2===e.wave_type&&e.wave_type++,0===e.wave_type&&(e.wave_type=NOISE),e.p_base_freq=.1+frnd(.4),e.p_freq_ramp=.05+frnd(.2),e.p_env_attack=.01+frnd(.09),e.p_env_sustain=.01+frnd(.09),e.p_env_decay=.01+frnd(.09),e.p_repeat_speed=.3+frnd(.5),e.p_pha_offset=-.3+frnd(.9),e.p_pha_ramp=-frnd(.3),e.p_arp_speed=.6+frnd(.3),e.p_arp_mod=.8-frnd(1.6),e},powerUp=function(){var e=Params();return rnd(1)?e.wave_type=SAWTOOTH:e.p_duty=frnd(.6),e.wave_type=Math.floor(frnd(SHAPES.length)),3===e.wave_type&&(e.wave_type=SQUARE),rnd(1)?(e.p_base_freq=.2+frnd(.3),e.p_freq_ramp=.1+frnd(.4),e.p_repeat_speed=.4+frnd(.4)):(e.p_base_freq=.2+frnd(.3),e.p_freq_ramp=.05+frnd(.2),rnd(1)&&(e.p_vib_strength=frnd(.7),e.p_vib_speed=frnd(.6))),e.p_env_attack=0,e.p_env_sustain=frnd(.4),e.p_env_decay=.1+frnd(.4),e},hitHurt=function(){return result=Params(),result.wave_type=rnd(2),result.wave_type===SINE&&(result.wave_type=NOISE),result.wave_type===SQUARE&&(result.p_duty=frnd(.6)),result.wave_type=Math.floor(frnd(SHAPES.length)),result.p_base_freq=.2+frnd(.6),result.p_freq_ramp=-.3-frnd(.4),result.p_env_attack=0,result.p_env_sustain=frnd(.1),result.p_env_decay=.1+frnd(.2),rnd(1)&&(result.p_hpf_freq=frnd(.3)),result},jump=function(){return result=Params(),result.wave_type=SQUARE,result.wave_type=Math.floor(frnd(SHAPES.length)),3===result.wave_type&&(result.wave_type=SQUARE),result.p_duty=frnd(.6),result.p_base_freq=.3+frnd(.3),result.p_freq_ramp=.1+frnd(.2),result.p_env_attack=0,result.p_env_sustain=.1+frnd(.3),result.p_env_decay=.1+frnd(.2),rnd(1)&&(result.p_hpf_freq=frnd(.3)),rnd(1)&&(result.p_lpf_freq=1-frnd(.6)),result},blipSelect=function(){return result=Params(),result.wave_type=rnd(1),result.wave_type=Math.floor(frnd(SHAPES.length)),3===result.wave_type&&(result.wave_type=rnd(1)),result.wave_type===SQUARE&&(result.p_duty=frnd(.6)),result.p_base_freq=.2+frnd(.4),result.p_env_attack=0,result.p_env_sustain=.1+frnd(.1),result.p_env_decay=frnd(.2),result.p_hpf_freq=.1,result},random=function(){return result=Params(),result.wave_type=Math.floor(frnd(SHAPES.length)),result.p_base_freq=Math.pow(frnd(2)-1,2),rnd(1)&&(result.p_base_freq=Math.pow(frnd(2)-1,3)+.5),result.p_freq_limit=0,result.p_freq_ramp=Math.pow(frnd(2)-1,5),result.p_base_freq>.7&&result.p_freq_ramp>.2&&(result.p_freq_ramp=-result.p_freq_ramp),result.p_base_freq<.2&&result.p_freq_ramp<-.05&&(result.p_freq_ramp=-result.p_freq_ramp),result.p_freq_dramp=Math.pow(frnd(2)-1,3),result.p_duty=frnd(2)-1,result.p_duty_ramp=Math.pow(frnd(2)-1,3),result.p_vib_strength=Math.pow(frnd(2)-1,3),result.p_vib_speed=frnd(2)-1,result.p_env_attack=Math.pow(frnd(2)-1,3),result.p_env_sustain=Math.pow(frnd(2)-1,2),result.p_env_decay=frnd(2)-1,result.p_env_punch=Math.pow(frnd(.8),2),result.p_env_attack+result.p_env_sustain+result.p_env_decay<.2&&(result.p_env_sustain+=.2+frnd(.3),result.p_env_decay+=.2+frnd(.3)),result.p_lpf_resonance=frnd(2)-1,result.p_lpf_freq=1-Math.pow(frnd(1),3),result.p_lpf_ramp=Math.pow(frnd(2)-1,3),result.p_lpf_freq<.1&&result.p_lpf_ramp<-.05&&(result.p_lpf_ramp=-result.p_lpf_ramp),result.p_hpf_freq=Math.pow(frnd(1),5),result.p_hpf_ramp=Math.pow(frnd(2)-1,5),result.p_pha_offset=Math.pow(frnd(2)-1,3),result.p_pha_ramp=Math.pow(frnd(2)-1,3),result.p_repeat_speed=frnd(2)-1,result.p_arp_speed=frnd(2)-1,result.p_arp_mod=frnd(2)-1,result};var generators=[pickupCoin,laserShoot,explosion,powerUp,hitHurt,jump,blipSelect,pushSound,random,birdSound],generatorNames=["pickupCoin","laserShoot","explosion","powerUp","hitHurt","jump","blipSelect","pushSound","random","birdSound"];if(generateFromSeed=function(e){rng=new RNG(e/100|0);var r=e%100,_=generators[r%generators.length];seeded=!0;var p=_();return p.seed=e,seeded=!1,p},SoundEffect.prototype.getBuffer=function(){return this._buffer.getChannelData(0)},SoundEffect.prototype.play=function(){ULBS();var e=AUDIO_CONTEXT.createBufferSource(),r=AUDIO_CONTEXT.createBiquadFilter(),_=AUDIO_CONTEXT.createBiquadFilter(),p=AUDIO_CONTEXT.createBiquadFilter();e.buffer=this._buffer,e.connect(r),r.frequency.value=1600,_.frequency.value=1600,p.frequency.value=1600,r.connect(_),_.connect(p),p.connect(AUDIO_CONTEXT.destination);var n=AUDIO_CONTEXT.currentTime;void 0!==e.start?e.start(n):e.noteOn(n),e.onended=function(){p.disconnect()}},SoundEffect.MIN_SAMPLE_RATE=22050,void 0===AUDIO_CONTEXT&&(SoundEffect=function(e,r){this._sample_rate=r,this._buffer=new Array(e),this._audioElement=null},SoundEffect.prototype.getBuffer=function(){return this._audioElement=null,this._buffer},SoundEffect.prototype.play=function(){if(this._audioElement)this._audioElement.cloneNode(!1).play();else{for(var e=0;e<this._buffer.length;e++)this._buffer[e]=255&Math.floor(128*Math.max(0,Math.min(this._buffer[e]+1,2)));var r=MakeRiff(this._sample_rate,BIT_DEPTH,this._buffer);this._audioElement=new Audio,this._audioElement.src=r.dataURI,this._audioElement.play()}},SoundEffect.MIN_SAMPLE_RATE=1),SoundEffect.generate=function(e){function r(){_=0,p=100/(e.p_base_freq*e.p_base_freq+.001),n=Math.floor(p),t=100/(e.p_freq_limit*e.p_freq_limit+.001),f=1-.01*Math.pow(e.p_freq_ramp,3),a=1e-6*-Math.pow(e.p_freq_dramp,3),d=.5-.5*e.p_duty,o=5e-5*-e.p_duty_ramp,u=e.p_arp_mod>=0?1-.9*Math.pow(e.p_arp_mod,2):1+10*Math.pow(e.p_arp_mod,2),s=0,l=Math.floor(2e4*Math.pow(1-e.p_arp_speed,2)+32),1==e.p_arp_speed&&(l=0)}var _,p,n,t,f,a,d,o,u,s,l;r();var i=0,v=0,h=.1*Math.pow(e.p_lpf_freq,3),m=1+1e-4*e.p_lpf_ramp,c=5/(1+20*Math.pow(e.p_lpf_resonance,2))*(.01+h);c>.8&&(c=.8);var y=0,E=.1*Math.pow(e.p_hpf_freq,2),w=1+3e-4*e.p_hpf_ramp,q=0,S=.01*Math.pow(e.p_vib_speed,2),M=.5*e.p_vib_strength,b=0,A=0,g=0,T=[Math.floor(e.p_env_attack*e.p_env_attack*1e5),Math.floor(e.p_env_sustain*e.p_env_sustain*1e5),Math.floor(e.p_env_decay*e.p_env_decay*1e5)],I=T[0]+T[1]+T[2],O=0,P=1020*Math.pow(e.p_pha_offset,2);e.p_pha_offset<0&&(P=-P);var k=1*Math.pow(e.p_pha_ramp,2);e.p_pha_ramp<0&&(k=-k);for(var N=Math.abs(Math.floor(P)),U=0,C=[],B=0;B<1024;++B)C[B]=0;for(var R=[],B=0;B<32;++B)R[B]=2*Math.random()-1;var L=Math.floor(2e4*Math.pow(1-e.p_repeat_speed,2)+32);0==e.p_repeat_speed&&(L=0);var H,x=2*e.sound_vol,x=Math.exp(e.sound_vol)-1,D=0,X=0,Q=Math.floor(44100/e.sample_rate),F=0,V=Math.ceil(I/Q);H=e.sample_rate<SoundEffect.MIN_SAMPLE_RATE?new SoundEffect(4*V,SoundEffect.MIN_SAMPLE_RATE):new SoundEffect(V,e.sample_rate);for(var W=H.getBuffer(),j=0;;++j){0!=L&&++_>=L&&r(),0!=l&&j>=l&&(l=0,p*=u),f+=a,p*=f,p>t&&(p=t,e.p_freq_limit>0&&!0);var G=p;if(M>0&&(q+=S,G=p*(1+Math.sin(q)*M)),n=Math.floor(G),n<8&&(n=8),d+=o,d<0&&(d=0),d>.5&&(d=.5),++g>T[A]){for(g=1,A++;A<3&&0===T[A];)A++;if(3===A)break}b=0===A?g/T[0]:1===A?1+2*Math.pow(1-g/T[1],1)*e.p_env_punch:1-g/T[2],P+=k,N=Math.abs(Math.floor(P)),N>1023&&(N=1023),0!=w&&(E*=w,E<1e-5&&(E=1e-5),E>.1&&(E=.1));for(var K=0,Y=0;Y<8;++Y){var z=0;if(++O>=n&&(O%=n,e.wave_type===NOISE))for(var B=0;B<32;++B)R[B]=2*Math.random()-1;var J=O/n;if(e.wave_type===SQUARE)z=J<d?.5:-.5;else if(e.wave_type===SAWTOOTH)z=1-2*J;else if(e.wave_type===SINE)z=Math.sin(2*J*Math.PI);else if(e.wave_type===NOISE)z=R[Math.floor(32*O/n)];else if(e.wave_type===TRIANGLE)z=Math.abs(1-2*J)-1;else{if(e.wave_type!==BREAKER)throw new Exception("bad wave type! "+e.wave_type);z=Math.abs(1-J*J*2)-1}var Z=i;h*=m,h<0&&(h=0),h>.1&&(h=.1),1!=e.p_lpf_freq?(v+=(z-i)*h,v-=v*c):(i=z,v=0),i+=v,y+=i-Z,y-=y*E,z=y,C[1023&U]=z,z+=C[U-N+1024&1023],U=U+1&1023,K+=z*b}D+=K,++X>=Q&&(X=0,K=D/Q,D=0,K=K/8*masterVolume,K*=x,W[F++]=K,e.sample_rate<SoundEffect.MIN_SAMPLE_RATE&&(W[F++]=K,W[F++]=K,W[F++]=K))}return Q>0&&(K=D/Q,K=K/8*masterVolume,K*=x,W[F++]=K,e.sample_rate<SoundEffect.MIN_SAMPLE_RATE&&(W[F++]=K,W[F++]=K,W[F++]=K)),H},"undefined"!=typeof exports){var RIFFWAVE=require("./riffwave").RIFFWAVE;exports.Params=Params,exports.generate=generate}var sfxCache={},cachedSeeds=[],CACHE_MAX=50;</script> <script>function CodeMirror(t,i){}CodeMirror.defineMode=function(t,i){};var StringStream=CodeMirror.StringStream=function(t,i){this.pos=this.start=0,this.string=t,this.tabSize=i||8,this.lastColumnPos=this.lastColumnValue=0,this.lineStart=0};StringStream.prototype={eol:function(){return this.pos>=this.string.length},sol:function(){return this.pos==this.lineStart},peek:function(){return this.string.charAt(this.pos)||void 0},next:function(){if(this.pos<this.string.length)return this.string.charAt(this.pos++)},eat:function(t){var i=this.string.charAt(this.pos);if("string"==typeof t)var s=i==t;else var s=i&&(t.test?t.test(i):t(i));if(s)return++this.pos,i},eatWhile:function(t){for(var i=this.pos;this.eat(t););return this.pos>i},eatSpace:function(){for(var t=this.pos;/[\s\u00a0]/.test(this.string.charAt(this.pos));)++this.pos;return this.pos>t},skipToEnd:function(){this.pos=this.string.length},skipTo:function(t){var i=this.string.indexOf(t,this.pos);if(i>-1)return this.pos=i,!0},backUp:function(t){this.pos-=t},column:function(){return this.lastColumnPos<this.start&&(this.lastColumnValue=countColumn(this.string,this.start,this.tabSize,this.lastColumnPos,this.lastColumnValue),this.lastColumnPos=this.start),this.lastColumnValue-(this.lineStart?countColumn(this.string,this.lineStart,this.tabSize):0)},indentation:function(){return countColumn(this.string,null,this.tabSize)-(this.lineStart?countColumn(this.string,this.lineStart,this.tabSize):0)},match:function(t,i,s){if("string"!=typeof t){var n=this.string.slice(this.pos).match(t);return n&&n.index>0?null:(n&&!1!==i&&(this.pos+=n[0].length),n)}var r=function(t){return s?t.toLowerCase():t};if(r(this.string.substr(this.pos,t.length))==r(t))return!1!==i&&(this.pos+=t.length),!0},current:function(){return this.string.slice(this.start,this.pos)},hideFirstChars:function(t,i){this.lineStart+=t;try{return i()}finally{this.lineStart-=t}}};</script> <script>colorPalettesAliases={1:"mastersystem",2:"gameboycolour",3:"amiga",4:"arnecolors",5:"famicom",6:"atari",7:"pastel",8:"ega",9:"amstrad",10:"proteus_mellow",11:"proteus_rich",12:"proteus_night",13:"c64",14:"whitingjp"},colorPalettes={mastersystem:{black:"#000000",white:"#FFFFFF",grey:"#555555",darkgrey:"#555500",lightgrey:"#AAAAAA",gray:"#555555",darkgray:"#555500",lightgray:"#AAAAAA",red:"#FF0000",darkred:"#AA0000",lightred:"#FF5555",brown:"#AA5500",darkbrown:"#550000",lightbrown:"#FFAA00",orange:"#FF5500",yellow:"#FFFF55",green:"#55AA00",darkgreen:"#005500",lightgreen:"#AAFF00",blue:"#5555AA",lightblue:"#AAFFFF",darkblue:"#000055",purple:"#550055",pink:"#FFAAFF"},gameboycolour:{black:"#000000",white:"#FFFFFF",grey:"#7F7F7C",darkgrey:"#3E3E44",lightgrey:"#BAA7A7",gray:"#7F7F7C",darkgray:"#3E3E44",lightgray:"#BAA7A7",red:"#A7120C",darkred:"#880606",lightred:"#BA381F",brown:"#57381F",darkbrown:"#3E2519",lightbrown:"#8E634B",orange:"#BA4B32",yellow:"#C0BA6F",green:"#517525",darkgreen:"#385D12",lightgreen:"#6F8E44",blue:"#5D6FA7",lightblue:"#8EA7A7",darkblue:"#4B575D",purple:"#3E3E44",pink:"#BA381F"},amiga:{black:"#000000",white:"#FFFFFF",grey:"#BBBBBB",darkgrey:"#333333",lightgrey:"#FFEEDD",gray:"#BBBBBB",darkgray:"#333333",lightgray:"#FFEEDD",red:"#DD1111",darkred:"#990000",lightred:"#FF4422",brown:"#663311",darkbrown:"#331100",lightbrown:"#AA6644",orange:"#FF6644",yellow:"#FFDD66",green:"#448811",darkgreen:"#335500",lightgreen:"#88BB77",blue:"#8899DD",lightblue:"#BBDDEE",darkblue:"#666688",purple:"#665555",pink:"#997788"},arnecolors:{black:"#000000",white:"#FFFFFF",grey:"#9d9d9d",darkgrey:"#697175",lightgrey:"#cccccc",gray:"#9d9d9d",darkgray:"#697175",lightgray:"#cccccc",red:"#be2633",darkred:"#732930",lightred:"#e06f8b",brown:"#a46422",darkbrown:"#493c2b",lightbrown:"#eeb62f",orange:"#eb8931",yellow:"#f7e26b",green:"#44891a",darkgreen:"#2f484e",lightgreen:"#a3ce27",blue:"#1d57f7",lightblue:"#B2DCEF",darkblue:"#1B2632",purple:"#342a97",pink:"#de65e2"},famicom:{black:"#000000",white:"#ffffff",grey:"#7c7c7c",darkgrey:"#080808",lightgrey:"#bcbcbc",gray:"#7c7c7c",darkgray:"#080808",lightgray:"#bcbcbc",red:"#f83800",darkred:"#881400",lightred:"#f87858",brown:"#AC7C00",darkbrown:"#503000",lightbrown:"#FCE0A8",orange:"#FCA044",yellow:"#F8B800",green:"#00B800",darkgreen:"#005800",lightgreen:"#B8F8B8",blue:"#0058F8",lightblue:"#3CBCFC",darkblue:"#0000BC",purple:"#6644FC",pink:"#F878F8"},atari:{black:"#000000",white:"#FFFFFF",grey:"#909090",darkgrey:"#404040",lightgrey:"#b0b0b0",gray:"#909090",darkgray:"#404040",lightgray:"#b0b0b0",red:"#A03C50",darkred:"#700014",lightred:"#DC849C",brown:"#805020",darkbrown:"#703400",lightbrown:"#CB9870",orange:"#CCAC70",yellow:"#ECD09C",green:"#58B06C",darkgreen:"#006414",lightgreen:"#70C484",blue:"#1C3C88",lightblue:"#6888C8",darkblue:"#000088",purple:"#3C0080",pink:"#B484DC"},pastel:{black:"#000000",white:"#FFFFFF",grey:"#3e3e3e",darkgrey:"#313131",lightgrey:"#9cbcbc",gray:"#3e3e3e",darkgray:"#313131",lightgray:"#9cbcbc",red:"#f56ca2",darkred:"#a63577",lightred:"#ffa9cf",brown:"#b58c53",darkbrown:"#787562",lightbrown:"#B58C53",orange:"#EB792D",yellow:"#FFe15F",green:"#00FF4F",darkgreen:"#2b732c",lightgreen:"#97c04f",blue:"#0f88d3",lightblue:"#00fffe",darkblue:"#293a7b",purple:"#ff6554",pink:"#eb792d"},ega:{black:"#000000",white:"#ffffff",grey:"#555555",darkgrey:"#555555",lightgrey:"#aaaaaa",gray:"#555555",darkgray:"#555555",lightgray:"#aaaaaa",red:"#ff5555",darkred:"#aa0000",lightred:"#ff55ff",brown:"#aa5500",darkbrown:"#aa5500",lightbrown:"#ffff55",orange:"#ff5555",yellow:"#ffff55",green:"#00aa00",darkgreen:"#00aaaa",lightgreen:"#55ff55",blue:"#5555ff",lightblue:"#55ffff",darkblue:"#0000aa",purple:"#aa00aa",pink:"#ff55ff"},proteus_mellow:{black:"#3d2d2e",white:"#ddf1fc",grey:"#9fb2d4",darkgrey:"#7b8272",lightgrey:"#a4bfda",gray:"#9fb2d4",darkgray:"#7b8272",lightgray:"#a4bfda",red:"#9d5443",darkred:"#8c5b4a",lightred:"#94614c",brown:"#89a78d",darkbrown:"#829e88",lightbrown:"#aaae97",orange:"#d1ba86",yellow:"#d6cda2",green:"#75ac8d",darkgreen:"#8fa67f",lightgreen:"#8eb682",blue:"#88a3ce",lightblue:"#a5adb0",darkblue:"#5c6b8c",purple:"#d39fac",pink:"#c8ac9e"},proteus_night:{black:"#010912",white:"#fdeeec",grey:"#051d40",darkgrey:"#091842",lightgrey:"#062151",gray:"#051d40",darkgray:"#091842",lightgray:"#062151",red:"#ad4576",darkred:"#934765",lightred:"#ab6290",brown:"#61646b",darkbrown:"#3d2d2d",lightbrown:"#8393a0",orange:"#0a2227",yellow:"#0a2541",green:"#75ac8d",darkgreen:"#0a2434",lightgreen:"#061f2e",blue:"#0b2c79",lightblue:"#809ccb",darkblue:"#08153b",purple:"#666a87",pink:"#754b4d"},proteus_rich:{black:"#6f686f",white:"#d1b1e2",grey:"#b9aac1",darkgrey:"#8e8b84",lightgrey:"#c7b5cd",gray:"#b9aac1",darkgray:"#8e8b84",lightgray:"#c7b5cd",red:"#a11f4f",darkred:"#934765",lightred:"#c998ad",brown:"#89867d",darkbrown:"#797f75",lightbrown:"#ab9997",orange:"#ce8c5c",yellow:"#f0d959",green:"#75bc54",darkgreen:"#599d79",lightgreen:"#90cf5c",blue:"#8fd0ec",lightblue:"#bcdce7",darkblue:"#0b2c70",purple:"#9b377f",pink:"#cd88e5"},amstrad:{black:"#000000",white:"#ffffff",grey:"#7f7f7f",darkgrey:"#636363",lightgrey:"#afafaf",gray:"#7f7f7f",darkgray:"#636363",lightgray:"#afafaf",red:"#ff0000",darkred:"#7f0000",lightred:"#ff7f7f",brown:"#ff7f00",darkbrown:"#7f7f00",lightbrown:"#ffff00",orange:"#ff007f",yellow:"#ffff7f",green:"#01ff00",darkgreen:"#007f00",lightgreen:"#7fff7f",blue:"#0000ff",lightblue:"#7f7fff",darkblue:"#00007f",purple:"#7f007f",pink:"#ff7fff"},c64:{black:"#000000",white:"#ffffff",grey:"#6C6C6C",darkgrey:"#444444",lightgrey:"#959595",gray:"#6C6C6C",darkgray:"#444444",lightgray:"#959595",red:"#68372B",darkred:"#3f1e17",lightred:"#9A6759",brown:"#433900",darkbrown:"#221c02",lightbrown:"#6d5c0d",orange:"#6F4F25",yellow:"#B8C76F",green:"#588D43",darkgreen:"#345129",lightgreen:"#9AD284",blue:"#6C5EB5",lightblue:"#70A4B2",darkblue:"#352879",purple:"#6F3D86",pink:"#b044ac"},whitingjp:{black:"#202527",white:"#eff8fd",grey:"#7b7680",darkgrey:"#3c3b44",lightgrey:"#bed0d7",gray:"#7b7680",darkgray:"#3c3b44",lightgray:"#bed0d7",red:"#bd194b",darkred:"#6b1334",lightred:"#ef2358",brown:"#b52e1c",darkbrown:"#681c12",lightbrown:"#e87b45",orange:"#ff8c10",yellow:"#fbd524",green:"#36bc3c",darkgreen:"#317610",lightgreen:"#8ce062",blue:"#3f62c6",lightblue:"#57bbe0",darkblue:"#2c2fa0",purple:"#7037d9",pink:"#ec2b8f"}};var reg_color_names=/(black|white|darkgray|lightgray|gray|grey|darkgrey|lightgrey|red|darkred|lightred|brown|darkbrown|lightbrown|orange|yellow|green|darkgreen|lightgreen|blue|lightblue|darkblue|purple|pink|transparent)\s*/,reg_color=/(black|white|gray|darkgray|lightgray|grey|darkgrey|lightgrey|red|darkred|lightred|brown|darkbrown|lightbrown|orange|yellow|green|darkgreen|lightgreen|blue|lightblue|darkblue|purple|pink|transparent|#(?:[0-9a-f]{3}){1,2})\s*/;</script> <script>function createSprite(name,spritegrid, colors, padding) { 
 if (colors === undefined) { 
  colors = [state.bgcolor, state.fgcolor]; 
 } 
 
 var sprite = makeSpriteCanvas(name); 
 var spritectx = sprite.getContext('2d'); 
 
    spritectx.clearRect(0, 0, cellwidth, cellheight); 
 
 var w = spritegrid[0].length; 
 var h = spritegrid.length; 
 var cw = ~~(cellwidth / (w + (padding|0))); 
    var ch = ~~(cellheight / (h + (padding|0))); 
    var pixh=ch; 
    if ("scanline" in state.metadata) { 
        pixh=Math.ceil(ch/2); 
    } 
    spritectx.fillStyle = state.fgcolor; 
    for (var j = 0; j < h; j++) { 
        for (var k = 0; k < w; k++) { 
            var val = spritegrid[j][k]; 
            if (val >= 0) { 
                var cy = (j * ch)|0; 
                var cx = (k * cw)|0; 
                spritectx.fillStyle = colors[val]; 
                spritectx.fillRect(cx, cy, cw, pixh); 
            } 
        } 
    } 
 
    return sprite; 
} 
 
function regenText(spritecanvas,spritectx) { 
 textImages={}; 
 
 for (var n in font) { 
  if (font.hasOwnProperty(n)) { 
            fontstr = font[n].split('\n').map(a=>a.trim().split('').map(t=>parseInt(t))); 
            fontstr.shift(); 
   textImages[n] = createSprite('char'+n,fontstr, undefined, 1); 
  } 
 } 
} 
 
var editor_s_grille=[[0,1,1,1,0],[1,0,0,0,0],[0,1,1,1,0],[0,0,0,0,1],[0,1,1,1,0]]; 
 
var spriteimages; 
function regenSpriteImages() { 
 if (textMode) { 
  regenText(); 
  return; 
 } else if (levelEditorOpened) { 
        textImages['editor_s'] = createSprite('chars',editor_s_grille,undefined); 
    } 
     
    if (state.levels.length===0) { 
        return; 
    } 
    spriteimages = []; 
 
    for (var i = 0; i < sprites.length; i++) { 
        if (sprites[i] == undefined) { 
            continue; 
        } 
        spriteimages[i] = createSprite(i.toString(),sprites[i].dat, sprites[i].colors); 
    } 
 
    if (canOpenEditor) { 
     generateGlyphImages(); 
    } 
} 
 
var glyphImagesCorrespondance; 
var glyphImages; 
var glyphHighlight; 
var glyphHighlightResize; 
var glyphPrintButton; 
var glyphMouseOver; 
var glyphSelectedIndex=0; 
var editorRowCount=1; 
 
var canvasdict={}; 
function makeSpriteCanvas(name) { 
    var canvas; 
    if (name in canvasdict) { 
        canvas = canvasdict[name]; 
    } else { 
        canvas = document.createElement('canvas'); 
        canvasdict[name]=canvas; 
    } 
 canvas.width = cellwidth; 
 canvas.height = cellheight; 
 return canvas; 
} 
 
 
function generateGlyphImages() { 
    if (cellwidth===0||cellheight===0) { 
        return; 
    } 
 glyphImagesCorrespondance=[]; 
 glyphImages=[]; 
  
 for (var n in state.glyphDict) { 
  if (n.length==1 && state.glyphDict.hasOwnProperty(n)) { 
   var g=state.glyphDict[n]; 
   var sprite = makeSpriteCanvas("C"+n) 
   var spritectx = sprite.getContext('2d'); 
   glyphImagesCorrespondance.push(n); 
   for (var i=0;i<g.length;i++){ 
    var id = g[i]; 
    if (id===-1) { 
     continue; 
    } 
    spritectx.drawImage(spriteimages[id], 0, 0); 
   } 
   glyphImages.push(sprite); 
  } 
 } 
 
 { 
  //make highlight thingy 
  glyphHighlight = makeSpriteCanvas("highlight"); 
  var spritectx = glyphHighlight.getContext('2d'); 
  spritectx.fillStyle = '#FFFFFF'; 
 
  spritectx.fillRect(0,0,cellwidth,1); 
  spritectx.fillRect(0,0,1,cellheight); 
   
  spritectx.fillRect(0,cellheight-1,cellwidth,1); 
  spritectx.fillRect(cellwidth-1,0,1,cellheight); 
 } 
 
 { 
  glyphPrintButton = textImages['editor_s']; 
 } 
 { 
  //make highlight thingy 
  glyphHighlightResize = makeSpriteCanvas("highlightresize"); 
  var spritectx = glyphHighlightResize.getContext('2d'); 
  spritectx.fillStyle = '#FFFFFF'; 
   
  var minx=((cellwidth/2)-1)|0; 
  var xsize=cellwidth-minx-1-minx; 
  var miny=((cellheight/2)-1)|0; 
  var ysize=cellheight-miny-1-minx; 
 
  spritectx.fillRect(minx,0,xsize,cellheight); 
  spritectx.fillRect(0,miny,cellwidth,ysize); 
 } 
 
 { 
  //make highlight thingy 
  glyphMouseOver = makeSpriteCanvas(); 
  var spritectx = glyphMouseOver.getContext('2d'); 
  spritectx.fillStyle = 'yellow'; 
   
  spritectx.fillRect(0,0,cellwidth,2); 
  spritectx.fillRect(0,0,2,cellheight); 
   
  spritectx.fillRect(0,cellheight-2,cellwidth,2); 
  spritectx.fillRect(cellwidth-2,0,2,cellheight); 
 } 
} 
 
var canvas; 
var ctx; 
 
 
var x; 
var y; 
var cellwidth; 
var cellheight; 
var magnification; 
var xoffset; 
var yoffset; 
 
window.addEventListener('resize', canvasResize, false); 
canvas = document.getElementById('gameCanvas'); 
ctx = canvas.getContext('2d'); 
x = 0; 
y = 0; 
 
function glyphCount(){ 
    var count=0; 
    for (var n in state.glyphDict) { 
        if (n.length==1 && state.glyphDict.hasOwnProperty(n)) { 
            count++; 
        } 
    }     
    return count; 
} 
 
function redraw() { 
    if (cellwidth===0||cellheight===0) { 
        return; 
    } 
    if (spriteimages===undefined) { 
        regenSpriteImages(); 
    } 
 
    if (textMode) { 
        ctx.fillStyle = state.bgcolor; 
        ctx.fillRect(0, 0, canvas.width, canvas.height); 
 
        for (var i = 0; i < titleWidth; i++) { 
            for (var j = 0; j < titleHeight; j++) { 
                var ch = titleImage[j].charAt(i); 
                if (ch in textImages) { 
                    var sprite = textImages[ch]; 
                    ctx.drawImage(sprite, xoffset + i * cellwidth, yoffset + j * cellheight);                    
                } 
            } 
        } 
        return; 
    } else { 
        ctx.fillStyle = state.bgcolor; 
        ctx.fillRect(0, 0, canvas.width, canvas.height); 
 
        var mini=0; 
        var maxi=screenwidth; 
        var minj=0; 
        var maxj=screenheight; 
 
        if (levelEditorOpened) { 
            var glyphcount = glyphCount(); 
            editorRowCount = Math.ceil(glyphcount/(screenwidth-1)); 
            maxi-=2; 
            maxj-=2+editorRowCount; 
        } else if (flickscreen) { 
            var playerPositions = getPlayerPositions(); 
            if (playerPositions.length>0) { 
                var playerPosition=playerPositions[0]; 
                var px = (playerPosition/(level.height))|0; 
                var py = (playerPosition%level.height)|0; 
 
                var screenx = (px/screenwidth)|0; 
                var screeny = (py/screenheight)|0; 
                mini=screenx*screenwidth; 
                minj=screeny*screenheight; 
                maxi=Math.min(mini+screenwidth,level.width); 
                maxj=Math.min(minj+screenheight,level.height); 
 
                oldflickscreendat=[mini,minj,maxi,maxj]; 
            } else if (oldflickscreendat.length>0){ 
                mini=oldflickscreendat[0]; 
                minj=oldflickscreendat[1]; 
                maxi=oldflickscreendat[2]; 
                maxj=oldflickscreendat[3]; 
            } 
        } else if (zoomscreen) { 
            var playerPositions = getPlayerPositions(); 
            if (playerPositions.length>0) { 
                var playerPosition=playerPositions[0]; 
                var px = (playerPosition/(level.height))|0; 
                var py = (playerPosition%level.height)|0; 
                mini=Math.max(Math.min(px-((screenwidth/2)|0),level.width-screenwidth),0); 
                minj=Math.max(Math.min(py-((screenheight/2)|0),level.height-screenheight),0); 
                maxi=Math.min(mini+screenwidth,level.width); 
                maxj=Math.min(minj+screenheight,level.height); 
                oldflickscreendat=[mini,minj,maxi,maxj]; 
            }  else if (oldflickscreendat.length>0){ 
                mini=oldflickscreendat[0]; 
                minj=oldflickscreendat[1]; 
                maxi=oldflickscreendat[2]; 
                maxj=oldflickscreendat[3]; 
            }          
        } 
      
 
        for (var i = mini; i < maxi; i++) { 
            for (var j = minj; j < maxj; j++) { 
                var posIndex = j + i * level.height; 
                var posMask = level.getCellInto(posIndex,_o12);                 
                for (var k = 0; k < state.objectCount; k++) { 
                    if (posMask.get(k) != 0) {                   
                        var sprite = spriteimages[k]; 
                        ctx.drawImage(sprite, xoffset + (i-mini) * cellwidth, yoffset + (j-minj) * cellheight); 
                    } 
                } 
            } 
        } 
 
     if (levelEditorOpened) { 
      drawEditorIcons(); 
     } 
    } 
} 
 
function drawEditorIcons() { 
 var glyphCount = glyphImages.length; 
 var glyphStartIndex=0; 
 var glyphEndIndex = glyphImages.length;/*Math.min( 
       glyphStartIndex+10, 
       screenwidth-2, 
       glyphStartIndex+Math.max(glyphCount-glyphStartIndex,0) 
       );*/ 
 var glyphsToDisplay = glyphEndIndex-glyphStartIndex; 
 
 ctx.drawImage(glyphPrintButton,xoffset-cellwidth,yoffset-cellheight*(1+editorRowCount)); 
 if (mouseCoordY===(-1-editorRowCount)&&mouseCoordX===-1) { 
   ctx.drawImage(glyphMouseOver,xoffset-cellwidth,yoffset-cellheight*(1+editorRowCount));         
 } 
 
 var ypos = editorRowCount-(-mouseCoordY-2)-1; 
 var mouseIndex=mouseCoordX+(screenwidth-1)*ypos; 
 
 for (var i=0;i<glyphsToDisplay;i++) { 
  var glyphIndex = glyphStartIndex+i; 
  var sprite = glyphImages[glyphIndex]; 
        var xpos=i%(screenwidth-1); 
        var ypos=(i/(screenwidth-1))|0; 
  ctx.drawImage(sprite,xoffset+(xpos)*cellwidth,yoffset+ypos*cellheight-cellheight*(1+editorRowCount)); 
  if (mouseCoordX>=0&&mouseCoordX<(screenwidth-1)&&mouseIndex===i) { 
   ctx.drawImage(glyphMouseOver,xoffset+xpos*cellwidth,yoffset+ypos*cellheight-cellheight*(1+editorRowCount));       
  } 
  if (i===glyphSelectedIndex) { 
   ctx.drawImage(glyphHighlight,xoffset+xpos*cellwidth,yoffset+ypos*cellheight-cellheight*(1+editorRowCount)); 
  }    
 } 
 if (mouseCoordX>=-1&&mouseCoordY>=-1&&mouseCoordX<screenwidth-1&&mouseCoordY<screenheight-1-editorRowCount) { 
  if (mouseCoordX==-1||mouseCoordY==-1||mouseCoordX==screenwidth-2||mouseCoordY===screenheight-2-editorRowCount) { 
   ctx.drawImage(glyphHighlightResize, 
    xoffset+mouseCoordX*cellwidth, 
    yoffset+mouseCoordY*cellheight 
    );         
  } else { 
   ctx.drawImage(glyphHighlight, 
    xoffset+mouseCoordX*cellwidth, 
    yoffset+mouseCoordY*cellheight 
    );     
  } 
 } 
 
} 
 
var lastDownTarget; 
 
var oldcellwidth=0; 
var oldcellheight=0; 
var oldtextmode=-1; 
var oldfgcolor=-1; 
var forceRegenImages=false; 
function canvasResize() { 
    canvas.width = canvas.parentNode.clientWidth; 
    canvas.height = canvas.parentNode.clientHeight; 
 
    screenwidth=level.width; 
    screenheight=level.height; 
    if (state!==undefined){ 
        flickscreen=state.metadata.flickscreen!==undefined; 
        zoomscreen=state.metadata.zoomscreen!==undefined; 
     if (levelEditorOpened) { 
            screenwidth+=2; 
            var glyphcount = glyphCount(); 
            editorRowCount = Math.ceil(glyphcount/(screenwidth-1)); 
            screenheight+=2+editorRowCount; 
        } else if (flickscreen) { 
         screenwidth=state.metadata.flickscreen[0]; 
         screenheight=state.metadata.flickscreen[1]; 
     } else if (zoomscreen) { 
         screenwidth=state.metadata.zoomscreen[0]; 
         screenheight=state.metadata.zoomscreen[1]; 
     } 
 } 
 
    if (textMode) { 
        screenwidth=titleWidth; 
        screenheight=titleHeight; 
    } 
     
    cellwidth = canvas.width / screenwidth; 
    cellheight = canvas.height / screenheight; 
 
    var w = 5;//sprites[1].dat.length; 
    var h = 5;//sprites[1].dat[0].length; 
 
 
    if (textMode) { 
        w=5 + 1; 
        h=font['X'].length/(w) + 1; 
    } 
 
 
    cellwidth =w * Math.max( ~~(cellwidth / w),1); 
    cellheight = h * Math.max(~~(cellheight / h),1); 
 
    xoffset = 0; 
    yoffset = 0; 
 
    if (cellwidth / w > cellheight / h) { 
        cellwidth = cellheight * w / h; 
        xoffset = (canvas.width - cellwidth * screenwidth) / 2; 
        yoffset = (canvas.height - cellheight * screenheight) / 2; 
    } 
    else { //if (cellheight > cellwidth) { 
        cellheight = cellwidth * h / w; 
        yoffset = (canvas.height - cellheight * screenheight) / 2; 
        xoffset = (canvas.width - cellwidth * screenwidth) / 2; 
    } 
    magnification = ((cellwidth/w)*5)|0; 
 
    if (levelEditorOpened && !textMode) { 
     xoffset+=cellwidth; 
     yoffset+=cellheight*(1+editorRowCount); 
    } 
 
    cellwidth = cellwidth|0; 
    cellheight = cellheight|0; 
    xoffset = xoffset|0; 
    yoffset = yoffset|0; 
 
    if (oldcellwidth!=cellwidth||oldcellheight!=cellheight||oldtextmode!=textMode||oldfgcolor!=state.fgcolor||forceRegenImages){ 
     forceRegenImages=false; 
     regenSpriteImages(); 
    } 
 
    oldcellheight=cellheight; 
    oldcellwidth=cellwidth; 
    oldtextmode=textMode; 
    oldfgcolor=state.fgcolor; 
 
    redraw(); 
}</script> <script>function unloadGame(){state=introstate,level=new Level(0,5,5,2,null),level.objects=new Int32Array(0),generateTitleScreen(),canvasResize(),redraw()}function generateTitleScreen(){if(titleMode=curlevel>0||null!==curlevelTarget?1:0,0===state.levels.length)return void(titleImage=intro_template);var e="PuzzleScript Game";void 0!==state.metadata.title&&(e=state.metadata.title),titleImage=deepClone(0===titleMode?titleSelected?titletemplate_firstgo_selected:titletemplate_firstgo:0===titleSelection?titleSelected?titletemplate_select0_selected:titletemplate_select0:titleSelected?titletemplate_select1_selected:titletemplate_select1);var t="noaction"in state.metadata,a="noundo"in state.metadata,l="norestart"in state.metadata;a&&l?titleImage[11]="..............................................":a?titleImage[11]=".......R to restart...........................":l&&(titleImage[11]=".Z to undo....................."),t&&(titleImage[10]=".......X to select............................");for(var n=0;n<titleImage.length;n++)titleImage[n]=titleImage[n].replace(/\./g," ");var r=titleImage[0].length,o=wordwrap(e,titleImage[0].length);void 0!==state.metadata.author?o.length>3&&(o.splice(3),logWarning("Game title is too long to fit on screen, truncating to three lines.",void 0,!0)):o.length>5&&(o.splice(5),logWarning("Game title is too long to fit on screen, truncating to five lines.",void 0,!0));for(var n=0;n<o.length;n++){var i=o[n],s=i.length,c=(r-s)/2|0,v=titleImage[1+n];titleImage[1+n]=v.slice(0,c)+i+v.slice(c+i.length)}if(void 0!==state.metadata.author){var u="by "+state.metadata.author,d=wordwrap(u,titleImage[0].length);d[0].length<titleImage[0].length&&(d[0]=" "+d[0]),d.length>3&&(d.splice(3),logWarning("Author list too long to fit on screen, truncating to three lines.",void 0,!0));for(var n=0;n<d.length;n++){var m=d[n]+" ";m.length>r&&(m=m.slice(0,r));var v=titleImage[3+n];titleImage[3+n]=v.slice(0,r-m.length)+m}}}function deepClone(e){if(!e)return e;var t,a=[Number,String,Boolean];if(a.forEach(function(a){e instanceof a&&(t=a(e))}),void 0===t)if("[object Array]"===Object.prototype.toString.call(e))t=[],e.forEach(function(e,a,l){t[a]=deepClone(e)});else if("object"==typeof e)if(e.nodeType&&"function"==typeof e.cloneNode)var t=e.cloneNode(!0);else if(e.prototype)t=e;else if(e instanceof Date)t=new Date(e);else{t={};for(var l in e)t[l]=deepClone(e[l])}else t=e;return t}function wordwrap(e,t){t=t||75;if(!e)return e;var a=".{1,"+t+"}(\\s|$)|.{"+t+"}|.+$";return e.match(RegExp(a,"g"))}function drawMessageScreen(){titleMode=0,textMode=!0,titleImage=deepClone(messagecontainer_template);for(var e=0;e<titleImage.length;e++)titleImage[e]=titleImage[e].replace(/\./g," ");var t=titleImage[9],a=titleImage[10];titleImage[10]=t;var l,n=titleImage[0].length;if(""===messagetext){l=state.levels[curlevel].message.trim()}else l=messagetext;splitMessage=wordwrap(l,titleImage[0].length);var r=5-(splitMessage.length/2|0);r<0&&(r=0);for(var o=Math.min(splitMessage.length,12),e=0;e<o;e++){var i=splitMessage[e],s=r+e,c=i.length,v=(n-c)/2|0,u=titleImage[s];titleImage[s]=u.slice(0,v)+i+u.slice(v+i.length)}var d=10;o>=10&&(d=o<12?o+1:12),quittingMessageScreen?titleImage[d]=t:titleImage[d]=a,canvasResize()}function loadLevelFromLevelDat(e,t,a){if(null==a&&(a=(Math.random()+Date.now()).toString()),loadedLevelSeed=a,RandomGen=new RNG(loadedLevelSeed),forceRegenImages=!0,titleScreen=!1,titleMode=curlevel>0||null!==curlevelTarget?1:0,titleSelection=curlevel>0||null!==curlevelTarget?1:0,titleSelected=!1,againing=!1,void 0===t)return consolePrint("Trying to access a level that doesn't exist.",!0),void goToTitleScreen();void 0===t.message?(titleMode=0,textMode=!1,level=t.clone(),RebuildLevelArrays(),void 0!==e&&(void 0!==e.metadata.flickscreen?oldflickscreendat=[0,0,Math.min(e.metadata.flickscreen[0],level.width),Math.min(e.metadata.flickscreen[1],level.height)]:void 0!==e.metadata.zoomscreen&&(oldflickscreendat=[0,0,Math.min(e.metadata.zoomscreen[0],level.width),Math.min(e.metadata.zoomscreen[1],level.height)])),backups=[],restartTarget=backupLevel(),keybuffer=[],"run_rules_on_level_start"in e.metadata&&(runrulesonlevelstart_phase=!0,processInput(-1,!0),runrulesonlevelstart_phase=!1)):(tryPlayShowMessageSound(),drawMessageScreen(),canvasResize()),clearInputHistory()}function loadLevelFromStateTarget(e,t,a,l){var n=a;curlevel=t,curlevelTarget=a,void 0===n.message&&tryPlayStartLevelSound(),loadLevelFromLevelDat(e,e.levels[t],l),restoreLevel(a),restartTarget=a}function loadLevelFromState(e,t,a){var l=e.levels[t];curlevel=t,curlevelTarget=null,void 0!==l&&void 0===l.message&&tryPlayStartLevelSound(),loadLevelFromLevelDat(e,l,a)}function tryPlaySimpleSound(e){if(void 0!==state.sfx_Events[e]){var t=state.sfx_Events[e];playSound(t)}}function tryPlayTitleSound(){tryPlaySimpleSound("titlescreen")}function tryPlayStartGameSound(){tryPlaySimpleSound("startgame")}function tryPlayEndGameSound(){tryPlaySimpleSound("endgame")}function tryPlayCancelSound(){tryPlaySimpleSound("cancel")}function tryPlayStartLevelSound(){tryPlaySimpleSound("startlevel")}function tryPlayEndLevelSound(){tryPlaySimpleSound("endlevel")}function tryPlayUndoSound(){tryPlaySimpleSound("undo")}function tryPlayRestartSound(){tryPlaySimpleSound("restart")}function tryPlayShowMessageSound(){tryPlaySimpleSound("showmessage")}function tryPlayCloseMessageSound(){tryPlaySimpleSound("closemessage")}function backupLevel(){return{dat:new Int32Array(level.objects),width:level.width,height:level.height,oldflickscreendat:oldflickscreendat.concat([])}}function level4Serialization(){return{dat:Array.from(level.objects),width:level.width,height:level.height,oldflickscreendat:oldflickscreendat.concat([])}}function tryDeactivateYoutube(){var e=document.getElementById("youtubeFrame");e&&document.body.removeChild(e)}function tryActivateYoutube(){if(!document.getElementById("youtubeFrame")&&canYoutube&&"youtube"in state.metadata){var e=state.metadata.youtube,t="https://www.youtube.com/embed/"+e+"?autoplay=1&loop=1&playlist="+e;ifrm=document.createElement("IFRAME"),ifrm.setAttribute("src",t),ifrm.setAttribute("id","youtubeFrame"),ifrm.style.visibility="hidden",ifrm.style.width="500px",ifrm.style.height="500px",ifrm.style.position="absolute",ifrm.style.top="-1000px",ifrm.style.left="-1000px",document.body.appendChild(ifrm)}}function setGameState(e,t,a){oldflickscreendat=[],timer=0,autotick=0,winning=!1,againing=!1,messageselected=!1,STRIDE_MOV=e.STRIDE_MOV,STRIDE_OBJ=e.STRIDE_OBJ,sfxCreateMask=new BitVec(STRIDE_OBJ),sfxDestroyMask=new BitVec(STRIDE_OBJ),void 0===t&&(t=["restart"]),(0===state.levels.length||0===e.levels.length)&&t.length>0&&"rebuild"===t[0]&&(t=["restart"]),void 0===a&&(a=null),RandomGen=new RNG(a),state=e,"rebuild"!==t[0]&&(backups=[]),sprites=[];for(var l in state.objects)if(state.objects.hasOwnProperty(l)){var n=state.objects[l],r={colors:n.colors,dat:n.spritematrix};sprites[n.id]=r}switch(void 0!==state.metadata.realtime_interval?(autotick=0,autotickinterval=1e3*state.metadata.realtime_interval):(autotick=0,autotickinterval=0),void 0!==state.metadata.key_repeat_interval?repeatinterval=1e3*state.metadata.key_repeat_interval:repeatinterval=150,void 0!==state.metadata.again_interval?againinterval=1e3*state.metadata.again_interval:againinterval=150,throttle_movement&&0===autotickinterval&&logWarning("throttle_movement is designed for use in conjunction with realtime_interval. Using it in other situations makes games gross and unresponsive, broadly speaking.  Please don't."),norepeat_action=void 0!==state.metadata.norepeat_action,t[0]){case"restart":if(1==restarting){logWarning('A "restart" command is being triggered in the "run_rules_on_level_start" section of level creation, which would cause an infinite loop if it was actually triggered, but it\'s being ignored, so it\'s not.');break}winning=!1,timer=0,titleScreen=!0,tryPlayTitleSound(),textMode=!0,titleSelection=curlevel>0||null!==curlevelTarget?1:0,titleSelected=!1,quittingMessageScreen=!1,quittingTitleScreen=!1,messageselected=!1,titleMode=0,(curlevel>0||null!==curlevelTarget)&&(titleMode=1),generateTitleScreen();break;case"rebuild":break;case"loadFirstNonMessageLevel":for(var o=0;o<state.levels.length;o++)if(!state.levels[o].hasOwnProperty("message")){var i=o;curlevel=o,winning=!1,timer=0,titleScreen=!1,textMode=!1,titleSelection=curlevel>0||null!==curlevelTarget?1:0,titleSelected=!1,quittingMessageScreen=!1,quittingTitleScreen=!1,messageselected=!1,titleMode=0,loadLevelFromState(state,i,a);break}break;case"loadLevel":var i=t[1];curlevel=o,winning=!1,timer=0,titleScreen=!1,textMode=!1,titleSelection=curlevel>0||null!==curlevelTarget?1:0,titleSelected=!1,quittingMessageScreen=!1,quittingTitleScreen=!1,messageselected=!1,titleMode=0,loadLevelFromState(state,i,a);break;case"levelline":for(var s=t[1],o=state.levels.length-1;o>=0;o--){if(state.levels[o].lineNumber<=s+1){curlevel=o,winning=!1,timer=0,titleScreen=!1,textMode=!1,titleSelection=curlevel>0||null!==curlevelTarget?1:0,titleSelected=!1,quittingMessageScreen=!1,quittingTitleScreen=!1,messageselected=!1,titleMode=0,loadLevelFromState(state,o);break}}}"rebuild"!==t[0]&&clearInputHistory(),canvasResize(),0==state.sounds.length&&null==state.metadata.youtube?killAudioButton():showAudioButton()}function RebuildLevelArrays(){level.movements=new Int32Array(level.n_tiles*STRIDE_MOV),level.rigidMovementAppliedMask=[],level.rigidGroupIndexMask=[],level.rowCellContents=[],level.colCellContents=[],level.mapCellContents=new BitVec(STRIDE_OBJ),_movementVecs=[new BitVec(STRIDE_MOV),new BitVec(STRIDE_MOV),new BitVec(STRIDE_MOV)],_o1=new BitVec(STRIDE_OBJ),_o2=new BitVec(STRIDE_OBJ),_o2_5=new BitVec(STRIDE_OBJ),_o3=new BitVec(STRIDE_OBJ),_o4=new BitVec(STRIDE_OBJ),_o5=new BitVec(STRIDE_OBJ),_o6=new BitVec(STRIDE_OBJ),_o7=new BitVec(STRIDE_OBJ),_o8=new BitVec(STRIDE_OBJ),_o9=new BitVec(STRIDE_OBJ),_o10=new BitVec(STRIDE_OBJ),_o11=new BitVec(STRIDE_OBJ),_o12=new BitVec(STRIDE_OBJ),_m1=new BitVec(STRIDE_MOV),_m2=new BitVec(STRIDE_MOV),_m3=new BitVec(STRIDE_MOV);for(var e=0;e<level.height;e++)level.rowCellContents[e]=new BitVec(STRIDE_OBJ);for(var e=0;e<level.width;e++)level.colCellContents[e]=new BitVec(STRIDE_OBJ);for(var e=0;e<level.n_tiles;e++)level.rigidMovementAppliedMask[e]=new BitVec(STRIDE_MOV),level.rigidGroupIndexMask[e]=new BitVec(STRIDE_MOV)}function restoreLevel(e){if(oldflickscreendat=e.oldflickscreendat.concat([]),level.objects=new Int32Array(e.dat),level.width!==e.width||level.height!==e.height)level.width=e.width,level.height=e.height,level.n_tiles=e.width*e.height,RebuildLevelArrays();else{for(var t=0;t<level.n_tiles;t++)level.movements[t]=0,level.rigidMovementAppliedMask[t]=0,level.rigidGroupIndexMask[t]=0;for(var t=0;t<level.height;t++){level.rowCellContents[t].setZero()}for(var t=0;t<level.width;t++){level.colCellContents[t].setZero()}}againing=!1,level.commandQueue=[],level.commandQueueSourceRules=[]}function DoRestart(e){!0!==restarting&&(!0!==e&&"norestart"in state.metadata||(restarting=!0,!0!==e&&backups.push(backupLevel()),verbose_logging&&consolePrint("--- restarting ---",!0),restoreLevel(restartTarget),tryPlayRestartSound(),"run_rules_on_level_start"in state.metadata&&processInput(-1,!0),level.commandQueue=[],level.commandQueueSourceRules=[],restarting=!1))}function backupDiffers(){if(0==backups.length)return!0;for(var e=backups[backups.length-1],t=0;t<level.objects.length;t++)if(level.objects[t]!==e.dat[t])return!0;return!1}function DoUndo(e,t){if(levelEditorOpened||!("noundo"in state.metadata)||!0===e){if(verbose_logging&&consolePrint("--- undoing ---",!0),t)for(;0==backupDiffers();)backups.pop();if(backups.length>0){restoreLevel(backups[backups.length-1]),backups=backups.splice(0,backups.length-1),e||tryPlayUndoSound()}}}function getPlayerPositions(){var e=[],t=state.playerMask;for(i=0;i<level.n_tiles;i++)level.getCellInto(i,_o11),t.anyBitsInCommon(_o11)&&e.push(i);return e}function getLayersOfMask(e){for(var t=[],a=0;a<state.objectCount;a++)if(e.get(a)){var l=state.idDict[a],n=state.objects[l];t.push(n.layer)}return t}function moveEntitiesAtIndex(e,t,a){var l=level.getCell(e);l.iand(t);for(var n=getLayersOfMask(l),r=level.getMovements(e),o=0;o<n.length;o++)r.ishiftor(a,5*n[o]);level.setMovements(e,r)}function startMovement(e){for(var t=getPlayerPositions(),a=0;a<t.length;a++){moveEntitiesAtIndex(t[a],state.playerMask,e)}return t}function repositionEntitiesOnLayer(e,t,a){var l=dirMasksDelta[a],n=l[0],r=l[1],o=e/level.height|0,i=e%level.height,s=level.width-1,c=level.height-1;if(0===o&&n<0||o===s&&n>0||0===i&&r<0||i===c&&r>0)return!1;var v=e+l[1]+l[0]*level.height,u=state.layerMasks[t],d=level.getCellInto(v,_o7),m=level.getCellInto(e,_o8);if(u.anyBitsInCommon(d)&&16!=a)return!1;for(var g=0;g<state.sfx_MovementMasks.length;g++){var h=state.sfx_MovementMasks[g];if(h.objectMask.anyBitsInCommon(m)){var f=level.getMovements(e),p=h.directionMask;f.anyBitsInCommon(p)&&-1===seedsToPlay_CanMove.indexOf(h.seed)&&seedsToPlay_CanMove.push(h.seed)}}var y=m.clone();m.iclear(u),y.iand(u),d.ior(y),level.setCell(e,m),level.setCell(v,d);var _=v/level.height|0,S=v%level.height;return level.colCellContents[_].ior(y),level.rowCellContents[S].ior(y),level.mapCellContents.ior(y),!0}function repositionEntitiesAtCell(e){var t=level.getMovements(e);if(t.iszero())return!1;for(var a=!1,l=0;l<level.layerCount;l++){var n=t.getshiftor(31,5*l);if(0!==n){repositionEntitiesOnLayer(e,l,n)&&(t.ishiftclear(n,5*l),a=!0)}}return level.setMovements(e,t),a}function Level(e,t,a,l,n){this.lineNumber=e,this.width=t,this.height=a,this.n_tiles=t*a,this.objects=n,this.layerCount=l,this.commandQueue=[],this.commandQueueSourceRules=[]}function BitVec(e){return this.data=new Int32Array(e),this}function Rule(e){this.direction=e[0],this.patterns=e[1],this.hasReplacements=e[2],this.lineNumber=e[3],this.isEllipsis=e[4],this.groupNumber=e[5],this.isRigid=e[6],this.commands=e[7],this.isRandom=e[8],this.cellRowMasks=e[9],this.cellRowMatches=[];for(var t=0;t<this.patterns.length;t++)this.cellRowMatches.push(this.generateCellRowMatchesFunction(this.patterns[t],this.isEllipsis[t]))}function CellPattern(e){this.objectsPresent=e[0],this.objectsMissing=e[1],this.anyObjectsPresent=e[2],this.movementsPresent=e[3],this.movementsMissing=e[4],this.matches=this.generateMatchFunction(),this.replacement=e[5]}function CellReplacement(e){this.objectsClear=e[0],this.objectsSet=e[1],this.movementsClear=e[2],this.movementsSet=e[3],this.movementsLayerMask=e[4],this.randomEntityMask=e[5],this.randomDirMask=e[6]}function DoesCellRowMatchWildCard(e,t,a,l,n){void 0===n&&(n=0);var r=t[0];if(r.matches(a))for(var o=dirMasksDelta[e],i=o[0]*level.height,s=o[1],c=a,v=1;v<t.length;v+=1){c=c+s+i;var r=t[v];if(r===ellipsisPattern){for(var u=n;u<l;u++){var d=c;d=(d+(s+i)*u+level.n_tiles)%level.n_tiles;for(var m=v+1;m<t.length&&(r=t[m],r.matches(d));m++)d=d+s+i;if(m>=t.length)return!0}break}if(!r.matches(c))break}return!1}function DoesCellRowMatch(e,t,a,l){var n=t[0];if(n.matches(a)){for(var r=dirMasksDelta[e],o=r[0]*level.height,i=r[1],s=t.length,c=a,v=1;v<s&&(c=c+i+o,n=t[v],n===ellipsisPattern&&(c+=(i+o)*l),n.matches(c));v++);if(v>=t.length)return!0}return!1}function matchCellRow(e,t,a,l){var n=[];if(!l.bitsSetInArray(level.mapCellContents.data))return n;var r=0,o=level.width,i=0,s=level.height,c=a.length;switch(e){case 1:i+=c-1;break;case 2:s-=c-1;break;case 4:r+=c-1;break;case 8:o-=c-1;break;default:window.console.log("EEEP "+e)}if(e>2){for(var v=i;v<s;v++)if(l.bitsSetInArray(level.rowCellContents[v].data))for(var u=r;u<o;u++){var d=u*level.height+v;t(a,d)&&n.push(d)}}else for(var u=r;u<o;u++)if(l.bitsSetInArray(level.colCellContents[u].data))for(var v=i;v<s;v++){var d=u*level.height+v;t(a,d)&&n.push(d)}return n}function matchCellRowWildCard(e,t,a,l){var n=[];if(!l.bitsSetInArray(level.mapCellContents.data))return n;var r=0,o=level.width,i=0,s=level.height,c=a.length-1;switch(e){case 1:i+=c-1;break;case 2:s-=c-1;break;case 4:r+=c-1;break;case 8:o-=c-1;break;default:window.console.log("EEEP2 "+e)}if(e>2){for(var v=i;v<s;v++)if(l.bitsSetInArray(level.rowCellContents[v].data))for(var u=r;u<o;u++){var d,m=u*level.height+v;4===e?d=u-c+2:8===e?d=level.width-(u+c)+1:window.console.log("EEEP2 "+e),n.push.apply(n,t(a,m,d,0))}}else for(var u=r;u<o;u++)if(l.bitsSetInArray(level.colCellContents[u].data))for(var v=i;v<s;v++){var d,m=u*level.height+v;2===e?d=level.height-(v+c)+1:1===e?d=v-c+2:window.console.log("EEEP2 "+e),n.push.apply(n,t(a,m,d,0))}return n}function generateTuples(e){for(var t=[[]],a=0;a<e.length;a++){for(var l=e[a],n=[],r=0;r<l.length;r++)for(var o=l[r],i=0;i<t.length;i++){var s=t[i],c=s.concat([o]);n.push(c)}t=n}return t}function commitPreservationState(e){var t={ruleGroupIndex:e,objects:new Int32Array(level.objects),movements:new Int32Array(level.movements),rigidGroupIndexMask:level.rigidGroupIndexMask.concat([]),rigidMovementAppliedMask:level.rigidMovementAppliedMask.concat([]),bannedGroup:level.bannedGroup.concat([]),commandQueue:level.commandQueue.concat([]),commandQueueSourceRules:level.commandQueueSourceRules.concat([])};return rigidBackups[e]=t,t}function restorePreservationState(e){level.objects=new Int32Array(e.objects),level.movements=new Int32Array(e.movements),level.rigidGroupIndexMask=e.rigidGroupIndexMask.concat([]),level.rigidMovementAppliedMask=e.rigidMovementAppliedMask.concat([]),level.commandQueue=e.commandQueue.concat([]),level.commandQueueSourceRules=e.commandQueueSourceRules.concat([]),sfxCreateMask.setZero(),sfxDestroyMask.setZero(),consolePrint("Rigid movement application failed, rolling back")}function showTempMessage(){keybuffer=[],textMode=!0,titleScreen=!1,quittingMessageScreen=!1,messageselected=!1,tryPlayShowMessageSound(),drawMessageScreen(),canvasResize()}function processOutputCommands(e){for(var t=0;t<e.length;t++){var a=e[t];"f"===a.charAt(1)&&tryPlaySimpleSound(a),!1===unitTesting&&"message"===a&&showTempMessage()}}function applyRandomRuleGroup(e){for(var t=[],a=0;a<e.length;a++){var l=e[a],n=l.findMatches();if(n.length>0)for(var r=generateTuples(n),o=0;o<r.length;o++){var i=r[o];t.push([a,i])}}if(0===t.length)return!1;var s=t[Math.floor(RandomGen.uniform()*t.length)],a=s[0],l=e[a],c=dirMasksDelta[l.direction],i=s[1],v=l.applyAt(c,i,!1);return l.queueCommands(),v}function applyRuleGroup(e){if(e[0].isRandom)return applyRandomRuleGroup(e);for(var t=!1,a=!0,l=0;a;){if(++l>200){logErrorCacheable("Got caught looping lots in a rule group :O",e[0].lineNumber,!0);break}a=!1;for(var n=0;n<e.length;n++){a=e[n].tryApply()||a}a&&(t=!0)}return t}function applyRules(e,t,a,l){for(var n=a>0,r=0,o=a;o<e.length;){if(l&&l[o]);else{var i=e[o];n=applyRuleGroup(i)||n}if(n&&void 0!==t[o]){if(o=t[o],n=!1,++r>200){var i=e[o];logErrorCacheable("got caught in an endless startloop...endloop vortex, escaping!",i[0].lineNumber,!0);break}}else if(++o===e.length&&n&&void 0!==t[o]&&(o=t[o],n=!1,++r>200)){var i=e[o];logErrorCacheable("got caught in an endless startloop...endloop vortex, escaping!",i[0].lineNumber,!0);break}}}function resolveMovements(e){for(var t=!0;t;){t=!1;for(var a=0;a<level.n_tiles;a++)t=repositionEntitiesAtCell(a)||t}for(var l=!1,a=0;a<level.n_tiles;a++){var n=level.getCellInto(a,_o6),r=level.getMovements(a);if(!r.iszero()){var o=level.rigidMovementAppliedMask[a];if(0!==o&&(r.iand(o),!r.iszero()))for(var i=0;i<level.layerCount;i++){var s=r.getshiftor(31,5*i);if(0!==s){var c=level.rigidGroupIndexMask[a],v=c.getshiftor(31,5*i);v--;var u=state.rigidGroupIndex_to_GroupIndex[v];level.bannedGroup[u]=!0,l=!0;break}}for(var i=0;i<state.sfx_MovementFailureMasks.length;i++){var d=state.sfx_MovementFailureMasks[i];if(d.objectMask.anyBitsInCommon(n)){var m=d.directionMask;r.anyBitsInCommon(m)&&-1===seedsToPlay_CantMove.indexOf(d.seed)&&seedsToPlay_CantMove.push(d.seed)}}}for(var i=0;i<STRIDE_MOV;i++)level.movements[i+a*STRIDE_MOV]=0;level.rigidGroupIndexMask[a]=0,level.rigidMovementAppliedMask[a]=0}return l}function calculateRowColMasks(){for(var e=0;e<level.mapCellContents.length;e++)level.mapCellContents[e]=0;for(var e=0;e<level.width;e++){level.colCellContents[e].setZero()}for(var e=0;e<level.height;e++){level.rowCellContents[e].setZero()}for(var e=0;e<level.width;e++)for(var t=0;t<level.height;t++){var a=t+e*level.height,l=level.getCellInto(a,_o9);level.mapCellContents.ior(l),level.rowCellContents[t].ior(l),level.colCellContents[e].ior(l)}}function processInput(e,t,a){againing=!1,verbose_logging&&(-1===e?consolePrint("Turn starts with no input."):(consolePrint("======================="),consolePrint("Turn starts with input of "+["up","left","down","right","action"][e]+".")));var l=backupLevel(),n=[];if(e<=4){if(e>=0){switch(e){case 0:e=parseInt("00001",2);break;case 1:e=parseInt("00100",2);break;case 2:e=parseInt("00010",2);break;case 3:e=parseInt("01000",2);break;case 4:e=parseInt("10000",2)}n=startMovement(e)}var r=0;level.bannedGroup=[],rigidBackups=[],level.commandQueue=[],level.commandQueueSourceRules=[];var o=0,i=!1,s=commitPreservationState();sfxCreateMask.setZero(),sfxDestroyMask.setZero(),seedsToPlay_CanMove=[],seedsToPlay_CantMove=[],calculateRowColMasks();do{i=!1,r++,verbose_logging&&consolePrint("applying rules"),applyRules(state.rules,state.loopPoint,o,level.bannedGroup);resolveMovements()?(i=!0,restorePreservationState(s),o=0):(verbose_logging&&consolePrint("applying late rules"),applyRules(state.lateRules,state.lateLoopPoint,0),o=0)}while(r<50&&i);if(r>=50&&consolePrint("looped through 50 times, gave up.  too many loops!"),n.length>0&&void 0!==state.metadata.require_player_movement){for(var c=!1,r=0;r<n.length;r++){var v=n[r],u=level.getCell(v);if(state.playerMask.bitsClearInArray(u.data)){c=!0;break}}if(!1===c)return verbose_logging&&(consolePrint("require_player_movement set, but no player movement detected, so cancelling turn."),consoleCacheDump()),backups.push(l),DoUndo(!0,!1),!1}if(level.commandQueue.indexOf("cancel")>=0){if(verbose_logging){consoleCacheDump();var d=level.commandQueueSourceRules[level.commandQueue.indexOf("cancel")];consolePrintFromRule("CANCEL command executed, cancelling turn.",d,!0)}return processOutputCommands(level.commandQueue),backups.push(l),messagetext="",DoUndo(!0,!1),tryPlayCancelSound(),!1}if(level.commandQueue.indexOf("restart")>=0){if(verbose_logging){var d=level.commandQueueSourceRules[level.commandQueue.indexOf("restart")];consolePrintFromRule("RESTART command executed, reverting to restart state.",d),consoleCacheDump()}return processOutputCommands(level.commandQueue),backups.push(l),messagetext="",DoRestart(!0),!0}for(var m=!1,r=0;r<level.objects.length;r++)if(level.objects[r]!==l.dat[r]){if(a)return verbose_logging&&consoleCacheDump(),backups.push(l),DoUndo(!0,!1),!0;-1!==e&&backups.push(l),m=!0;break}if(a&&level.commandQueue.indexOf("win")>=0)return!0;if(a)return verbose_logging&&consoleCacheDump(),!1;for(var r=0;r<seedsToPlay_CantMove.length;r++)playSound(seedsToPlay_CantMove[r]);for(var r=0;r<seedsToPlay_CanMove.length;r++)playSound(seedsToPlay_CanMove[r]);for(var r=0;r<state.sfx_CreationMasks.length;r++){var g=state.sfx_CreationMasks[r];sfxCreateMask.anyBitsInCommon(g.objectMask)&&playSound(g.seed)}for(var r=0;r<state.sfx_DestructionMasks.length;r++){var g=state.sfx_DestructionMasks[r];sfxDestroyMask.anyBitsInCommon(g.objectMask)&&playSound(g.seed)}if(processOutputCommands(level.commandQueue),!1===textMode&&(verbose_logging&&consolePrint("Checking win condition."),void 0===t&&(t=!1),checkWin(t)),!winning){if(level.commandQueue.indexOf("checkpoint")>=0){if(verbose_logging){var d=level.commandQueueSourceRules[level.commandQueue.indexOf("checkpoint")];consolePrintFromRule("CHECKPOINT command executed, saving current state to the restart state.",d)}restartTarget=level4Serialization(),hasUsedCheckpoint=!0;var h=JSON.stringify(restartTarget);window.localStorage&&(localStorage[document.URL+"_checkpoint"]=h,localStorage[document.URL]=curlevel)}if(level.commandQueue.indexOf("again")>=0&&m){var d=level.commandQueueSourceRules[level.commandQueue.indexOf("again")],f=verbose_logging,p=messagetext;verbose_logging=!1,processInput(-1,!0,!0)?(verbose_logging=f,verbose_logging&&consolePrintFromRule("AGAIN command executed, with changes detected - will execute another turn.",d),againing=!0,timer=0):(verbose_logging=f,verbose_logging&&consolePrintFromRule("AGAIN command not executed, it wouldn't make any changes.",d)),verbose_logging=f,messagetext=p}}level.commandQueue=[],level.commandQueueSourceRules=[]}return verbose_logging&&consoleCacheDump(),winning&&(againing=!1),m}function checkWin(e){if(levelEditorOpened&&(e=!0),level.commandQueue.indexOf("win")>=0)return runrulesonlevelstart_phase?consolePrint("Win Condition Satisfied (However this is in the run_rules_on_level_start rule pass, so I'm going to ignore it for you.  Why would you want to complete a level before it's already started?!)"):consolePrint("Win Condition Satisfied"),void(e||DoWin());var t=!1;if(state.winconditions.length>0){for(var a=!0,l=0;l<state.winconditions.length;l++){var n=state.winconditions[l],r=n[1],o=n[2],i=!0;switch(n[0]){case-1:for(var s=0;s<level.n_tiles;s++){var c=level.getCellInto(s,_o10);if(!r.bitsClearInArray(c.data)&&!o.bitsClearInArray(c.data)){i=!1;break}}break;case 0:for(var v=!1,s=0;s<level.n_tiles;s++){var c=level.getCellInto(s,_o10);if(!r.bitsClearInArray(c.data)&&!o.bitsClearInArray(c.data)){v=!0;break}}!1===v&&(i=!1);break;case 1:for(var s=0;s<level.n_tiles;s++){var c=level.getCellInto(s,_o10);if(!r.bitsClearInArray(c.data)&&o.bitsClearInArray(c.data)){i=!1;break}}}!1===i&&(a=!1)}t=a}t&&(runrulesonlevelstart_phase?consolePrint("Win Condition Satisfied (However this is in the run_rules_on_level_start rule pass, so I'm going to ignore it for you.  Why would you want to complete a level before it's already started?!)"):consolePrint("Win Condition Satisfied"),e||DoWin())}function DoWin(){if(!winning){if(againing=!1,tryPlayEndLevelSound(),unitTesting)return void nextLevel();winning=!0,timer=0}}function nextLevel(){if(againing=!1,messagetext="",state&&state.levels&&curlevel>state.levels.length&&(curlevel=state.levels.length-1),titleScreen)0===titleSelection&&(curlevel=0,curlevelTarget=null),null!==curlevelTarget?loadLevelFromStateTarget(state,curlevel,curlevelTarget):loadLevelFromState(state,curlevel);else if(hasUsedCheckpoint&&(curlevelTarget=null,hasUsedCheckpoint=!1),curlevel<state.levels.length-1)curlevel++,textMode=!1,titleScreen=!1,quittingMessageScreen=!1,messageselected=!1,null!==curlevelTarget?loadLevelFromStateTarget(state,curlevel,curlevelTarget):loadLevelFromState(state,curlevel);else{try{window.localStorage&&(localStorage.removeItem(document.URL),localStorage.removeItem(document.URL+"_checkpoint"))}catch(e){}curlevel=0,curlevelTarget=null,goToTitleScreen(),tryPlayEndGameSound()}try{if(window.localStorage)if(localStorage[document.URL]=curlevel,null!==curlevelTarget){restartTarget=level4Serialization();var e=JSON.stringify(restartTarget);localStorage[document.URL+"_checkpoint"]=e}else localStorage.removeItem(document.URL+"_checkpoint")}catch(e){}void 0!==state&&void 0!==state.metadata.flickscreen&&(oldflickscreendat=[0,0,Math.min(state.metadata.flickscreen[0],level.width),Math.min(state.metadata.flickscreen[1],level.height)]),canvasResize(),clearInputHistory()}function goToTitleScreen(){againing=!1,messagetext="",titleScreen=!0,textMode=!0,doSetupTitleScreenLevelContinue(),titleSelection=curlevel>0||null!==curlevelTarget?1:0,generateTitleScreen()}var RandomGen=new RNG,intro_template=["..................................","..................................","..................................","......Puzzle Script Terminal......","..............v 1.7...............","..................................","..................................","..................................",".........insert cartridge.........","..................................","..................................","..................................",".................................."],messagecontainer_template=["..................................","..................................","..................................","..................................","..................................","..................................","..................................","..................................","..................................","..................................","..........X to continue...........","..................................",".................................."],titletemplate_firstgo=["..................................","..................................","..................................","..................................","..................................","..................................","..........#.start game.#..........","..................................","..................................",".arrow keys to move...............",".X to action......................",".Z to undo, R to restart..........",".................................."],titletemplate_select0=["..................................","..................................","..................................","..................................","..................................","...........#.new game.#...........","..................................",".............continue.............","..................................",".arrow keys to move...............",".X to action......................",".Z to undo, R to restart..........",".................................."],titletemplate_select1=["..................................","..................................","..................................","..................................","..................................",".............new game.............","..................................","...........#.continue.#...........","..................................",".arrow keys to move...............",".X to action......................",".Z to undo, R to restart..........",".................................."],titletemplate_firstgo_selected=["..................................","..................................","..................................","..................................","..................................","..................................","###########.start game.###########","..................................","..................................",".arrow keys to move...............",".X to action......................",".Z to undo, R to restart..........",".................................."],titletemplate_select0_selected=["..................................","..................................","..................................","..................................","..................................","############.new game.############","..................................",".............continue.............","..................................",".arrow keys to move...............",".X to action......................",".Z to undo, R to restart..........",".................................."],titletemplate_select1_selected=["..................................","..................................","..................................","..................................","..................................",".............new game.............","..................................","############.continue.############","..................................",".arrow keys to move...............",".X to action......................",".Z to undo, R to restart..........","................................."],titleImage=[],titleWidth=titletemplate_select1[0].length,titleHeight=titletemplate_select1.length,textMode=!0,titleScreen=!0,titleMode=0,titleSelection=0,titleSelected=!1,introstate={title:"EMPTY GAME",attribution:"increpare",objectCount:2,metadata:[],levels:[],bgcolor:"#000000",fgcolor:"#FFFFFF"},state=introstate,splitMessage=[],loadedLevelSeed=0,sprites=[{color:"#423563",dat:[[1,1,1,1,1],[1,0,0,0,1],[1,0,0,0,1],[1,0,0,0,1],[1,1,1,1,1]]},{
color:"#252342",dat:[[0,0,1,0,0],[1,1,1,1,1],[0,0,1,0,0],[0,1,1,1,0],[0,1,0,1,0]]}];generateTitleScreen(),titleMode>0&&(titleSelection=1),canvasResize();var backups=[],restartTarget,messagetext="",zoomscreen=!1,flickscreen=!1,screenwidth=0,screenheight=0,dirMasksDelta={1:[0,-1],2:[0,1],4:[-1,0],8:[1,0],15:[0,0],16:[0,0],3:[0,0]},dirMaskName={1:"up",2:"down",4:"left",8:"right",15:"?",16:"action",3:"no"},seedsToPlay_CanMove=[],seedsToPlay_CantMove=[];Level.prototype.clone=function(){var e=new Level(this.lineNumber,this.width,this.height,this.layerCount,null);return e.objects=new Int32Array(this.objects),e},Level.prototype.getCell=function(e){return new BitVec(this.objects.subarray(e*STRIDE_OBJ,e*STRIDE_OBJ+STRIDE_OBJ))},Level.prototype.getCellInto=function(e,t){for(var a=0;a<STRIDE_OBJ;a++)t.data[a]=this.objects[e*STRIDE_OBJ+a];return t},Level.prototype.setCell=function(e,t){for(var a=0;a<t.data.length;++a)this.objects[e*STRIDE_OBJ+a]=t.data[a]};var _movementVecs,_movementVecIndex=0;Level.prototype.getMovements=function(e){var t=_movementVecs[_movementVecIndex];_movementVecIndex=(_movementVecIndex+1)%_movementVecs.length;for(var a=0;a<STRIDE_MOV;a++)t.data[a]=this.movements[e*STRIDE_MOV+a];return t},Level.prototype.setMovements=function(e,t){for(var a=0;a<t.data.length;++a)this.movements[e*STRIDE_MOV+a]=t.data[a]};var ellipsisPattern=["ellipsis"];BitVec.prototype.cloneInto=function(e){for(var t=0;t<this.data.length;++t)e.data[t]=this.data[t];return e},BitVec.prototype.clone=function(){return new BitVec(this.data)},BitVec.prototype.iand=function(e){for(var t=0;t<this.data.length;++t)this.data[t]&=e.data[t]},BitVec.prototype.inot=function(){for(var e=0;e<this.data.length;++e)this.data[e]=~this.data[e]},BitVec.prototype.ior=function(e){for(var t=0;t<this.data.length;++t)this.data[t]|=e.data[t]},BitVec.prototype.iclear=function(e){for(var t=0;t<this.data.length;++t)this.data[t]&=~e.data[t]},BitVec.prototype.ibitset=function(e){this.data[e>>5]|=1<<(31&e)},BitVec.prototype.ibitclear=function(e){this.data[e>>5]&=~(1<<(31&e))},BitVec.prototype.get=function(e){return 0!=(this.data[e>>5]&1<<(31&e))},BitVec.prototype.getshiftor=function(e,t){var a=31&t,l=this.data[t>>5]>>>a;return a&&(l|=this.data[1+(t>>5)]<<32-a),l&e},BitVec.prototype.ishiftor=function(e,t){var a=31&t,l=e<<a;if(this.data[t>>5]|=l,a){var n=e>>32-a;this.data[1+(t>>5)]|=n}},BitVec.prototype.ishiftclear=function(e,t){var a=31&t,l=e<<a;if(this.data[t>>5]&=~l,a){var n=e>>32-(31&t);this.data[1+(t>>5)]&=~n}},BitVec.prototype.equals=function(e){if(this.data.length!==e.data.length)return!1;for(var t=0;t<this.data.length;++t)if(this.data[t]!==e.data[t])return!1;return!0},BitVec.prototype.setZero=function(){for(var e=0;e<this.data.length;++e)this.data[e]=0},BitVec.prototype.iszero=function(){for(var e=0;e<this.data.length;++e)if(this.data[e])return!1;return!0},BitVec.prototype.bitsSetInArray=function(e){for(var t=0;t<this.data.length;++t)if((this.data[t]&e[t])!==this.data[t])return!1;return!0},BitVec.prototype.bitsClearInArray=function(e){for(var t=0;t<this.data.length;++t)if(this.data[t]&e[t])return!1;return!0},BitVec.prototype.anyBitsInCommon=function(e){return!this.bitsClearInArray(e.data)},Rule.prototype.generateCellRowMatchesFunction=function(e,t){if(0==t){for(var a=dirMasksDelta[this.direction],l=a[0],n=a[1],r=e.length,o="var d = "+n+"+"+l+"*level.height;\n",i=1===STRIDE_OBJ?"":"*"+STRIDE_OBJ,s=0;s<STRIDE_OBJ;++s)o+="var cellObjects"+s+" = level.objects[i"+i+(s?"+"+s:"")+"];\n";i=1===STRIDE_MOV?"":"*"+STRIDE_MOV;for(var s=0;s<STRIDE_MOV;++s)o+="var cellMovements"+s+" = level.movements[i"+i+(s?"+"+s:"")+"];\n";o+="return "+e[0].generateMatchString("0_");for(var c=1;c<r;c++)o+="&&cellRow["+c+"].matches((i+"+c+"*d))";return o+=";",o in matchCache?matchCache[o]:matchCache[o]=new Function("cellRow","i",o)}var a=dirMasksDelta[this.direction],l=a[0],n=a[1],r=e.length,o="var d = "+n+"+"+l+"*level.height;\n";o+="var result = [];\n",o+="if(cellRow[0].matches(i)";for(var c=1;e[c]!==ellipsisPattern;c++)o+="&&cellRow["+c+"].matches((i+"+c+"*d))";for(c++,o+=") {\n",o+="\tfor (var k=kmin;k<kmax;k++) {\n",o+="\t\tif(cellRow["+c+"].matches((i+d*(k+"+(c-1)+")))",c++;c<r;c++)o+="&&cellRow["+c+"].matches((i+d*(k+"+(c-1)+")))";return o+="){\n",o+="\t\t\tresult.push([i,k]);\n",o+="\t\t}\n",o+="\t}\n",o+="}\n",o+="return result;",o in matchCache?matchCache[o]:matchCache[o]=new Function("cellRow","i","kmax","kmin",o)},Rule.prototype.toJSON=function(){return[this.direction,this.patterns,this.hasReplacements,this.lineNumber,this.isEllipsis,this.groupNumber,this.isRigid,this.commands,this.isRandom,this.cellRowMasks]};var STRIDE_OBJ=1,STRIDE_MOV=1,matchCache={};CellPattern.prototype.generateMatchString=function(){for(var e="(true",t=0;t<Math.max(STRIDE_OBJ,STRIDE_MOV);++t){var a="cellObjects"+t,l="cellMovements"+t,n=this.objectsPresent.data[t],r=this.objectsMissing.data[t],o=this.movementsPresent.data[t],i=this.movementsMissing.data[t];n&&(e+=n&n-1?"\t\t&& (("+a+"&"+n+")==="+n+")\n":"\t\t&& ("+a+"&"+n+")\n"),r&&(e+="\t\t&& !("+a+"&"+r+")\n"),o&&(e+=o&o-1?"\t\t&& (("+l+"&"+o+")==="+o+")\n":"\t\t&& ("+l+"&"+o+")\n"),i&&(e+="\t\t&& !("+l+"&"+i+")\n")}for(var s=0;s<this.anyObjectsPresent.length;s++){e+="\t\t&& (0";for(var t=0;t<STRIDE_OBJ;++t){var c=this.anyObjectsPresent[s].data[t];c&&(e+="|(cellObjects"+t+"&"+c+")")}e+=")"}return e+="\t)"},CellPattern.prototype.generateMatchFunction=function(){for(var e,t="",a=1===STRIDE_OBJ?"":"*"+STRIDE_OBJ,e=0;e<STRIDE_OBJ;++e)t+="\tvar cellObjects"+e+" = level.objects[i"+a+(e?"+"+e:"")+"];\n";a=1===STRIDE_MOV?"":"*"+STRIDE_MOV;for(var e=0;e<STRIDE_MOV;++e)t+="\tvar cellMovements"+e+" = level.movements[i"+a+(e?"+"+e:"")+"];\n";return t+="return "+this.generateMatchString()+";",t in matchCache?matchCache[t]:matchCache[t]=new Function("i",t)},CellPattern.prototype.toJSON=function(){return[this.movementMask,this.cellMask,this.nonExistenceMask,this.moveNonExistenceMask,this.moveStationaryMask,this.randomDirOrEntityMask,this.movementsToRemove]};var _o1,_o2,_o2_5,_o3,_o4,_o5,_o6,_o7,_o8,_o9,_o10,_o11,_o12,_m1,_m2,_m3;CellPattern.prototype.replace=function(e,t){var a=this.replacement;if(null===a)return!1;var l=a.randomEntityMask,n=a.randomDirMask,r=a.objectsSet.cloneInto(_o1),o=a.objectsClear.cloneInto(_o2),i=a.movementsSet.cloneInto(_m1),s=a.movementsClear.cloneInto(_m2);if(s.ior(a.movementsLayerMask),!l.iszero()){for(var c=[],v=0;v<32*STRIDE_OBJ;v++)l.get(v)&&c.push(v);var u=c[Math.floor(RandomGen.uniform()*c.length)],d=state.idDict[u],m=state.objects[d];r.ibitset(u),o.ior(state.layerMasks[m.layer]),s.ishiftor(31,5*m.layer)}if(!n.iszero())for(var g=0;g<level.layerCount;g++)if(n.get(5*g)){var h=Math.floor(4*RandomGen.uniform());i.ibitset(h+5*g)}var f=level.getCellInto(t,_o2_5),p=level.getMovements(t),y=f.cloneInto(_o3),_=p.cloneInto(_m3);f.iclear(o),f.ior(r),p.iclear(s),p.ior(i);var S=!1,M=0,b=0;if(e.isRigid){var k=state.groupNumber_to_RigidGroupIndex[e.groupNumber];k++;for(var w=new BitVec(STRIDE_MOV),I=0;I<level.layerCount;I++)w.ishiftor(k,5*I);w.iand(a.movementsLayerMask),M=level.rigidGroupIndexMask[t]||new BitVec(STRIDE_MOV),b=level.rigidMovementAppliedMask[t]||new BitVec(STRIDE_MOV),w.bitsSetInArray(M.data)||a.movementsLayerMask.bitsSetInArray(b.data)||(M.ior(w),b.ior(a.movementsLayerMask),S=!0)}var C=!1;if(!y.equals(f)||!_.equals(p)||S){C=!0,S&&(level.rigidGroupIndexMask[t]=M,level.rigidMovementAppliedMask[t]=b);var R=f.cloneInto(_o4);R.iclear(y),sfxCreateMask.ior(R);var T=y.cloneInto(_o5);T.iclear(f),sfxDestroyMask.ior(T),level.setCell(t,f),level.setMovements(t,p);var E=t/level.height|0,D=t%level.height;level.colCellContents[E].ior(f),level.rowCellContents[D].ior(f),level.mapCellContents.ior(f)}return C};var rigidBackups=[];Rule.prototype.findMatches=function(){for(var e=[],t=this.cellRowMasks,a=0;a<this.patterns.length;a++){var l=this.patterns[a],n=this.cellRowMatches[a];if(this.isEllipsis[a])var r=matchCellRowWildCard(this.direction,n,l,t[a]);else var r=matchCellRow(this.direction,n,l,t[a]);if(0===r.length)return[];e.push(r)}return e},Rule.prototype.directional=function(){for(var e=0;e<state.rules.length;e++)for(var t=state.rules[e],a=0,l=0;l<t.length;l++)if(this.lineNumber===t[l].lineNumber&&a++,a>1)return!0;return!1},Rule.prototype.applyAt=function(e,t,a){var l=this;if(a){for(var n=!0,r=0;r<l.patterns.length;r++)if(l.isEllipsis[r]){if(!1===DoesCellRowMatchWildCard(l.direction,l.patterns[r],t[r][0],t[r][1]+1,t[r][1])){n=!1;break}}else if(!1===DoesCellRowMatch(l.direction,l.patterns[r],t[r])){n=!1;break}if(!1===n)return!1}for(var o=!1,i=e[0]*level.height,s=e[1],r=0;r<l.patterns.length;r++)for(var c=l.patterns[r],v=l.isEllipsis[r]?t[r][0]:t[r],u=0;u<c.length;u++){var d=c[u];if(d!==ellipsisPattern)o=d.replace(l,v)||o,v=v+s+i;else{var m=t[r][1];v+=(s+i)*m}}if(verbose_logging&&o){var g=dirMaskName[l.direction];l.directional()||(g="");var h='<font color="green">Rule <a onclick="jumpToLine('+l.lineNumber+');"  href="javascript:void(0);">'+l.lineNumber+"</a> "+g+" applied.</font>";consolePrint(h)}return o},Rule.prototype.tryApply=function(){var e=dirMasksDelta[this.direction],t=this.findMatches();if(0===t.length)return!1;var a=!1;if(this.hasReplacements)for(var l=generateTuples(t),n=0;n<l.length;n++){var r=l[n],o=n>0,i=this.applyAt(e,r,o);a=i||a}return t.length>0&&this.queueCommands(),a},Rule.prototype.queueCommands=function(){for(var e=this.commands,t=0;t<e.length;t++){var a=e[t];if(!(level.commandQueue.indexOf(a[0])>=0)){if(level.commandQueue.push(a[0]),level.commandQueueSourceRules.push(this),verbose_logging){var l=this.lineNumber,n=(dirMaskName[this.direction],'<font color="green">Rule <a onclick="jumpToLine('+l.toString()+');"  href="javascript:void(0);">'+l.toString()+"</a> triggers command "+a[0]+".</font>");consolePrint(n,!0)}"message"===a[0]&&(messagetext=a[1])}}};var sfxCreateMask=null,sfxDestroyMask=null;</script> <script>/* 
credits 
 
brunt of the work by increpare (www.increpare.com) 
 
all open source mit license blah blah 
 
testers: 
none, yet 
 
code used 
 
colors used 
color values for named colours from arne, mostly (and a couple from a 32-colour palette attributed to him) 
http://androidarts.com/palette/16pal.htm 
 
the editor is a slight modification of codemirro (codemirror.net), which is crazy awesome. 
 
for post-launch credits, check out activty on github.com/increpare/PuzzleScript 
 
*/ 
 
var compiling = false; 
var errorStrings = [];//also stores warning strings 
var errorCount=0;//only counts errors 
 
function logErrorCacheable(str, lineNumber,urgent) { 
    if (compiling||urgent) { 
        if (lineNumber === undefined) { 
            return logErrorNoLine(str,urgent); 
        } 
        var errorString = '<a onclick="jumpToLine(' + lineNumber.toString() + ');"  href="javascript:void(0);"><span class="errorTextLineNumber"> line ' + lineNumber.toString() + '</span></a> : ' + '<span class="errorText">' + str + '</span>'; 
         if (errorStrings.indexOf(errorString) >= 0 && !urgent) { 
            //do nothing, duplicate error 
         } else { 
            consolePrint(errorString); 
            errorStrings.push(errorString); 
            errorCount++; 
        } 
    } 
} 
 
function logError(str, lineNumber,urgent) { 
    if (compiling||urgent) { 
        if (lineNumber === undefined) { 
            return logErrorNoLine(str,urgent); 
        } 
        var errorString = '<a onclick="jumpToLine(' + lineNumber.toString() + ');"  href="javascript:void(0);"><span class="errorTextLineNumber"> line ' + lineNumber.toString() + '</span></a> : ' + '<span class="errorText">' + str + '</span>'; 
         if (errorStrings.indexOf(errorString) >= 0 && !urgent) { 
            //do nothing, duplicate error 
         } else { 
            consolePrint(errorString,true); 
            errorStrings.push(errorString); 
            errorCount++; 
        } 
    } 
} 
 
function logWarning(str, lineNumber,urgent) { 
    if (compiling||urgent) { 
        if (lineNumber === undefined) { 
            return logWarningNoLine(str,urgent); 
        } 
        var errorString = '<a onclick="jumpToLine(' + lineNumber.toString() + ');"  href="javascript:void(0);"><span class="errorTextLineNumber"> line ' + lineNumber.toString() + '</span></a> : ' + '<span class="warningText">' + str + '</span>'; 
         if (errorStrings.indexOf(errorString) >= 0 && !urgent) { 
            //do nothing, duplicate error 
         } else { 
            consolePrint(errorString,true); 
            errorStrings.push(errorString); 
        } 
    } 
} 
 
function logWarningNoLine(str,urgent) { 
    if (compiling||urgent) { 
        var errorString = '<span class="warningText">' + str + '</span>'; 
         if (errorStrings.indexOf(errorString) >= 0 && !urgent) { 
            //do nothing, duplicate error 
         } else { 
            consolePrint(errorString,true); 
            errorStrings.push(errorString); 
        } 
        errorCount++; 
    } 
} 
 
 
function logErrorNoLine(str,urgent) { 
    if (compiling||urgent) { 
        var errorString = '<span class="errorText">' + str + '</span>'; 
         if (errorStrings.indexOf(errorString) >= 0 && !urgent) { 
            //do nothing, duplicate error 
         } else { 
            consolePrint(errorString,true); 
            errorStrings.push(errorString); 
        } 
        errorCount++; 
    } 
} 
 
 
 
function logBetaMessage(str,urgent){ 
    if (compiling||urgent) { 
        var errorString = '<span class="betaText">' + str + '</span>'; 
         if (errorStrings.indexOf(errorString) >= 0 && !urgent) { 
            //do nothing, duplicate error 
         } else { 
            consoleError(errorString); 
            errorStrings.push(errorString); 
        } 
    }   
} 
 
function blankLineHandle(state) { 
    if (state.section === 'levels') { 
            if (state.levels[state.levels.length - 1].length > 0) 
            { 
                state.levels.push([]); 
            } 
    } else if (state.section === 'objects') { 
        state.objects_section = 0; 
    } 
} 
 
//for IE support 
if (typeof Object.assign != 'function') { 
  (function () { 
    Object.assign = function (target) { 
      'use strict'; 
      // We must check against these specific cases. 
      if (target === undefined || target === null) { 
        throw new TypeError('Cannot convert undefined or null to object'); 
      } 
  
      var output = Object(target); 
      for (var index = 1; index < arguments.length; index++) { 
        var source = arguments[index]; 
        if (source !== undefined && source !== null) { 
          for (var nextKey in source) { 
            if (source.hasOwnProperty(nextKey)) { 
              output[nextKey] = source[nextKey]; 
            } 
          } 
        } 
      } 
      return output; 
    }; 
  })(); 
} 
 
var codeMirrorFn = function() { 
    'use strict'; 
 
 
    function searchStringInArray(str, strArray) { 
        for (var j = 0; j < strArray.length; j++) { 
            if (strArray[j] === str) { return j; } 
        } 
        return -1; 
    } 
 
    function isMatrixLine(str) { 
        for (var j = 0; j < str.length; j++) { 
            if (str.charAt(j) !== '.' && str.charAt(j) !== '0') { 
                return false; 
            } 
        } 
        return true; 
    } 
 
    function checkNameNew(state,candname) { 
        if (state.objects[candname] !== undefined) { 
            logError('Object "' + candname.toUpperCase() + '" defined multiple times.', state.lineNumber); 
            return 'ERROR'; 
        } 
        for (var i=0;i<state.legend_synonyms.length;i++) { 
            var entry = state.legend_synonyms[i]; 
            if (entry[0]==candname) { 
                logError('Name "' + candname.toUpperCase() + '" already in use.', state.lineNumber);                                         
            } 
        } 
        for (var i=0;i<state.legend_aggregates.length;i++) { 
            var entry = state.legend_aggregates[i]; 
            if (entry[0]==candname) { 
                logError('Name "' + candname.toUpperCase() + '" already in use.', state.lineNumber);                                         
            } 
        } 
        for (var i=0;i<state.legend_properties.length;i++) { 
            var entry = state.legend_properties[i]; 
            if (entry[0]==candname) { 
                logError('Name "' + candname.toUpperCase() + '" already in use.', state.lineNumber);                                         
            } 
        } 
    } 
    var absolutedirs = ['up', 'down', 'right', 'left']; 
    var relativedirs = ['^', 'v', '<', '>', 'moving','stationary','parallel','perpendicular', 'no']; 
    var logicWords = ['all', 'no', 'on', 'some']; 
    var sectionNames = ['objects', 'legend', 'sounds', 'collisionlayers', 'rules', 'winconditions', 'levels']; 
 var commandwords = ["sfx0","sfx1","sfx2","sfx3","sfx4","sfx5","sfx6","sfx7","sfx8","sfx9","sfx10","cancel","checkpoint","restart","win","message","again"]; 
    var reg_commands = /[\p{Z}\s]*(sfx0|sfx1|sfx2|sfx3|Sfx4|sfx5|sfx6|sfx7|sfx8|sfx9|sfx10|cancel|checkpoint|restart|win|message|again)[\p{Z}\s]*/u; 
    var reg_name = /[\p{L}\p{N}_]+[\p{Z}\s]*/u;///\w*[a-uw-zA-UW-Z0-9_]/; 
    var reg_number = /[\d]+/; 
    var reg_soundseed = /\d+\b/; 
    var reg_spriterow = /[\.0-9]{5}[\p{Z}\s]*/u; 
    var reg_sectionNames = /(objects|collisionlayers|legend|sounds|rules|winconditions|levels)(?![\p{L}\p{N}_])[\p{Z}\s]*/u; 
    var reg_equalsrow = /[\=]+/; 
    var reg_notcommentstart = /[^\(]+/; 
    var reg_csv_separators = /[ \,]*/; 
    var reg_soundverbs = /(move|action|create|destroy|cantmove|undo|restart|titlescreen|startgame|cancel|endgame|startlevel|endlevel|showmessage|closemessage|sfx0|sfx1|sfx2|sfx3|sfx4|sfx5|sfx6|sfx7|sfx8|sfx9|sfx10)[\p{Z}\s]+/u; 
    var reg_directions = /^(action|up|down|left|right|\^|v|\<|\>|moving|stationary|parallel|perpendicular|horizontal|orthogonal|vertical|no|randomdir|random)$/; 
    var reg_loopmarker = /^(startloop|endloop)$/; 
    var reg_ruledirectionindicators = /^(up|down|left|right|horizontal|vertical|orthogonal|late|rigid)$/; 
    var reg_sounddirectionindicators = /[\p{Z}\s]*(up|down|left|right|horizontal|vertical|orthogonal)[\p{Z}\s]*/u; 
    var reg_winconditionquantifiers = /^(all|any|no|some)$/; 
    var reg_keywords = /(checkpoint|objects|collisionlayers|legend|sounds|rules|winconditions|\.\.\.|levels|up|down|left|right|^|\||\[|\]|v|\>|\<|no|horizontal|orthogonal|vertical|any|all|no|some|moving|stationary|parallel|perpendicular|action)/; 
    var keyword_array = ['checkpoint','objects', 'collisionlayers', 'legend', 'sounds', 'rules', '...','winconditions', 'levels','|','[',']','up', 'down', 'left', 'right', 'late','rigid', '^','v','\>','\<','no','randomdir','random', 'horizontal', 'vertical','any', 'all', 'no', 'some', 'moving','stationary','parallel','perpendicular','action','message']; 
 
    //  var keywordRegex = new RegExp("\\b(("+cons.join(")|(")+"))$", 'i'); 
 
    var fullSpriteMatrix = [ 
        '00000', 
        '00000', 
        '00000', 
        '00000', 
        '00000' 
    ]; 
 
    return { 
        copyState: function(state) { 
            var objectsCopy = {}; 
            for (var i in state.objects) { 
              if (state.objects.hasOwnProperty(i)) { 
                var o = state.objects[i]; 
                objectsCopy[i] = { 
                  colors: o.colors.concat([]), 
                  lineNumber : o.lineNumber, 
                  spritematrix: o.spritematrix.concat([]) 
                } 
              } 
            } 
 
            var collisionLayersCopy = []; 
            for (var i = 0; i < state.collisionLayers.length; i++) { 
              collisionLayersCopy.push(state.collisionLayers[i].concat([])); 
            } 
 
            var legend_synonymsCopy = []; 
            var legend_aggregatesCopy = []; 
            var legend_propertiesCopy = []; 
            var soundsCopy = []; 
            var levelsCopy = []; 
            var winConditionsCopy = []; 
 
            for (var i = 0; i < state.legend_synonyms.length; i++) { 
              legend_synonymsCopy.push(state.legend_synonyms[i].concat([])); 
            } 
            for (var i = 0; i < state.legend_aggregates.length; i++) { 
              legend_aggregatesCopy.push(state.legend_aggregates[i].concat([])); 
            } 
            for (var i = 0; i < state.legend_properties.length; i++) { 
              legend_propertiesCopy.push(state.legend_properties[i].concat([])); 
            } 
            for (var i = 0; i < state.sounds.length; i++) { 
              soundsCopy.push(state.sounds[i].concat([])); 
            } 
            for (var i = 0; i < state.levels.length; i++) { 
              levelsCopy.push(state.levels[i].concat([])); 
            } 
            for (var i = 0; i < state.winconditions.length; i++) { 
              winConditionsCopy.push(state.winconditions[i].concat([])); 
            } 
 
            var original_case_namesCopy = Object.assign({},state.original_case_names); 
             
            var nstate = { 
              lineNumber: state.lineNumber, 
 
              objects: objectsCopy, 
              collisionLayers: collisionLayersCopy, 
 
              commentLevel: state.commentLevel, 
              section: state.section, 
              visitedSections: state.visitedSections.concat([]), 
 
              objects_candname: state.objects_candname, 
              objects_section: state.objects_section, 
              objects_spritematrix: state.objects_spritematrix.concat([]), 
 
              tokenIndex: state.tokenIndex, 
              legend_synonyms: legend_synonymsCopy, 
              legend_aggregates: legend_aggregatesCopy, 
              legend_properties: legend_propertiesCopy, 
 
              sounds: soundsCopy, 
 
              rules: state.rules.concat([]), 
 
              names: state.names.concat([]), 
 
              winconditions: winConditionsCopy, 
 
              original_case_names : original_case_namesCopy, 
 
              abbrevNames: state.abbrevNames.concat([]), 
 
              metadata : state.metadata.concat([]), 
 
              levels: levelsCopy, 
 
              STRIDE_OBJ : state.STRIDE_OBJ, 
              STRIDE_MOV : state.STRIDE_MOV 
            }; 
 
            return nstate;         
        }, 
        blankLine: function(state) { 
            if (state.section === 'levels') { 
                    if (state.levels[state.levels.length - 1].length > 0) 
                    { 
                        state.levels.push([]); 
                    } 
            } 
        }, 
        token: function(stream, state) { 
            var mixedCase = stream.string; 
            var sol = stream.sol(); 
            if (sol) { 
                stream.string = stream.string.toLowerCase(); 
                state.tokenIndex=0; 
                /*   if (state.lineNumber==undefined) { 
                        state.lineNumber=1; 
                } 
                else { 
                    state.lineNumber++; 
                }*/ 
 
            } 
 
            function registerOriginalCaseName(candname){ 
 
                function escapeRegExp(str) { 
                  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&"); 
                } 
 
                var nameFinder =  new RegExp("\\b"+escapeRegExp(candname)+"\\b","i") 
                var match = mixedCase.match(nameFinder); 
                if (match!=null){ 
                    state.original_case_names[candname] = match[0]; 
                } 
            } 
 
            stream.eatWhile(/[ \t]/); 
 
            //////////////////////////////// 
            // COMMENT PROCESSING BEGIN 
            //////////////////////////////// 
 
            //NESTED COMMENTS 
            var ch = stream.peek(); 
            if (ch === '(' && state.tokenIndex !== -4) { // tokenIndex -4 indicates message command 
                stream.next(); 
                state.commentLevel++; 
            } else if (ch === ')') { 
                stream.next(); 
                if (state.commentLevel > 0) { 
                    state.commentLevel--; 
                    if (state.commentLevel === 0) { 
                        return 'comment'; 
                    } 
                } 
            } 
            if (state.commentLevel > 0) { 
                while (true) { 
                    stream.eatWhile(/[^\(\)]+/); 
 
                    if (stream.eol()) { 
                        break; 
                    } 
 
                    ch = stream.peek(); 
 
                    if (ch === '(') { 
                        state.commentLevel++; 
                    } else if (ch === ')') { 
                        state.commentLevel--; 
                    } 
                    stream.next(); 
 
                    if (state.commentLevel === 0) { 
                        break; 
                    } 
                } 
                return 'comment'; 
            } 
 
            stream.eatWhile(/[ \t]/); 
 
            if (sol && stream.eol()) { 
                return blankLineHandle(state); 
            } 
 
            //  if (sol) 
            { 
 
                //MATCH '==="s AT START OF LINE 
                if (sol && stream.match(reg_equalsrow, true)) { 
                    return 'EQUALSBIT'; 
                } 
 
                //MATCH SECTION NAME 
                if (sol && stream.match(reg_sectionNames, true)) { 
                    state.section = stream.string.slice(0, stream.pos).trim(); 
                    if (state.visitedSections.indexOf(state.section) >= 0) { 
                        logError('cannot duplicate sections (you tried to duplicate \"' + state.section.toUpperCase() + '").', state.lineNumber); 
                    } 
                    state.visitedSections.push(state.section); 
                    var sectionIndex = sectionNames.indexOf(state.section); 
                    if (sectionIndex == 0) { 
                        state.objects_section = 0; 
                        if (state.visitedSections.length > 1) { 
                            logError('section "' + state.section.toUpperCase() + '" must be the first section', state.lineNumber); 
                        } 
                    } else if (state.visitedSections.indexOf(sectionNames[sectionIndex - 1]) == -1) { 
                        if (sectionIndex===-1) { 
                            logError('no such section as "' + state.section.toUpperCase() + '".', state.lineNumber); 
                        } else { 
                            logError('section "' + state.section.toUpperCase() + '" is out of order, must follow  "' + sectionNames[sectionIndex - 1].toUpperCase() + '" (or it could be that the section "'+sectionNames[sectionIndex - 1].toUpperCase()+`"is just missing totally.  You have to include all section headings, even if the section itself is empty).`, state.lineNumber);                             
                        } 
                    } 
 
                    if (state.section === 'sounds') { 
                        //populate names from rules 
                        for (var n in state.objects) { 
                            if (state.objects.hasOwnProperty(n)) { 
/*                                if (state.names.indexOf(n)!==-1) { 
                                    logError('Object "'+n+'" has been declared to be multiple different things',state.objects[n].lineNumber); 
                                }*/ 
                                state.names.push(n); 
                            } 
                        } 
                        //populate names from legends 
                        for (var i = 0; i < state.legend_synonyms.length; i++) { 
                            var n = state.legend_synonyms[i][0]; 
                            /* 
                            if (state.names.indexOf(n)!==-1) { 
                                logError('Object "'+n+'" has been declared to be multiple different things',state.legend_synonyms[i].lineNumber); 
                            } 
                            */ 
                            state.names.push(n); 
                        } 
                        for (var i = 0; i < state.legend_aggregates.length; i++) { 
                            var n = state.legend_aggregates[i][0]; 
                            /* 
                            if (state.names.indexOf(n)!==-1) { 
                                logError('Object "'+n+'" has been declared to be multiple different things',state.legend_aggregates[i].lineNumber); 
                            } 
                            */ 
                            state.names.push(n); 
                        } 
                        for (var i = 0; i < state.legend_properties.length; i++) { 
                            var n = state.legend_properties[i][0]; 
                            /* 
                            if (state.names.indexOf(n)!==-1) { 
                                logError('Object "'+n+'" has been declared to be multiple different things',state.legend_properties[i].lineNumber); 
                            }                            
                            */  
                            state.names.push(n); 
                        } 
                    } 
                    else if (state.section === 'levels') { 
                        //populate character abbreviations 
                        for (var n in state.objects) { 
                            if (state.objects.hasOwnProperty(n) && n.length == 1) { 
                                state.abbrevNames.push(n); 
                            } 
                        } 
 
                        for (var i = 0; i < state.legend_synonyms.length; i++) { 
                            if (state.legend_synonyms[i][0].length == 1) { 
                                state.abbrevNames.push(state.legend_synonyms[i][0]); 
                            } 
                        } 
                        for (var i = 0; i < state.legend_aggregates.length; i++) { 
                            if (state.legend_aggregates[i][0].length == 1) { 
                                state.abbrevNames.push(state.legend_aggregates[i][0]); 
                            } 
                        } 
                    } 
                    return 'HEADER'; 
                } else { 
                    if (state.section === undefined) { 
                        logError('must start with section "OBJECTS"', state.lineNumber); 
                    } 
                } 
 
                if (stream.eol()) { 
                    return null; 
                } 
 
                //if color is set, try to set matrix 
                //if can't set matrix, try to parse name 
                //if color is not set, try to parse color 
                switch (state.section) { 
                case 'objects': 
                    { 
      var tryParseName = function() { 
                            //LOOK FOR NAME 
                            var match_name = sol ? stream.match(reg_name, true) : stream.match(/[^\p{Z}\s\()]+[\p{Z}\s]*/u,true); 
                            if (match_name == null) { 
                                stream.match(reg_notcommentstart, true); 
                                if (stream.pos>0){                                 
                                    logWarning('Unknown junk in object section (possibly: sprites have to be 5 pixels wide and 5 pixels high exactly. Or maybe: the main names for objects have to be words containing only the letters a-z0.9 - if you want to call them something like ",", do it in the legend section).',state.lineNumber); 
                                } 
                                return 'ERROR'; 
                            } else { 
                             var candname = match_name[0].trim(); 
                                if (state.objects[candname] !== undefined) { 
                                    logError('Object "' + candname.toUpperCase() + '" defined multiple times.', state.lineNumber); 
                                    return 'ERROR'; 
                                } 
                                for (var i=0;i<state.legend_synonyms.length;i++) { 
                                 var entry = state.legend_synonyms[i]; 
                                 if (entry[0]==candname) { 
                                     logError('Name "' + candname.toUpperCase() + '" already in use.', state.lineNumber);                                   
                                 } 
                                } 
                                if (keyword_array.indexOf(candname)>=0) { 
                                    logWarning('You named an object "' + candname.toUpperCase() + '", but this is a keyword. Don\'t do that!', state.lineNumber); 
                                } 
 
                                if (sol) { 
                                 state.objects_candname = candname; 
                                    registerOriginalCaseName(candname); 
                                 state.objects[state.objects_candname] = { 
                                           lineNumber: state.lineNumber, 
                                           colors: [], 
                                           spritematrix: [] 
                                          }; 
 
        } else { 
         //set up alias 
                                    registerOriginalCaseName(candname); 
         var synonym = [candname,state.objects_candname]; 
         synonym.lineNumber = state.lineNumber; 
         state.legend_synonyms.push(synonym); 
        } 
                                state.objects_section = 1; 
                                return 'NAME'; 
                            } 
                        }; 
 
                        if (sol && state.objects_section == 2) { 
                            state.objects_section = 3; 
                        } 
 
                        if (sol && state.objects_section == 1) { 
                            state.objects_section = 2; 
                        } 
 
                        switch (state.objects_section) { 
                        case 0: 
                        case 1: 
                            { 
                                state.objects_spritematrix = []; 
                                return tryParseName(); 
                                break; 
                            } 
                        case 2: 
                            { 
                                //LOOK FOR COLOR 
                                state.tokenIndex = 0; 
 
                                var match_color = stream.match(reg_color, true); 
                                if (match_color == null) { 
                                    var str = stream.match(reg_name, true) || stream.match(reg_notcommentstart, true); 
                                    logError('Was looking for color for object ' + state.objects_candname.toUpperCase() + ', got "' + str + '" instead.', state.lineNumber); 
                                    return null; 
                                } else { 
                                    if (state.objects[state.objects_candname].colors === undefined) { 
                                        state.objects[state.objects_candname].colors = [match_color[0].trim()]; 
                                    } else { 
                                        state.objects[state.objects_candname].colors.push(match_color[0].trim()); 
                                    } 
 
                                    var candcol = match_color[0].trim().toLowerCase(); 
                                    if (candcol in colorPalettes.arnecolors) { 
                                        return 'COLOR COLOR-' + candcol.toUpperCase(); 
                                    } else if (candcol==="transparent") { 
                                        return 'COLOR FADECOLOR'; 
                                    } else { 
                                        return 'MULTICOLOR'+match_color[0]; 
                                    } 
                                } 
                                break; 
                            } 
                        case 3: 
                            { 
                                var ch = stream.eat(/[.\d]/); 
                                var spritematrix = state.objects_spritematrix; 
                                if (ch === undefined) { 
                                    if (spritematrix.length === 0) { 
                                        return tryParseName(); 
                                    } 
                                    logError('Unknown junk in spritematrix for object ' + state.objects_candname.toUpperCase() + '.', state.lineNumber); 
                                    stream.match(reg_notcommentstart, true); 
                                    return null; 
                                } 
 
                                if (sol) { 
                                    spritematrix.push(''); 
                                } 
 
                                var o = state.objects[state.objects_candname]; 
 
                                spritematrix[spritematrix.length - 1] += ch; 
                                if (spritematrix[spritematrix.length-1].length>5){ 
                                    logError('Sprites must be 5 wide and 5 high.', state.lineNumber); 
                                    stream.match(reg_notcommentstart, true); 
                                    return null; 
                                } 
                                o.spritematrix = state.objects_spritematrix; 
                                if (spritematrix.length === 5 && spritematrix[spritematrix.length - 1].length == 5) { 
                                    state.objects_section = 0; 
                                } 
 
                                if (ch!=='.') { 
                                    var n = parseInt(ch); 
                                    if (n>=o.colors.length) { 
                                        logError("Trying to access color number "+n+" from the color palette of sprite " +state.objects_candname.toUpperCase()+", but there are only "+o.colors.length+" defined in it.",state.lineNumber); 
                                        return 'ERROR'; 
                                    } 
                                    if (isNaN(n)) { 
                                        logError('Invalid character "' + ch + '" in sprite for ' + state.objects_candname.toUpperCase(), state.lineNumber); 
                                        return 'ERROR'; 
                                    } 
                                    return 'COLOR BOLDCOLOR COLOR-' + o.colors[n].toUpperCase(); 
                                } 
                                return 'COLOR FADECOLOR'; 
                            } 
                        default: 
                         { 
                         window.console.logError("EEK shouldn't get here."); 
                         } 
                        } 
                        break; 
                    } 
                case 'sounds': 
                    { 
                        if (sol) { 
                            var ok = true; 
                            var splits = reg_notcommentstart.exec(stream.string)[0].split(/[\p{Z}\s]/u).filter(function(v) {return v !== ''});                           
                            splits.push(state.lineNumber); 
                            state.sounds.push(splits); 
                        } 
                        candname = stream.match(reg_soundverbs, true); 
                        if (candname!==null) { 
                         return 'SOUNDVERB'; 
                        } 
                        candname = stream.match(reg_sounddirectionindicators,true); 
                        if (candname!==null) { 
                         return 'DIRECTION'; 
                        } 
                        candname = stream.match(reg_soundseed, true); 
                        if (candname !== null) 
                        { 
                            state.tokenIndex++; 
                            return 'SOUND'; 
                        }  
                        candname = stream.match(/[^\[\|\]\p{Z}\s]*/u, true); 
                        if (candname!== null ) { 
                         var m = candname[0].trim(); 
                         if (state.names.indexOf(m)>=0) { 
                          return 'NAME'; 
                         } 
                        } 
 
                        candname = stream.match(reg_notcommentstart, true); 
                        logError('unexpected sound token "'+candname+'".' , state.lineNumber); 
                        stream.match(reg_notcommentstart, true); 
                        return 'ERROR'; 
                        break; 
                    } 
                case 'collisionlayers': 
                    { 
                        if (sol) { 
                            //create new collision layer 
                            state.collisionLayers.push([]); 
                            state.tokenIndex=0; 
                        } 
 
                        var match_name = stream.match(reg_name, true); 
                        if (match_name === null) { 
                            //then strip spaces and commas 
                            var prepos=stream.pos; 
                            stream.match(reg_csv_separators, true); 
                            if (stream.pos==prepos) { 
                                logError("error detected - unexpected character " + stream.peek(),state.lineNumber); 
                                stream.next(); 
                            } 
                            return null; 
                        } else { 
                            //have a name: let's see if it's valid 
                            var candname = match_name[0].trim(); 
 
                            var substitutor = function(n) { 
                             n = n.toLowerCase(); 
                             if (n in state.objects) { 
                              return [n]; 
                             }  
 
 
                                for (var i=0;i<state.legend_synonyms.length;i++) { 
                                    var a = state.legend_synonyms[i]; 
                                    if (a[0]===n) {            
                                        return substitutor(a[1]); 
                                    } 
                                } 
 
                             for (var i=0;i<state.legend_aggregates.length;i++) { 
                              var a = state.legend_aggregates[i]; 
                              if (a[0]===n) {            
                               logError('"'+n+'" is an aggregate (defined using "and"), and cannot be added to a single layer because its constituent objects must be able to coexist.', state.lineNumber); 
                               return [];          
                              } 
                             } 
                             for (var i=0;i<state.legend_properties.length;i++) { 
                              var a = state.legend_properties[i]; 
                              if (a[0]===n) {   
                                        var result = [].concat.apply([],a.slice(1).map(substitutor)); 
                               return result; 
                              } 
                             } 
                             logError('Cannot add "' + candname.toUpperCase() + '" to a collision layer; it has not been declared.', state.lineNumber);                                 
                             return []; 
                            }; 
                            if (candname==='background' ) { 
                                if (state.collisionLayers.length>0&&state.collisionLayers[state.collisionLayers.length-1].length>0) { 
                                    logError("Background must be in a layer by itself.",state.lineNumber); 
                                } 
                                state.tokenIndex=1; 
                            } else if (state.tokenIndex!==0) { 
                                logError("Background must be in a layer by itself.",state.lineNumber); 
                            } 
 
                            var ar = substitutor(candname); 
 
                            if (state.collisionLayers.length===0) { 
                                logError("no layers found.",state.lineNumber); 
                                return 'ERROR'; 
                            } 
                             
                            var foundOthers=[]; 
                            for (var i=0;i<ar.length;i++){ 
                                var candname = ar[i]; 
                                for (var j=0;j<=state.collisionLayers.length-1;j++){ 
                                    var clj = state.collisionLayers[j]; 
                                    if (clj.indexOf(candname)>=0){ 
                                        if (j!=state.collisionLayers.length-1){ 
                                            foundOthers.push(j); 
                                        } 
                                    } 
                                } 
                            } 
                            if (foundOthers.length>0){ 
                                var warningStr = 'Object "'+candname.toUpperCase()+'" included in multiple collision layers ( layers '; 
                                for (var i=0;i<foundOthers.length;i++){ 
                                    warningStr+=foundOthers[i]+", "; 
                                } 
                                warningStr+=state.collisionLayers.length-1; 
                                logWarning(warningStr +'). You should fix this!',state.lineNumber);                                         
                            } 
 
                            state.collisionLayers[state.collisionLayers.length - 1] = state.collisionLayers[state.collisionLayers.length - 1].concat(ar); 
                            if (ar.length>0) { 
                             return 'NAME';                             
                            } else { 
                             return 'ERROR'; 
                            } 
                        } 
                        break; 
                    } 
                case 'legend': 
                    { 
                        if (sol) { 
 
 
                            //step 1 : verify format 
                            var longer = stream.string.replace('=', ' = '); 
                            longer = reg_notcommentstart.exec(longer)[0]; 
 
                            var splits = longer.split(/[\p{Z}\s]/u).filter(function(v) { 
                                return v !== ''; 
                            }); 
                            var ok = true; 
 
                         if (splits.length>0) { 
                          var candname = splits[0].toLowerCase(); 
                             if (keyword_array.indexOf(candname)>=0) { 
                                 logWarning('You named an object "' + candname.toUpperCase() + '", but this is a keyword. Don\'t do that!', state.lineNumber); 
                             } 
                                if (splits.indexOf(candname, 2)>=2) { 
                                    logError("You can't define object " + candname.toUpperCase() + " in terms of itself!", state.lineNumber); 
                                    ok = false; 
                                } 
                                checkNameNew(state,candname); 
                         } 
 
                            if (!ok) { 
                            } else if (splits.length < 3) { 
                                ok = false; 
                            } else if (splits[1] !== '=') { 
                                ok = false; 
                            } /*else if (splits[0].charAt(splits[0].length - 1) == 'v') { 
                                logError('names cannot end with the letter "v", because it\'s is used as a direction.', state.lineNumber); 
                                stream.match(reg_notcommentstart, true); 
                                return 'ERROR'; 
                            } */ else if (splits.length === 3) { 
                                var synonym = [splits[0], splits[2].toLowerCase()]; 
                                synonym.lineNumber = state.lineNumber; 
 
                                registerOriginalCaseName(splits[0]); 
                                state.legend_synonyms.push(synonym); 
                            } else if (splits.length % 2 === 0) { 
                                ok = false; 
                            } else { 
                                var lowertoken = splits[3].toLowerCase(); 
                                if (lowertoken === 'and') { 
 
                                 var substitutor = function(n) { 
                                  n = n.toLowerCase(); 
                                  if (n in state.objects) { 
                                   return [n]; 
                                  }  
                                  for (var i=0;i<state.legend_synonyms.length;i++) { 
                                   var a = state.legend_synonyms[i]; 
                                   if (a[0]===n) {    
                                    return substitutor(a[1]); 
                                   } 
                                  } 
                                  for (var i=0;i<state.legend_aggregates.length;i++) { 
                                   var a = state.legend_aggregates[i]; 
                                   if (a[0]===n) {                                    
                                    return [].concat.apply([],a.slice(1).map(substitutor)); 
                                   } 
                                  } 
                                  for (var i=0;i<state.legend_properties.length;i++) { 
                                   var a = state.legend_properties[i]; 
                                   if (a[0]===n) {          
                                    logError("Cannot define an aggregate (using 'and') in terms of properties (something that uses 'or').", state.lineNumber); 
                                    ok=false; 
                                    return [n]; 
                                   } 
                                  } 
                                  return [n]; 
                                 }; 
 
                                    for (var i = 5; i < splits.length; i += 2) { 
                                        if (splits[i].toLowerCase() !== 'and') { 
                                            ok = false; 
                                            break; 
                                        } 
                                    } 
                                    if (ok) { 
                                        var newlegend = [splits[0]].concat(substitutor(splits[2])).concat(substitutor(splits[4])); 
                                        for (var i = 6; i < splits.length; i += 2) { 
                                            newlegend = newlegend.concat(substitutor(splits[i])); 
                                        } 
                                        newlegend.lineNumber = state.lineNumber; 
 
                                        registerOriginalCaseName(newlegend[0]); 
                                        state.legend_aggregates.push(newlegend); 
                                    } 
                                } else if (lowertoken === 'or') { 
 
                                 var substitutor = function(n) { 
                                  n = n.toLowerCase(); 
                                  if (n in state.objects) { 
                                   return [n]; 
                                  }  
 
                                  for (var i=0;i<state.legend_synonyms.length;i++) { 
                                   var a = state.legend_synonyms[i]; 
                                   if (a[0]===n) {    
                                    return substitutor(a[1]); 
                                   } 
                                  } 
                                  for (var i=0;i<state.legend_aggregates.length;i++) { 
                                   var a = state.legend_aggregates[i]; 
                                   if (a[0]===n) {            
                                    logError("Cannot define a property (using 'or') in terms of aggregates (something that uses 'and').", state.lineNumber); 
                                    ok=false;           
                                   } 
                                  } 
                                  for (var i=0;i<state.legend_properties.length;i++) { 
                                   var a = state.legend_properties[i]; 
                                   if (a[0]===n) {   
                                    return [].concat.apply([],a.slice(1).map(substitutor)); 
                                   } 
                                  } 
                                  return [n]; 
                                 }; 
 
                                    for (var i = 5; i < splits.length; i += 2) { 
                                        if (splits[i].toLowerCase() !== 'or') { 
                                            ok = false; 
                                            break; 
                                        } 
                                    } 
                                    if (ok) { 
                                        var newlegend = [splits[0]].concat(substitutor(splits[2])).concat(substitutor(splits[4])); 
                                        for (var i = 6; i < splits.length; i += 2) { 
                                            newlegend.push(splits[i].toLowerCase()); 
                                        } 
                                        newlegend.lineNumber = state.lineNumber; 
 
                                        registerOriginalCaseName(newlegend[0]); 
                                        state.legend_properties.push(newlegend); 
                                    } 
                                } else { 
                                    ok = false; 
                                } 
                            } 
 
                            if (ok === false) { 
                                logError('incorrect format of legend - should be one of A = B, A = B or C ( or D ...), A = B and C (and D ...)', state.lineNumber); 
                                stream.match(reg_notcommentstart, true); 
                                return 'ERROR'; 
                            } 
 
                            state.tokenIndex = 0; 
                        } 
 
                        if (state.tokenIndex === 0) { 
                            stream.match(/[^=]*/, true); 
                            state.tokenIndex++; 
                            return 'NAME'; 
                        } else if (state.tokenIndex === 1) { 
                            stream.next(); 
                            stream.match(/[\p{Z}\s]*/u, true); 
                            state.tokenIndex++; 
                            return 'ASSSIGNMENT'; 
                        } else { 
                            var match_name = stream.match(reg_name, true); 
                            if (match_name === null) { 
                                logError("Something bad's happening in the LEGEND", state.lineNumber); 
                                stream.match(reg_notcommentstart, true); 
                                return 'ERROR'; 
                            } else { 
                                var candname = match_name[0].trim(); 
 
                                if (state.tokenIndex % 2 === 0) { 
 
                                 var wordExists = function(n) { 
                                  n = n.toLowerCase(); 
                                  if (n in state.objects) { 
                                   return true; 
                                  }  
                                  for (var i=0;i<state.legend_aggregates.length;i++) { 
                                   var a = state.legend_aggregates[i]; 
                                   if (a[0]===n) {                                    
                                    return true; 
                                   } 
                                  } 
                                  for (var i=0;i<state.legend_properties.length;i++) { 
                                   var a = state.legend_properties[i]; 
                                   if (a[0]===n) {   
                                    return true; 
                                   } 
                                  } 
                                  for (var i=0;i<state.legend_synonyms.length;i++) { 
                                   var a = state.legend_synonyms[i]; 
                                   if (a[0]===n) {   
                                    return true; 
                                   } 
                                  } 
                                  return false; 
                                 }; 
 
 
                                    if (wordExists(candname)===false) { 
                                            logError('Cannot reference "' + candname.toUpperCase() + '" in the LEGEND section; it has not been defined yet.', state.lineNumber); 
                                            state.tokenIndex++; 
                                            return 'ERROR'; 
                                    } else { 
                                            state.tokenIndex++; 
                                            return 'NAME'; 
                                    } 
                                } else { 
                                        state.tokenIndex++; 
                                        return 'LOGICWORD'; 
                                } 
                            } 
                        } 
                        break; 
                    } 
                case 'rules': 
                    {                      
                        if (sol) { 
                            var rule = reg_notcommentstart.exec(stream.string)[0]; 
                            state.rules.push([rule, state.lineNumber, mixedCase]); 
                            state.tokenIndex = 0;//in rules, records whether bracket has been found or not 
                        } 
 
                        if (state.tokenIndex===-4) { 
                         stream.skipToEnd(); 
                         return 'MESSAGE'; 
                        } 
                        if (stream.match(/[\p{Z}\s]*->[\p{Z}\s]*/u, true)) { 
                            return 'ARROW'; 
                        } 
                        if (ch === '[' || ch === '|' || ch === ']' || ch==='+') { 
                         if (ch!=='+') { 
                             state.tokenIndex = 1; 
                            } 
                            stream.next(); 
                            stream.match(/[\p{Z}\s]*/u, true); 
                            return 'BRACKET'; 
                        } else { 
                            var m = stream.match(/[^\[\|\]\p{Z}\s]*/u, true)[0].trim(); 
 
                            if (state.tokenIndex===0&&reg_loopmarker.exec(m)) { 
                             return 'BRACKET'; 
                            } else if (state.tokenIndex === 0 && reg_ruledirectionindicators.exec(m)) { 
                                stream.match(/[\p{Z}\s]*/u, true); 
                                return 'DIRECTION'; 
                            } else if (state.tokenIndex === 1 && reg_directions.exec(m)) { 
                                stream.match(/[\p{Z}\s]*/u, true); 
                                return 'DIRECTION'; 
                            } else { 
                                if (state.names.indexOf(m) >= 0) { 
                                    if (sol) { 
                                        logError('Identifiers cannot appear outside of square brackets in rules, only directions can.', state.lineNumber); 
                                        return 'ERROR'; 
                                    } else { 
                                        stream.match(/[\p{Z}\s]*/u, true); 
                                        return 'NAME'; 
                                    } 
                                } else if (m==='...') { 
                                    return 'DIRECTION'; 
                                } else if (m==='rigid') { 
                                    return 'DIRECTION'; 
                                } else if (m==='random') { 
                                    return 'DIRECTION'; 
                                } else if (commandwords.indexOf(m)>=0) { 
         if (m==='message') { 
          state.tokenIndex=-4; 
         }                                  
                                 return 'COMMAND'; 
                                } else { 
                                    logError('Name "' + m + '", referred to in a rule, does not exist.', state.lineNumber); 
                                    return 'ERROR'; 
                                } 
                            } 
                        } 
 
                        break; 
                    } 
                case 'winconditions': 
                    { 
                        if (sol) { 
                         var tokenized = reg_notcommentstart.exec(stream.string); 
                         var splitted = tokenized[0].split(/[\p{Z}\s]/u); 
                         var filtered = splitted.filter(function(v) {return v !== ''}); 
                            filtered.push(state.lineNumber); 
                             
                            state.winconditions.push(filtered); 
                            state.tokenIndex = -1; 
                        } 
                        state.tokenIndex++; 
 
                        var match = stream.match(/[\p{Z}\s]*[\p{L}\p{N}_]+[\p{Z}\s]*/u); 
                        if (match === null) { 
                                logError('incorrect format of win condition.', state.lineNumber); 
                                stream.match(reg_notcommentstart, true); 
                                return 'ERROR'; 
 
                        } else { 
                            var candword = match[0].trim(); 
                            if (state.tokenIndex === 0) { 
                                if (reg_winconditionquantifiers.exec(candword)) { 
                                    return 'LOGICWORD'; 
                                } 
                                else { 
                                    return 'ERROR'; 
                                } 
                            } 
                            else if (state.tokenIndex === 2) { 
                                if (candword != 'on') { 
                                    return 'ERROR'; 
                                } else { 
                                    return 'LOGICWORD'; 
                                } 
                            } 
                            else if (state.tokenIndex === 1 || state.tokenIndex === 3) { 
                                if (state.names.indexOf(candword)===-1) { 
                                    logError('Error in win condition: "' + candword.toUpperCase() + '" is not a valid object name.', state.lineNumber); 
                                    return 'ERROR'; 
                                } else { 
                                    return 'NAME'; 
                                } 
                            } 
                        } 
                        break; 
                    } 
                case 'levels': 
                    { 
                        if (sol) 
                        { 
                            if (stream.match(/[\p{Z}\s]*message\b[\p{Z}\s]*/u, true)) { 
                                state.tokenIndex = 1;//1/2 = message/level 
                                var newdat = ['\n', mixedCase.slice(stream.pos).trim(),state.lineNumber]; 
                                if (state.levels[state.levels.length - 1].length == 0) { 
                                    state.levels.splice(state.levels.length - 1, 0, newdat); 
                                } else { 
                                    state.levels.push(newdat); 
                                } 
                                return 'MESSAGE_VERB';//a duplicate of the previous section as a legacy thing for #589  
                            } else if (stream.match(/[\p{Z}\s]*message[\p{Z}\s]*/u, true)) {//duplicating previous section because of #589 
                                logWarning("You probably meant to put a space after 'message' innit.  That's ok, I'll still interpret it as a message, but you probably want to put a space there.",state.lineNumber); 
                                state.tokenIndex = 1;//1/2 = message/level 
                                var newdat = ['\n', mixedCase.slice(stream.pos).trim(),state.lineNumber]; 
                                if (state.levels[state.levels.length - 1].length == 0) { 
                                    state.levels.splice(state.levels.length - 1, 0, newdat); 
                                } else { 
                                    state.levels.push(newdat); 
                                } 
                                return 'MESSAGE_VERB'; 
                            } else { 
                                var line = stream.match(reg_notcommentstart, false)[0].trim(); 
                                state.tokenIndex = 2; 
                                var lastlevel = state.levels[state.levels.length - 1]; 
                                if (lastlevel[0] == '\n') { 
                                    state.levels.push([state.lineNumber,line]); 
                                } else { 
                                    if (lastlevel.length==0) 
                                    { 
                                        lastlevel.push(state.lineNumber); 
                                    } 
                                    lastlevel.push(line);   
 
                                    if (lastlevel.length>1)  
                                    { 
                                        if (line.length!=lastlevel[1].length) { 
                                            logWarning("Maps must be rectangular, yo (In a level, the length of each row must be the same).",state.lineNumber); 
                                        } 
                                    } 
                                } 
                                 
                            } 
                        } else { 
                            if (state.tokenIndex == 1) { 
                                stream.skipToEnd(); 
                                return 'MESSAGE'; 
                            } 
                        } 
 
                        if (state.tokenIndex === 2 && !stream.eol()) { 
                            var ch = stream.peek(); 
                            stream.next(); 
                            if (state.abbrevNames.indexOf(ch) >= 0) { 
                                return 'LEVEL'; 
                            } else { 
                                logError('Key "' + ch.toUpperCase() + '" not found. Do you need to add it to the legend, or define a new object?', state.lineNumber); 
                                return 'ERROR'; 
                            } 
                        } 
                        break; 
                    } 
                  
                 default://if you're in the preamble 
                 { 
               if (sol) { 
                state.tokenIndex=0; 
               } 
               if (state.tokenIndex==0) { 
                      var match = stream.match(/[\p{Z}\s]*[\p{L}\p{N}_]+[\p{Z}\s]*/u);                      
                      if (match!==null) { 
                       var token = match[0].trim(); 
                       if (sol) { 
                        if (['title','author','homepage','background_color','text_color','key_repeat_interval','realtime_interval','again_interval','flickscreen','zoomscreen','color_palette','youtube'].indexOf(token)>=0) { 
                          
                                        if (token==='youtube' || token==='author' || token==='homepage' || token==='title') { 
                                            stream.string=mixedCase; 
                                        } 
                                         
                                        var m2 = stream.match(reg_notcommentstart, false); 
                                         
                         if(m2!=null) { 
                                            state.metadata.push(token); 
                          state.metadata.push(m2[0].trim());                                             
                         } else { 
                          logError('MetaData "'+token+'" needs a value.',state.lineNumber); 
                         } 
                         state.tokenIndex=1; 
                         return 'METADATA'; 
                        } else if ( ['run_rules_on_level_start','norepeat_action','require_player_movement','debug','verbose_logging','throttle_movement','noundo','noaction','norestart','scanline'].indexOf(token)>=0) { 
                         state.metadata.push(token); 
                         state.metadata.push("true"); 
                         state.tokenIndex=-1; 
                         return 'METADATA'; 
                        } else  { 
                         logError('Unrecognised stuff in the prelude.', state.lineNumber); 
                         return 'ERROR'; 
                        } 
                       } else if (state.tokenIndex==-1) { 
                        logError('MetaData "'+token+'" has no parameters.',state.lineNumber); 
                        return 'ERROR'; 
                       } 
                       return 'METADATA'; 
                      }        
                  } else { 
                   stream.match(reg_notcommentstart, true); 
                   return "METADATATEXT"; 
                  } 
                  break; 
                 } 
             } 
            }; 
 
            if (stream.eol()) { 
                return null; 
            } 
            if (!stream.eol()) { 
                stream.next(); 
                return null; 
            } 
        }, 
        startState: function() { 
            return { 
                /* 
                    permanently useful 
                */ 
                objects: {}, 
 
                /* 
                    for parsing 
                */ 
                lineNumber: 0, 
 
                commentLevel: 0, 
 
                section: '', 
                visitedSections: [], 
 
                objects_candname: '', 
                objects_section: 0, //whether reading name/color/spritematrix 
                objects_spritematrix: [], 
 
                collisionLayers: [], 
 
                tokenIndex: 0, 
 
                legend_synonyms: [], 
                legend_aggregates: [], 
                legend_properties: [], 
 
                sounds: [], 
                rules: [], 
 
                names: [], 
 
                winconditions: [], 
                metadata: [], 
 
                original_case_names: {}, 
 
                abbrevNames: [], 
 
                levels: [[]], 
 
                subsection: '' 
            }; 
        } 
    }; 
}; 
 
window.CodeMirror.defineMode('puzzle', codeMirrorFn);</script> <script>"use strict";function isColor(e){return(e=e.trim())in colorPalettes.arnecolors||(!!/^#([0-9A-F]{3}){1,2}$/i.test(e)||"transparent"===e)}function colorToHex(e,r){return r=r.trim(),r in e?e[r]:r}function generateSpriteMatrix(e){for(var r=[],o=0;o<e.length;o++){for(var t=[],n=0;n<e.length;n++){var a=e[o].charAt(n);"."==a?t.push(-1):t.push(a)}r.push(t)}return r}function generateExtraMembers(e){0===e.collisionLayers.length&&logError("No collision layers defined.  All objects need to be in collision layers."),e.idDict={};for(var r=0,o=0;o<e.collisionLayers.length;o++)for(var t=0;t<e.collisionLayers[o].length;t++){var n=e.collisionLayers[o][t];if(n in e.objects){var a=e.objects[n];a.layer=o,a.id=r,e.idDict[r]=n,r++}}e.objectCount=r;for(var i=e.collisionLayers.length,l=[],s=0;s<i;s++)l.push(-1);STRIDE_OBJ=0|Math.ceil(e.objectCount/32),STRIDE_MOV=0|Math.ceil(i/5),e.STRIDE_OBJ=STRIDE_OBJ,e.STRIDE_MOV=STRIDE_MOV,debugMode=!1,verbose_logging=!1,throttle_movement=!1,colorPalette=colorPalettes.arnecolors;for(var s=0;s<e.metadata.length;s+=2){var c=e.metadata[s],g=e.metadata[s+1];"color_palette"===c?(g in colorPalettesAliases&&(g=colorPalettesAliases[g]),void 0===colorPalettes[g]?logError('Palette "'+g+'" not found, defaulting to arnecolors.',0):colorPalette=colorPalettes[g]):"debug"===c?(debugMode=!0,cache_console_messages=!0):"verbose_logging"===c?(verbose_logging=!0,cache_console_messages=!0):"throttle_movement"===c&&(throttle_movement=!0)}for(var n in e.objects)if(e.objects.hasOwnProperty(n)){var a=e.objects[n];a.colors.length>10&&logError("a sprite cannot have more than 10 colors.  Why you would want more than 10 is beyond me.",a.lineNumber+1);for(var s=0;s<a.colors.length;s++){var h=a.colors[s];isColor(h)?(h=colorToHex(colorPalette,h),a.colors[s]=h):(logError('Invalid color specified for object "'+n+'", namely "'+a.colors[s]+'".',a.lineNumber+1),a.colors[s]="#ff00ff")}}for(var n in e.objects)if(e.objects.hasOwnProperty(n)){var a=e.objects[n];0==a.colors.length&&(logError('color not specified for object "'+n+'".',a.lineNumber),a.colors=["#ff00ff"]),0===a.spritematrix.length?a.spritematrix=[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]:(5===a.spritematrix.length&&5===a.spritematrix[0].length&&5===a.spritematrix[1].length&&5===a.spritematrix[2].length&&5===a.spritematrix[3].length&&5===a.spritematrix[4].length||logWarning("Sprite graphics must be 5 wide and 5 high exactly.",a.lineNumber),a.spritematrix=generateSpriteMatrix(a.spritematrix))}var u={};for(var n in e.objects)if(e.objects.hasOwnProperty(n)){var a=e.objects[n],p=l.concat([]);p[a.layer]=a.id,u[n]=p}for(var f=!0;f;){f=!1;for(var s=0;s<e.legend_synonyms.length;s++){var d=e.legend_synonyms[s],c=d[0],g=d[1];c in u&&void 0!==u[c]||void 0===u[g]||(f=!0,u[c]=u[g])}for(var s=0;s<e.legend_aggregates.length;s++){for(var d=e.legend_aggregates[s],c=d[0],v=d.slice(1),m=!0,t=0;t<v.length;t++){if(void 0===u[v[t]]){m=!1;break}}if((!(c in u)||void 0===u[c])&&m){for(var p=l.concat([]),t=1;t<d.length;t++){var n=d[t],a=e.objects[n];if(void 0==a&&logError("Object not found with name "+n,e.lineNumber),-1==p[a.layer])p[a.layer]=a.id;else if(void 0===a.layer)logError('Object "'+n.toUpperCase()+'" has been defined, but not assigned to a layer.',d.lineNumber);else{var b=n.toUpperCase(),y=e.idDict[p[a.layer]].toUpperCase();b!==y&&logError('Trying to create an aggregate object (defined in the legend) with both "'+b+'" and "'+y+"\", which are on the same layer and therefore can't coexist.",d.lineNumber)}}f=!0,u[d[0]]=p}}}e.glyphDict=u;for(var R={},s=0;s<e.legend_aggregates.length;s++){var w=e.legend_aggregates[s];R[w[0]]=w.slice(1)}e.aggregatesDict=R;for(var E={},s=0;s<e.legend_properties.length;s++){var w=e.legend_properties[s];E[w[0]]=w.slice(1)}e.propertiesDict=E;for(var k={},s=0;s<e.legend_synonyms.length;s++){var w=e.legend_synonyms[s],c=w[0],D=w[1];D in R?R[c]=R[D]:D in E?E[c]=E[D]:c!==D&&(k[c]=D)}e.synonymsDict=k;for(var _=!0;_;){_=!1;for(var n in k)if(k.hasOwnProperty(n)){var D=k[n];D in E?(delete k[n],E[n]=E[D],_=!0):D in R?(delete R[n],R[n]=R[D],_=!0):D in k&&(k[n]=k[D])}for(var n in E)if(E.hasOwnProperty(n))for(var I=E[n],s=0;s<I.length;s++){var D=I[s];if(D in k)I[s]=k[D],_=!0;else if(D in E){I.splice(s,1);for(var M=E[D],t=0;t<M.length;t++){var x=M[t];-1===I.indexOf(x)&&I.push(x)}_=!0}D in R&&logError('Trying to define property "'+n.toUpperCase()+'" in terms of aggregate "'+D.toUpperCase()+'".')}for(var n in R)if(R.hasOwnProperty(n))for(var I=R[n],s=0;s<I.length;s++){var D=I[s];if(D in k)I[s]=k[D],_=!0;else if(D in R){I.splice(s,1);for(var M=R[D],t=0;t<M.length;t++){var x=M[t];-1===I.indexOf(x)&&I.push(x)}_=!0}D in E&&logError('Trying to define aggregate "'+n.toUpperCase()+'" in terms of property "'+D.toUpperCase()+'".')}}e.propertiesSingleLayer={};for(var c in E)if(E.hasOwnProperty(c)){for(var I=E[c],j=!0,s=1;s<I.length;s++)if(e.objects[I[s-1]].layer!==e.objects[I[s]].layer){j=!1;break}j&&(e.propertiesSingleLayer[c]=e.objects[I[0]].layer)}void 0===e.idDict[0]&&e.collisionLayers.length>0&&logError("You need to have some objects defined");var O,N;if(void 0===e.objects.background)if("background"in e.synonymsDict){var n=e.synonymsDict.background,a=e.objects[n];O=a.id,N=a.layer}else if("background"in e.propertiesDict){var n=e.propertiesDict.background[0],a=e.objects[n];O=a.id,N=a.layer}else if("background"in e.aggregatesDict){var a=e.objects[e.idDict[0]];O=a.id,N=a.layer,logError("background cannot be an aggregate (declared with 'and'), it has to be a simple type, or property (declared in terms of others using 'or').")}else{var a=e.objects[e.idDict[0]];O=a.id,N=a.layer,logError("you have to define something to be the background")}else O=e.objects.background.id,N=e.objects.background.layer;e.backgroundid=O,e.backgroundlayer=N}function levelFromString(e,r){var o=e.backgroundlayer,t=(e.backgroundid,e.layerMasks[o]),n=new Level(r[0],r[1].length,r.length-1,e.collisionLayers.length,null);n.objects=new Int32Array(n.width*n.height*STRIDE_OBJ);for(var a=0;a<n.width;a++)for(var i=0;i<n.height;i++){var l=r[i+1].charAt(a);0==l.length&&(l=r[i+1].charAt(r[i+1].length-1));var s=e.glyphDict[l];void 0==s&&(void 0===e.propertiesDict[l]?logError('Error, symbol "'+l+'", used in map, not found.',r[0]+i):logError('Error, symbol "'+l+"\" is defined using 'or', and therefore ambiguous - it cannot be used in a map. Did you mean to define it in terms of 'and'?",r[0]+i));var c=new BitVec(STRIDE_OBJ);s=s.concat([]);for(var g=0;g<n.layerCount;g++)s[g]>=0&&c.ibitset(s[g]);for(var h=0;h<STRIDE_OBJ;++h)n.objects[STRIDE_OBJ*(a*n.height+i)+h]=c.data[h]}for(var u=n.calcBackgroundMask(e),a=0;a<n.n_tiles;a++){var p=n.getCell(a);t.anyBitsInCommon(p)||(p.ior(u),n.setCell(a,p))}return n}function levelsToArray(e){for(var r=e.levels,o=[],t=0;t<r.length;t++){var n=r[t];if(0!=n.length)if("\n"==n[0]){var a={message:n[1]};splitMessage=wordwrap(a.message,intro_template[0].length),splitMessage.length>12&&logWarning("Message too long to fit on screen.",n[2]),o.push(a)}else{var a=levelFromString(e,n);o.push(a)}}e.levels=o}function directionalRule(e){for(var r=0;r<e.lhs.length;r++){var o=e.lhs[r];if(o.length>1)return!0;for(var t=0;t<o.length;t++)for(var n=o[t],a=0;a<n.length;a+=2)if(relativeDirections.indexOf(n[a])>=0)return!0}for(var r=0;r<e.rhs.length;r++){var o=e.rhs[r];if(o.length>1)return!0;for(var t=0;t<o.length;t++)for(var n=o[t],a=0;a<n.length;a+=2)if(relativeDirections.indexOf(n[a])>=0)return!0}return!1}function findIndexAfterToken(e,r,o){e=e.toLowerCase();for(var t=0,n=0;n<=o;n++){var a=r[n];t=e.indexOf(a,t)+a.length}return t}function processRuleString(e,r,o){var t=e[0],n=e[1],a=e[2];t=t.replace(/\[/g," [ ").replace(/\]/g," ] ").replace(/\|/g," | ").replace(/\-\>/g," -> "),t=t.trim(),"+"===t[0]&&(t=t.substring(0,1)+" "+t.substring(1,t.length));var i=t.split(/\s/).filter(function(e){return""!==e});0==i.length&&logError("Spooky error!  Empty line passed to rule function.",n);var l=0,s=[],c=null,g=[],h=!1,u=!1,p=[],f=[],d=!1,v=!1,m=n,b=[],y=!1;if(1===i.length){if("startloop"===i[0])return _={bracket:1};if("endloop"===i[0])return _={bracket:-1}}-1==i.indexOf("->")&&logError("A rule has to have an arrow in it.  There's no arrow here! Consider reading up about rules - you're clearly doing something weird",n);for(var c=[],R=0,w=0;w<i.length;w++){var E=i[w];switch(l){case 0:"+"===E?m===n?(0==o.length&&logError('The "+" symbol, for joining a rule with the group of the previous rule, needs a previous rule to be applied to.'),0!==w&&logError('The "+" symbol, for joining a rule with the group of the previous rule, must be the first symbol on the line '),m=o[o.length-1].groupNumber):logError('Two "+"s ("append to previous rule group" symbol) applied to the same rule.',n):E in directionaggregates?s=s.concat(directionaggregates[E]):"late"===E?d=!0:"rigid"===E?v=!0:"random"===E?y=!0:simpleAbsoluteDirections.indexOf(E)>=0?s.push(E):simpleRelativeDirections.indexOf(E)>=0?logError('You cannot use relative directions ("^v<>") to indicate in which direction(s) a rule applies.  Use absolute directions indicators (Up, Down, Left, Right, Horizontal, or Vertical, for instance), or, if you want the rule to apply in all four directions, do not specify directions',n):"["==E?(0==s.length&&(s=s.concat(directionaggregates.orthogonal)),l=1,w--):logError("The start of a rule must consist of some number of directions (possibly 0), before the first bracket, specifying in what directions to look (with no direction specified, it applies in all four directions).  It seems you've just entered \""+E.toUpperCase()+'".',n);break;case 1:if("["==E)R++,R>1&&logWarning("Multiple opening brackets without closing brackets.  Something fishy here.  Every '[' has to be closed by a ']', and you can't nest them.",n),c.length>0&&logError('Error, malformed cell rule - encountered a "["" before previous bracket was closed',n),h=!0,c=[];else if(reg_directions_only.exec(E))c.length%2==1?logError("Error, an item can only have one direction/action at a time, but you're looking for several at once!",n):h?c.push(E):logWarning("Invalid syntax. Directions should be placed at the start of a rule.",n);else if("|"==E)h?c.length%2==1?logError("In a rule, if you specify a force, it has to act on an object.",n):(g.push(c),c=[]):logWarning('Janky syntax.  "|" should only be used inside cell rows (the square brackety bits).',n);else if("]"===E)R--,R<0&&logWarning("Multiple closing brackets without corresponding opening brackets.  Something fishy here.  Every '[' has to be closed by a ']', and you can't nest them.",n),c.length%2==1?"..."===c[0]?logError("Cannot end a rule with ellipses.",n):logError("In a rule, if you specify a force, it has to act on an object.",n):(g.push(c),c=[]),u?f.push(g):p.push(g),g=[],h=!1;else if("->"===E)h?logError('Encountered an unexpected "->" inside square brackets.  It\'s used to separate states, it has no place inside them >:| .',n):u?logError('Error, you can only use "->" once in a rule; it\'s used to separate before and after states.',n):u=!0;else if(r.names.indexOf(E)>=0)h?c.length%2==0?(c.push(""),c.push(E)):c.length%2==1&&c.push(E):logWarning("Invalid token "+E.toUpperCase()+". Object names should only be used within cells (square brackets).",n);else if("..."===E)h?(c.push(E),c.push(E)):logWarning("Invalid syntax, ellipses should only be used within cells (square brackets).",n);else if(commandwords.indexOf(E)>=0)if(!1===u&&logError("Commands cannot appear on the left-hand side of the arrow.",n),"message"===E){var k=findIndexAfterToken(a,i,w),D=a.substring(k).trim();""===D&&(D=" "),b.push([E,D]),w=i.length}else b.push([E]);else logError('Error, malformed cell rule - was looking for cell contents, but found "'+E+'".  What am I supposed to do with this, eh, please tell me that.',n)}}if(p.length!=f.length)b.length>0&&0==f.length||logError("Error, when specifying a rule, the number of matches (square bracketed bits) on the left hand side of the arrow must equal the number on the right",n);else for(var w=0;w<p.length;w++)p[w].length!=f[w].length&&logError("In a rule, each pattern to match on the left must have a corresponding pattern on the right of equal length (number of cells).",n),0==p[w].length&&logError("You have an totally empty pattern on the left-hand side.  This will match *everything*.  You certainly don't want this.");0==p.length&&logError("This rule refers to nothing.  What the heck? :O",n);var _={directions:s,lhs:p,rhs:f,lineNumber:n,late:d,rigid:v,groupNumber:m,commands:b,randomRule:y};return!1===directionalRule(_)&&(_.directions=["up"]),_}function deepCloneHS(e){return e.map(function(e){return e.map(function(e){return e.slice()})})}function deepCloneRule(e){return{direction:e.direction,lhs:deepCloneHS(e.lhs),rhs:deepCloneHS(e.rhs),lineNumber:e.lineNumber,late:e.late,rigid:e.rigid,groupNumber:e.groupNumber,commands:e.commands,randomRule:e.randomRule}}function rulesToArray(e){for(var r=e.rules,o=[],t=[],n=0;n<r.length;n++){var a=r[n][1],i=processRuleString(r[n],e,o);void 0===i.bracket?o.push(i):t.push([a,i.bracket])}e.loops=t;for(var l=[],n=0;n<o.length;n++)for(var s=o[n],c=s.directions,g=0;g<c.length;g++){var h=c[g];if(h in directionaggregates&&directionalRule(s))for(var u=directionaggregates[h],p=0;p<u.length;p++){var f=deepCloneRule(s);f.direction=u[p],l.push(f)}else{var f=deepCloneRule(s);f.direction=h,l.push(f)}}for(var n=0;n<l.length;n++){var s=l[n];convertRelativeDirsToAbsolute(s),rewriteUpLeftRules(s),atomizeAggregates(e,s),rephraseSynonyms(e,s)}for(var d=[],n=0;n<l.length;n++){var s=l[n];d=d.concat(concretizeMovingRule(e,s,s.lineNumber))}for(var v=[],n=0;n<d.length;n++){var s=d[n];v=v.concat(concretizePropertyRule(e,s,s.lineNumber))}e.rules=v}function containsEllipsis(e){for(var r=0;r<e.lhs.length;r++)for(var o=0;o<e.lhs[r].length;o++)if("..."===e.lhs[r][o][1])return!0;return!1}function rewriteUpLeftRules(e){if(!containsEllipsis(e)){if("up"==e.direction)e.direction="down";else{if("left"!=e.direction)return;e.direction="right"}for(var r=0;r<e.lhs.length;r++)e.lhs[r].reverse(),e.rhs.length>0&&e.rhs[r].reverse()}}function getPropertiesFromCell(e,r){for(var o=[],t=0;t<r.length;t+=2){var n=r[t],a=r[t+1];"random"!=n&&(a in e.propertiesDict&&o.push(a))}return o}function getMovings(e,r){for(var o=[],t=0;t<r.length;t+=2){var n=r[t],a=r[t+1];n in directionaggregates&&o.push([a,n])}return o}function concretizePropertyInCell(e,r,o){for(var t=0;t<e.length;t+=2)e[t+1]===r&&"random"!==e[t]&&(e[t+1]=o)}function concretizeMovingInCell(e,r,o,t){for(var n=0;n<e.length;n+=2)e[n]===r&&e[n+1]===o&&(e[n]=t)}function concretizeMovingInCellByAmbiguousMovementName(e,r,o){for(var t=0;t<e.length;t+=2)e[t]===r&&(e[t]=o)}function expandNoPrefixedProperties(e,r){for(var o=[],t=0;t<r.length;t+=2){var n=r[t],a=r[t+1];if("no"===n&&a in e.propertiesDict)for(var i=e.propertiesDict[a],l=0;l<i.length;l++){var s=i[l];o.push(n),o.push(s)}else o.push(n),o.push(a)}return o}function concretizePropertyRule(e,r,o){for(var t=0;t<r.lhs.length;t++)for(var n=r.lhs[t],a=0;a<n.length;a++)n[a]=expandNoPrefixedProperties(e,n[a]),r.rhs.length>0&&(r.rhs[t][a]=expandNoPrefixedProperties(e,r.rhs[t][a]));for(var i={},a=0;a<r.rhs.length;a++)for(var l=r.lhs[a],s=r.rhs[a],c=0;c<s.length;c++)for(var g=getPropertiesFromCell(e,l[c]),h=getPropertiesFromCell(e,s[c]),u=0;u<h.length;u++){var p=h[u];-1==g.indexOf(p)&&(i[p]=!0)}for(var f,d=[r],v=!0;v;){v=!1;for(var t=0;t<d.length;t++){var m=d[t];f=!1;for(var a=0;a<m.lhs.length&&!f;a++)for(var b=m.lhs[a],c=0;c<b.length&&!f;c++)for(var y=b[c],R=getPropertiesFromCell(e,y),u=0;u<R.length;++u){var p=R[u];if(!e.propertiesSingleLayer.hasOwnProperty(p)||!0===i[p]){var w=e.propertiesDict[p];f=!0,v=!0;for(var E=0;E<w.length;E++){var k=w[E],D=deepCloneRule(m);D.propertyReplacement={};for(var _ in m.propertyReplacement)if(m.propertyReplacement.hasOwnProperty(_)){var I=m.propertyReplacement[_];D.propertyReplacement[_]=[I[0],I[1]]}concretizePropertyInCell(D.lhs[a][c],p,k),D.rhs.length>0&&concretizePropertyInCell(D.rhs[a][c],p,k),void 0===D.propertyReplacement[p]?D.propertyReplacement[p]=[k,1]:D.propertyReplacement[p][1]=D.propertyReplacement[p][1]+1,d.push(D)}break}}f&&(d.splice(t,1),t--)}}for(var t=0;t<d.length;t++){var m=d[t];if(void 0!==m.propertyReplacement)for(var p in m.propertyReplacement)if(m.propertyReplacement.hasOwnProperty(p)){var M=m.propertyReplacement[p],k=M[0],x=M[1];if(1===x)for(var a=0;a<m.rhs.length;a++)for(var j=m.rhs[a],c=0;c<j.length;c++){var O=j[c];concretizePropertyInCell(O,p,k)}}}for(var N="",t=0;t<d.length;t++){var m=d[t];delete d.propertyReplacement;for(var a=0;a<m.rhs.length;a++)for(var b=m.rhs[a],c=0;c<b.length;c++)for(var y=b[c],R=getPropertiesFromCell(e,y),u=0;u<R.length;u++)i.hasOwnProperty(R[u])&&(N=R[u])}return N.length>0&&logError('This rule has a property on the right-hand side, "'+N.toUpperCase()+"\", that can't be inferred from the left-hand side.  (either for every property on the right there has to be a corresponding one on the left in the same cell, OR, if there's a single occurrence of a particular property name on the left, all properties of the same name on the right are assumed to be the same).",o),d}function concretizeMovingRule(e,r,o){for(var t,n=[r],a=!0;a;){a=!1;for(var i=0;i<n.length;i++){var l=n[i];t=!1;for(var s=0;s<l.lhs.length;s++)for(var c=l.lhs[s],g=0;g<c.length;g++){var h=c[g],u=getMovings(e,h);if(u.length>0){t=!0,a=!0;for(var p=u[0][0],f=u[0][1],d=directionaggregates[f],v=0;v<d.length;v++){var m=d[v],b=deepCloneRule(l);b.movingReplacement={};for(var y in l.movingReplacement)if(l.movingReplacement.hasOwnProperty(y)){var R=l.movingReplacement[y];b.movingReplacement[y]=[R[0],R[1],R[2]]}concretizeMovingInCell(b.lhs[s][g],f,p,m),b.rhs.length>0&&concretizeMovingInCell(b.rhs[s][g],f,p,m),void 0===b.movingReplacement[p]?b.movingReplacement[p]=[m,1,f]:b.movingReplacement[p][1]=b.movingReplacement[p][1]+1,n.push(b)}}}t&&(n.splice(i,1),i--)}}for(var i=0;i<n.length;i++){var l=n[i];if(void 0!==l.movingReplacement){var w={};for(var p in l.movingReplacement)if(l.movingReplacement.hasOwnProperty(p)){var E=l.movingReplacement[p],k=E[0],D=E[1],_=E[2];if(w[_]=_ in w||1!==D?"INVALID":k,1===D)for(var s=0;s<l.rhs.length;s++)for(var I=l.rhs[s],g=0;g<I.length;g++){var M=I[g];concretizeMovingInCell(M,_,p,k)}}for(var _ in w)if(w.hasOwnProperty(_)&&"INVALID"!==_){if("INVALID"===(k=w[_]))continue;for(var s=0;s<l.rhs.length;s++)for(var I=l.rhs[s],g=0;g<I.length;g++){var M=I[g];concretizeMovingInCellByAmbiguousMovementName(M,_,k)}}}}for(var x="",i=0;i<n.length;i++){var l=n[i];delete n.movingReplacement;for(var s=0;s<l.rhs.length;s++)for(var c=l.rhs[s],g=0;g<c.length;g++){var h=c[g],u=getMovings(e,h);u.length>0&&(x=u[0][1])}}return x.length>0&&logError('This rule has an ambiguous movement on the right-hand side, "'+x+"\", that can't be inferred from the left-hand side.  (either for every ambiguous movement associated to an entity on the right there has to be a corresponding one on the left attached to the same entity, OR, if there's a single occurrence of a particular ambiguous movement on the left, all properties of the same movement attached to the same object on the right are assumed to be the same (or something like that)).",o),n}function rephraseSynonyms(e,r){for(var o=0;o<r.lhs.length;o++)for(var t=r.lhs[o],n=r.rhs[o],a=0;a<t.length;a++){for(var i=t[a],l=1;l<i.length;l+=2){var s=i[l];s in e.synonymsDict&&(i[l]=e.synonymsDict[i[l]])}if(r.rhs.length>0)for(var c=n[a],l=1;l<c.length;l+=2){var s=c[l];s in e.synonymsDict&&(c[l]=e.synonymsDict[c[l]])}}}function atomizeAggregates(e,r){for(var o=0;o<r.lhs.length;o++)for(var t=r.lhs[o],n=0;n<t.length;n++){var a=t[n];atomizeCellAggregates(e,a,r.lineNumber)}for(var o=0;o<r.rhs.length;o++)for(var t=r.rhs[o],n=0;n<t.length;n++){var a=t[n];atomizeCellAggregates(e,a,r.lineNumber)}}function atomizeCellAggregates(e,r,o){for(var t=0;t<r.length;t+=2){var n=r[t],a=r[t+1];if(a in e.aggregatesDict){"no"===n&&logError("You cannot use 'no' to exclude the aggregate object "+a.toUpperCase()+" (defined using 'AND'), only regular objects, or properties (objects defined using 'OR').  If you want to do this, you'll have to write it out yourself the long way.",o);var i=e.aggregatesDict[a];r[t+1]=i[0];for(var l=1;l<i.length;l++)r.push(r[t]),r.push(i[l])}}}function convertRelativeDirsToAbsolute(e){for(var r=e.direction,o=0;o<e.lhs.length;o++)for(var t=e.lhs[o],n=0;n<t.length;n++){var a=t[n];absolutifyRuleCell(r,a)}for(var o=0;o<e.rhs.length;o++)for(var t=e.rhs[o],n=0;n<t.length;n++){var a=t[n];absolutifyRuleCell(r,a)}}function absolutifyRuleCell(e,r){for(var o=0;o<r.length;o+=2){var t=r[o],n=relativeDirs.indexOf(t);n>=0&&(r[o]=relativeDict[e][n])}}function rulesToMask(e){for(var r=e.collisionLayers.length,o=[],t=0;t<r;t++)o.push(null);for(var t=0;t<e.rules.length;t++)for(var n=e.rules[t],a=0;a<n.lhs.length;a++)for(var i=n.lhs[a],l=n.rhs[a],s=0;s<i.length;s++){for(var c=i[s],g=o.concat([]),h=new BitVec(STRIDE_OBJ),u=new BitVec(STRIDE_OBJ),p=[],f=new BitVec(STRIDE_MOV),d=new BitVec(STRIDE_MOV),v=new BitVec(STRIDE_MOV),m=0;m<c.length;m+=2){var b=c[m];if("..."===b){if(h=ellipsisPattern,2!==c.length)logError("You can't have anything in with an ellipsis. Sorry.",n.lineNumber);else if(0===s||s===i.length-1)logError("There's no point in putting an ellipsis at the very start or the end of a rule",n.lineNumber);else if(n.rhs.length>0){var y=l[s];2===y.length&&"..."===y[0]||logError("An ellipsis on the left must be matched by one in the corresponding place on the right.",n.lineNumber)}break}if("random"!==b){var R=c[m+1],w=e.objects[R],E=e.objectMasks[R];if(w)var k=0|w.layer;else var k=e.propertiesSingleLayer[R];if(void 0===k&&logError("Oops!  "+R.toUpperCase()+" not assigned to a layer.",n.lineNumber),"no"===b)u.ior(E);else{var D=g[k];null!==D&&(n.discard=[R.toUpperCase(),D.toUpperCase()]),g[k]=R,w?(h.ior(E),v.ishiftor(31,5*k)):p.push(E),"stationary"===b?d.ishiftor(31,5*k):f.ishiftor(dirMasks[b],5*k)}}else logError("'random' cannot be matched on the left-hand side, it can only appear on the right",n.lineNumber)}if(n.rhs.length>0){var y=l[s],_=i[s];"..."===y[0]&&"..."!==_[0]&&logError("An ellipsis on the right must be matched by one in the corresponding place on the left.",n.lineNumber);for(var m=0;m<y.length;m+=2){var I=y[m];"..."===I&&2!==y.length&&logError("You can't have anything in with an ellipsis. Sorry.",n.lineNumber)}}if(h!==ellipsisPattern){if(i[s]=new CellPattern([h,u,p,f,d,null]),0!==n.rhs.length){for(var M=l[s],x=o.concat([]),j=o.concat([]),O=new BitVec(STRIDE_OBJ),N=new BitVec(STRIDE_OBJ),C=new BitVec(STRIDE_MOV),S=new BitVec(STRIDE_MOV),P=new BitVec(STRIDE_MOV),T=new BitVec(STRIDE_OBJ),L=new BitVec(STRIDE_MOV),B=new BitVec(STRIDE_MOV),m=0;m<M.length;m+=2){var b=M[m],R=M[m+1];if("..."===b)break;if("random"!==b){var w=e.objects[R],E=e.objectMasks[R];if(w)var k=0|w.layer;else var k=e.propertiesSingleLayer[R];if("no"==b)O.ior(E);else{var D=x[k];null===D&&(D=j[k]),null!==D&&(n.hasOwnProperty("discard")||logError("Rule matches object types that can't overlap: \""+R.toUpperCase()+'" and "'+D.toUpperCase()+'".',n.lineNumber)),x[k]=R,b.length>0&&L.ishiftor(31,5*k);var A=e.layerMasks[k];w&&(N.ibitset(w.id),O.ior(A),P.ishiftor(31,5*k)),"stationary"===b&&C.ishiftor(31,5*k),"randomdir"===b?B.ishiftor(dirMasks[b],5*k):S.ishiftor(dirMasks[b],5*k)}}else if(R in e.objectMasks){var V=e.objectMasks[R];T.ior(V);var z;z=e.propertiesDict.hasOwnProperty(R)?e.propertiesDict[R]:[R];for(var F=0;F<z.length;F++){var U=z[F],k=0|e.objects[U].layer,D=x[k];if(null!==D){var J=U.toUpperCase(),W=D.toUpperCase();J!==W&&logWarning("This rule may try to spawn a "+J+" with random, but also requires a "+W+" be here, which is on the same layer - they shouldn't be able to coexist!",n.lineNumber)}j[k]=U}}else logError('You want to spawn a random "'+R.toUpperCase()+"\", but I don't know how to do that",n.lineNumber)}h.bitsSetInArray(N.data)||O.ior(h),f.bitsSetInArray(S.data)||C.ior(f);for(var m=0;m<r;m++)null!==g[m]&&null===x[m]&&(O.ior(e.layerMasks[m]),L.ishiftor(31,5*m));v.iclear(P),L.ior(v),(O||N||C||S||L)&&(i[s].replacement=new CellReplacement([O,N,C,S,L,T,B]))}}else i[s]=ellipsisPattern}}function cellRowMasks(e){for(var r=[],o=e[1],t=0;t<o.length;t++){for(var n=o[t],a=new BitVec(STRIDE_OBJ),i=0;i<n.length;i++)n[i]!==ellipsisPattern&&a.ior(n[i].objectsPresent);r.push(a)}return r}function collapseRules(e){for(var r=0;r<e.length;r++)for(var o=e[r],t=0;t<o.length;t++){for(var n=o[t],a=[0,[],n.rhs.length>0,n.lineNumber],i=[],l=0;l<n.lhs.length;l++)i.push(!1);a[0]=dirMasks[n.direction];for(var l=0;l<n.lhs.length;l++){for(var s=n.lhs[l],c=0;c<s.length;c++)s[c]===ellipsisPattern&&(i[l]&&logError("You can't use two ellipses in a single cell match pattern.  If you really want to, please implement it yourself and send me a patch :) ",n.lineNumber),i[l]=!0);a[1][l]=s}a.push(i),a.push(n.groupNumber),a.push(n.rigid),a.push(n.commands),a.push(n.randomRule),a.push(cellRowMasks(a)),o[t]=new Rule(a)}matchCache={}}function ruleGroupRandomnessTest(e){if(0!==e.length)for(var r=e[0].lineNumber,o=1;o<e.length;o++){var t=e[o];t.lineNumber!==r&&(t.randomRule&&logError("A rule-group can only be marked random by the first rule",t.lineNumber))}}function ruleGroupDiscardOverlappingTest(e){if(0!==e.length){for(var r=e[0].lineNumber,o=!0,t=null,n=0;n<e.length;n++){var a=e[n];a.hasOwnProperty("discard")?(t=a.discard,e.splice(n,1),n--):o=!1}o&&logError(t[0]+" and "+t[1]+" can never overlap, but this rule requires that to happen.",r)}}function arrangeRulesByGroupNumber(e){for(var r={},o={},t=0;t<e.rules.length;t++){var n=e.rules[t],a=r;n.late&&(a=o),void 0==a[n.groupNumber]&&(a[n.groupNumber]=[]),a[n.groupNumber].push(n)}var i=[];for(var l in r)if(r.hasOwnProperty(l)){var s=r[l];ruleGroupRandomnessTest(s),ruleGroupDiscardOverlappingTest(s),s.length>0&&i.push(s)}var c=[];for(var l in o)if(o.hasOwnProperty(l)){var s=o[l];ruleGroupRandomnessTest(s),ruleGroupDiscardOverlappingTest(s),s.length>0&&c.push(s)}e.rules=i,e.lateRules=c}function checkNoLateRulesHaveMoves(e){for(var r=0;r<e.lateRules.length;r++)for(var o=e.lateRules[r],t=0;t<o.length;t++)for(var n=o[t],a=0;a<n.patterns.length;a++)for(var i=n.patterns[a],l=0;l<i.length;l++){var s=i[l];if(s!==ellipsisPattern){var c=s.movementsMissing,g=s.movementsPresent;if(!c.iszero()||!g.iszero())return void logError("Movements cannot appear in late rules.",n.lineNumber);if(null!=s.replacement){var h=s.replacement.movementsClear,u=s.replacement.movementsSet;if(!h.iszero()||!u.iszero())return void logError("Movements cannot appear in late rules.",n.lineNumber)}}}}function generateRigidGroupList(e){for(var r=[],o=[],t=[],n=[],a=[],i=0;i<e.rules.length;i++){for(var l=e.rules[i],s=!1,c=0;c<l.length;c++){l[c].isRigid&&(s=!0)}if(a[i]=s,s){var g=l[0].groupNumber;t[g]=i;var h=r.length;o[i]=h,n[g]=h,r.push(i)}}r.length>30&&logError("There can't be more than 30 rigid groups (rule groups containing rigid members).",rules[0][0][3]),e.rigidGroups=a,e.rigidGroupIndex_to_GroupIndex=r,e.groupNumber_to_RigidGroupIndex=n,e.groupIndex_to_RigidGroupIndex=o}function getMaskFromName(e,r){var o=new BitVec(STRIDE_OBJ);if(r in e.objects){var t=e.objects[r];o.ibitset(t.id)}if(r in e.aggregatesDict)for(var n=e.aggregatesDict[r],a=0;a<n.length;a++){var i=n[a],t=e.objects[i];o.ibitset(t.id)}if(r in e.propertiesDict)for(var n=e.propertiesDict[r],a=0;a<n.length;a++){var i=n[a],t=e.objects[i];o.ibitset(t.id)}if(r in e.synonymsDict){var i=e.synonymsDict[r],t=e.objects[i];o.ibitset(t.id)}return o.iszero()&&logErrorNoLine("error, didn't find any object called player, either in the objects section, or the legends section. there must be a player!"),o}function generateMasks(e){e.playerMask=getMaskFromName(e,"player");for(var r=[],o=e.collisionLayers.length,t=0;t<o;t++){for(var n=new BitVec(STRIDE_OBJ),a=0;a<e.objectCount;a++){var i=e.idDict[a],l=e.objects[i];l.layer==t&&n.ibitset(l.id)}r.push(n)}e.layerMasks=r;var s={};for(var i in e.objects)if(e.objects.hasOwnProperty(i)){var l=e.objects[i];s[i]=new BitVec(STRIDE_OBJ),s[i].ibitset(l.id)}var c=e.legend_synonyms.concat(e.legend_properties);c.sort(function(e,r){return e.lineNumber-r.lineNumber});for(var g=0;g<c.length;g++){var h=c[g];if(2==h.length)s[h[0]]=s[h[1]];else{for(var u=new BitVec(STRIDE_OBJ),a=1;a<h.length;a++){var i=h[a];u.ior(s[i])}s[h[0]]=u}}var p=new BitVec(STRIDE_OBJ);p.inot(),s["\nall\n"]=p,e.objectMasks=s}function checkObjectsAreLayered(e){for(var r in e.objects)if(e.objects.hasOwnProperty(r)){for(var o=!1,t=0;t<e.collisionLayers.length;t++){for(var n=e.collisionLayers[t],a=0;a<n.length;a++)if(n[a]===r){o=!0;break}if(o)break}if(!1===o){var i=e.objects[r];logError('Object "'+r.toUpperCase()+'" has been defined, but not assigned to a layer.',i.lineNumber)}}}function twiddleMetaData(e){for(var r={},o=0;o<e.metadata.length;o+=2){var t=e.metadata[o],n=e.metadata[o+1];r[t]=n}if(void 0!==r.flickscreen){var n=r.flickscreen,a=n.split("x"),i=[parseInt(a[0]),parseInt(a[1])];r.flickscreen=i}if(void 0!==r.zoomscreen){var n=r.zoomscreen,a=n.split("x"),i=[parseInt(a[0]),parseInt(a[1])];r.zoomscreen=i}e.metadata=r}function processWinConditions(e){for(var r=[],o=0;o<e.winconditions.length;o++){var t=e.winconditions[o];if(0==t.length)return;var n=0;switch(t[0]){case"no":n=-1;break;case"all":n=1}var a,i=t[t.length-1],l=t[1];a=5==t.length?t[3]:"\nall\n";var s=0,c=0;l in e.objectMasks?s=e.objectMasks[l]:logError('unwelcome term "'+l+'" found in win condition. Win conditions objects have to be objects or properties (defined using "or", in terms of other properties)',i),a in e.objectMasks?c=e.objectMasks[a]:logError('unwelcome term "'+a+'" found in win condition. Win conditions objects have to be objects or properties (defined using "or", in terms of other properties)',i);var g=[n,s,c,i];r.push(g)}e.winconditions=r}function printCellRow(e){for(var r="[ ",o=0;o<e.length;o++){o>0&&(r+="| ");for(var t=e[o],n=0;n<t.length;n+=2){var a=t[n],i=t[n+1];r+="..."===a?a+" ":a+" "+i+" "}}return r+="] "}function cacheRuleStringRep(e){var r="(<a onclick=\"jumpToLine('"+e.lineNumber.toString()+'\');"  href="javascript:void(0);">'+e.lineNumber+"</a>) "+e.direction.toString().toUpperCase()+" ";e.rigid&&(r="RIGID "+r+" "),e.randomRule&&(r="RANDOM "+r+" "),e.late&&(r="LATE "+r+" ");for(var o=0;o<e.lhs.length;o++){var t=e.lhs[o];r+=printCellRow(t)}r+="-> ";for(var o=0;o<e.rhs.length;o++){var t=e.rhs[o];r+=printCellRow(t)}for(var o=0;o<e.commands.length;o++){var n=e.commands[o];1===n.length?r+=n[0].toString():r=r+"("+n[0].toString()+", "+n[1].toString()+") "}e.stringRep=r}function cacheAllRuleNames(e){for(var r=0;r<e.rules.length;r++){cacheRuleStringRep(e.rules[r])}}function printRules(e){for(var r="",o=0,t=-1,n=0,a=0;a<e.rules.length;a++){var i=e.rules[a];o<e.loops.length&&e.loops[o][0]<i.lineNumber&&(r+="STARTLOOP<br>",++o<e.loops.length&&(t=e.loops[o][0],o++)),-1!==t&&t<i.lineNumber&&(r+="ENDLOOP<br>",t=-1),i.hasOwnProperty("discard")?n++:r+=i.stringRep+"<br>"}-1!==t&&(r+="ENDLOOP<br>"),r+="===========<br>",r="<br>Rule Assembly : ("+(e.rules.length-n)+" rules)<br>===========<br>"+r,consolePrint(r)}function removeDuplicateRules(e){for(var r={},o=-1,t=e.rules.length-1;t>=0;t--){var n=e.rules[t],a=n.groupNumber;a!==o&&(r={});var i=n.stringRep;r.hasOwnProperty(i)?e.rules.splice(t,1):r[i]=!0,o=a}}function generateLoopPoints(e){var r={},o=!0,t=0,n=0;e.loops.length%2==1&&logErrorNoLine("have to have matching number of  'startLoop' and 'endLoop' loop points.");for(var a=0;a<e.loops.length;a++)for(var i=e.loops[a],l=0;l<e.rules.length;l++){var s=e.rules[l],c=s[0],g=s[s.length-1],h=c.lineNumber;g.lineNumber;if(o){if(h>=i[0]){n=l,o=!1,-1===i[1]&&logErrorNoLine("Need have to have matching number of  'startLoop' and 'endLoop' loop points.");break}}else if(h>=i[0]){t=l-1,r[t]=n,o=!0,1===i[1]&&logErrorNoLine("Need have to have matching number of  'startLoop' and 'endLoop' loop points.");break}}if(!1===o){var t=e.rules.length;r[t]=n}e.loopPoint=r,r={},o=!0
;for(var a=0;a<e.loops.length;a++)for(var i=e.loops[a],l=0;l<e.lateRules.length;l++){var s=e.lateRules[l],c=s[0],g=s[s.length-1],h=c.lineNumber;g.lineNumber;if(o){if(h>=i[0]){n=l,o=!1,-1===i[1]&&logErrorNoLine("Need have to have matching number of  'startLoop' and 'endLoop' loop points.");break}}else if(h>=i[0]){t=l-1,r[t]=n,o=!0,1===i[1]&&logErrorNoLine("Need have to have matching number of  'startLoop' and 'endLoop' loop points.");break}}if(!1===o){var t=e.lateRules.length;r[t]=n}e.lateLoopPoint=r}function validSeed(e){return null!==/^\s*\d+\s*$/.exec(e)}function generateSoundData(e){for(var r={},o=[],t=[],n=[],a=[],i=0;i<e.sounds.length;i++){var l=e.sounds[i];if(!(l.length<=1)){var s=l[l.length-1];if(2!==l.length)if(soundEvents.indexOf(l[0])>=0){l.length>4&&logError("too much stuff to define a sound event.",s);var c=l[1];validSeed(c)?(void 0!==r[l[0]]&&logWarning(l[0].toUpperCase()+" already declared.",s),r[l[0]]=l[1]):logError('Expecting sfx data, instead found "'+l[1]+'".',s)}else{var g=l[0].trim(),h=l[1].trim(),u=l.slice(2,l.length-2);u.length>0&&"move"!==h&&"cantmove"!==h&&logError("incorrect sound declaration.",s),"action"===h&&(h="move",u=["___action____"]),0==u.length&&(u=["orthogonal"]);var c=l[l.length-2];g in e.aggregatesDict?logError('cannot assign sound events to aggregate objects (declared with "and"), only to regular objects, or properties, things defined in terms of "or" ("'+g+'").',s):g in e.objectMasks||logError('Object "'+g+'" not found.',s);for(var p=e.objectMasks[g],f=0,d=0;d<u.length;d++){u[d]=u[d].trim();var v=u[d];if(-1===soundDirectionIndicators.indexOf(v))logError('Was expecting a direction, instead found "'+v+'".',s);else{var m=soundDirectionIndicatorMasks[v];f|=m}}for(var b=[g],y=!0;y;){y=!1;for(var R=0;R<b.length;R++){var w=b[R];if(w in e.synonymsDict)b[R]=e.synonymsDict[w],y=!0;else if(w in e.propertiesDict){y=!0;var E=e.propertiesDict[w];b.splice(R,1),R--;for(var k=0;k<E.length;k++)b.push(E[k])}}}if("move"===h||"cantmove"===h)for(var d=0;d<b.length;d++){var D=b[d],_=e.objects[D],I=_.layer,M=new BitVec(STRIDE_MOV);M.ishiftor(f,5*I);var x={objectMask:p,directionMask:M,seed:c};"move"===h?n.push(x):a.push(x)}validSeed(c)||logError('Expecting sfx data, instead found "'+c+'".',s);switch(h){case"create":var x={objectMask:p,seed:c};o.push(x);break;case"destroy":var x={objectMask:p,seed:c};t.push(x)}}else logError("incorrect sound declaration.",s)}}e.sfx_Events=r,e.sfx_CreationMasks=o,e.sfx_DestructionMasks=t,e.sfx_MovementMasks=n,e.sfx_MovementFailureMasks=a}function formatHomePage(e){if("background_color"in e.metadata?e.bgcolor=colorToHex(colorPalette,e.metadata.background_color):e.bgcolor="#000000","text_color"in e.metadata?e.fgcolor=colorToHex(colorPalette,e.metadata.text_color):e.fgcolor="#FFFFFF",!1===isColor(e.fgcolor)&&(logError("text_color in incorrect format - found "+e.fgcolor+", but I expect a color name (like 'pink') or hex-formatted color (like '#1412FA').  Defaulting to white."),e.fgcolor="#FFFFFF"),!1===isColor(e.bgcolor)&&(logError("background_color in incorrect format - found "+e.bgcolor+", but I expect a color name (like 'pink') or hex-formatted color (like '#1412FA').  Defaulting to black."),e.bgcolor="#000000"),canSetHTMLColors&&("background_color"in e.metadata&&(document.body.style.backgroundColor=e.bgcolor),"text_color"in e.metadata)){var r=document.getElementById("separator");null!=r&&(r.style.color=e.fgcolor);for(var o=document.getElementsByTagName("a"),t=0;t<o.length;t++)o[t].style.color=e.fgcolor;for(var o=document.getElementsByTagName("h1"),t=0;t<o.length;t++)o[t].style.color=e.fgcolor}if("homepage"in e.metadata){var n=e.metadata.homepage;n=n.replace("http://",""),n=n.replace("https://",""),e.metadata.homepage=n}}function loadFile(e){for(var r=new codeMirrorFn,o=r.startState(),t=e.split("\n"),n=0;n<t.length;n++){var a=t[n];o.lineNumber=n+1;var i=new CodeMirror.StringStream(a,4);do{if(r.token(i,o),errorCount>MAX_ERRORS)return void consolePrint("too many errors, aborting compilation")}while(!1===i.eol())}return delete o.lineNumber,generateExtraMembers(o),generateMasks(o),levelsToArray(o),rulesToArray(o),cacheAllRuleNames(o),removeDuplicateRules(o),rulesToMask(o),debugMode&&printRules(o),arrangeRulesByGroupNumber(o),collapseRules(o.rules),collapseRules(o.lateRules),checkNoLateRulesHaveMoves(o),generateRigidGroupList(o),processWinConditions(o),checkObjectsAreLayered(o),twiddleMetaData(o),generateLoopPoints(o),generateSoundData(o),formatHomePage(o),delete o.commentLevel,delete o.names,delete o.abbrevNames,delete o.objects_candname,delete o.objects_section,delete o.objects_spritematrix,delete o.section,delete o.subsection,delete o.tokenIndex,delete o.visitedSections,delete o.loops,o}function compile(e,r,o){if(matchCache={},forceRegenImages=!0,void 0===e&&(e=["restart"]),void 0===o&&(o=null),lastDownTarget=canvas,void 0===r){r=window.form1.code.editorreference.getValue()+"\n"}!0===canDump&&(compiledText=r),errorCount=0,compiling=!0,errorStrings=[],consolePrint("=================================");try{var t=loadFile(r)}finally{compiling=!1}if(t&&t.levels&&0===t.levels.length&&logError("No levels found.  Add some levels!",void 0,!0),!(errorCount>MAX_ERRORS)){if(errorCount>0)consoleError('<span class="systemMessage">Errors detected during compilation; the game may not work correctly.</span>');else{for(var n=0,a=0;a<t.rules.length;a++)n+=t.rules[a].length;for(var a=0;a<t.lateRules.length;a++)n+=t.lateRules[a].length;"restart"==e[0]?consolePrint('<span class="systemMessage">Successful Compilation, generated '+n+" instructions.</span>"):consolePrint('<span class="systemMessage">Successful live recompilation, generated '+n+" instructions.</span>")}setGameState(t,e,o),clearInputHistory(),consoleCacheDump()}}function qualifyURL(e){var r=document.createElement("a");return r.href=e,r.href}var debugMode,colorPalette;Level.prototype.calcBackgroundMask=function(e){void 0===e.backgroundlayer&&logError("you have to have a background layer");for(var r=e.layerMasks[e.backgroundlayer],o=0;o<this.n_tiles;o++){var t=this.getCell(o);if(t.iand(r),!t.iszero())return t}return t=new BitVec(STRIDE_OBJ),t.ibitset(e.backgroundid),t};var directionaggregates={horizontal:["left","right"],vertical:["up","down"],moving:["up","down","left","right","action"],orthogonal:["up","down","left","right"],perpendicular:["^","v"],parallel:["<",">"]},relativeDirections=["^","v","<",">","horizontal","vertical"],simpleAbsoluteDirections=["up","down","left","right"],simpleRelativeDirections=["^","v","<",">"],reg_directions_only=/^(\>|\<|\^|v|up|down|left|right|moving|stationary|no|randomdir|random|horizontal|vertical|orthogonal|perpendicular|parallel|action)$/,commandwords=["sfx0","sfx1","sfx2","sfx3","sfx4","sfx5","sfx6","sfx7","sfx8","sfx9","sfx10","cancel","checkpoint","restart","win","message","again"],relativeDirs=["^","v","<",">","parallel","perpendicular"],relativeDict={right:["up","down","left","right","horizontal","vertical"],up:["left","right","down","up","vertical","horizontal"],down:["right","left","up","down","vertical","horizontal"],left:["down","up","right","left","horizontal","vertical"]},dirMasks={up:parseInt("00001",2),down:parseInt("00010",2),left:parseInt("00100",2),right:parseInt("01000",2),moving:parseInt("01111",2),no:parseInt("00011",2),randomdir:parseInt("00101",2),random:parseInt("10010",2),action:parseInt("10000",2),"":parseInt("00000",2)},soundEvents=["titlescreen","startgame","cancel","endgame","startlevel","undo","restart","endlevel","showmessage","closemessage","sfx0","sfx1","sfx2","sfx3","sfx4","sfx5","sfx6","sfx7","sfx8","sfx9","sfx10"],soundMaskedEvents=["create","destroy","move","cantmove","action"],soundVerbs=soundEvents.concat(soundMaskedEvents),soundDirectionIndicatorMasks={up:parseInt("00001",2),down:parseInt("00010",2),left:parseInt("00100",2),right:parseInt("01000",2),horizontal:parseInt("01100",2),vertical:parseInt("00011",2),orthogonal:parseInt("01111",2),___action____:parseInt("10000",2)},soundDirectionIndicators=["up","down","left","right","horizontal","vertical","orthogonal","___action____"],MAX_ERRORS=5,ifrm;</script> <script>function selectText(e,t){t=t||window.event;var o=document.getElementById(e);if(t&&(t.ctrlKey||t.metaKey)){var r=["console"].concat(o.innerHTML.split("<br>")),n=levelFromString(state,r);loadLevelFromLevelDat(state,n,null),canvasResize()}else if(document.selection){var l=document.body.createTextRange();l.moveToElementText(o),l.select()}else if(window.getSelection){var l=document.createRange();l.selectNode(o),window.getSelection().addRange(l)}}function recalcLevelBounds(){}function arrCopy(e,t,o,r,n){for(;n--;)o[r++]=e[t]++}function adjustLevel(e,t,o){backups.push(backupLevel());var r=e.clone();e.width+=t,e.height+=o,e.n_tiles=e.width*e.height,e.objects=new Int32Array(e.n_tiles*STRIDE_OBJ);var n=new BitVec(STRIDE_OBJ);n.ibitset(state.backgroundid);for(var l=0;l<e.n_tiles;++l)e.setCell(l,n);return e.movements=new Int32Array(e.objects.length),columnAdded=!0,RebuildLevelArrays(),r}function addLeftColumn(){for(var e=adjustLevel(level,1,0),t=1;t<level.width;++t)for(var o=0;o<level.height;++o){var r=t*level.height+o;level.setCell(r,e.getCell(r-level.height))}}function addRightColumn(){for(var e=adjustLevel(level,1,0),t=0;t<level.width-1;++t)for(var o=0;o<level.height;++o){var r=t*level.height+o;level.setCell(r,e.getCell(r))}}function addTopRow(){for(var e=adjustLevel(level,0,1),t=0;t<level.width;++t)for(var o=1;o<level.height;++o){var r=t*level.height+o;level.setCell(r,e.getCell(r-t-1))}}function addBottomRow(){for(var e=adjustLevel(level,0,1),t=0;t<level.width;++t)for(var o=0;o<level.height-1;++o){var r=t*level.height+o;level.setCell(r,e.getCell(r-t))}}function removeLeftColumn(){if(!(level.width<=1))for(var e=adjustLevel(level,-1,0),t=0;t<level.width;++t)for(var o=0;o<level.height;++o){var r=t*level.height+o;level.setCell(r,e.getCell(r+level.height))}}function removeRightColumn(){if(!(level.width<=1))for(var e=adjustLevel(level,-1,0),t=0;t<level.width;++t)for(var o=0;o<level.height;++o){var r=t*level.height+o;level.setCell(r,e.getCell(r))}}function removeTopRow(){if(!(level.height<=1))for(var e=adjustLevel(level,0,-1),t=0;t<level.width;++t)for(var o=0;o<level.height;++o){var r=t*level.height+o;level.setCell(r,e.getCell(r+t+1))}}function removeBottomRow(){if(!(level.height<=1))for(var e=adjustLevel(level,0,-1),t=0;t<level.width;++t)for(var o=0;o<level.height;++o){var r=t*level.height+o;level.setCell(r,e.getCell(r+t))}}function matchGlyph(e,t){for(var o,r=-1,n=0;n<t.length;++n){var l=t[n][0],a=t[n][1],i=t[n][2];if(a.bitsSetInArray(e.data)){for(var s=0,d=0;d<32*STRIDE_OBJ;++d)i.get(d)&&e.get(d)&&s++,a.get(d)&&e.get(d)&&s++;s>r&&(r=s,o=l)}}return r>0?o:(logErrorNoLine("Wasn't able to approximate a glyph value for some tiles, using '.' as a placeholder.",!0),".")}function printLevel(){var e=[];for(var t in state.glyphDict)if(state.glyphDict.hasOwnProperty(t)&&1===t.length){for(var o=state.glyphDict[t],r=new BitVec(STRIDE_OBJ),n=0;n<o.length;n++){var l=o[n];l>=0&&r.ibitset(l)}var a=r.clone(),i=state.layerMasks[state.backgroundlayer];r.iclear(i),e.push([t,r,a])}selectableint++;for(var s="selectable"+selectableint,d='Printing level contents:<br><br><span id="'+s+'" onclick="selectText(\''+s+"',event)\">",c=0;c<level.height;c++){for(var n=0;n<level.width;n++){var u=c+n*level.height,v=level.getCell(u),o=matchGlyph(v,e);o in htmlEntityMap&&(o=htmlEntityMap[o]),d+=o}c<level.height-1&&(d+="<br>")}d+="</span><br><br>",consolePrint(d,!0)}function levelEditorClick(e,t){if(mouseCoordY<=-2){var o=editorRowCount-(-mouseCoordY-2)-1,r=mouseCoordX+(screenwidth-1)*o;-1===mouseCoordX?printLevel():mouseCoordX>=0&&r<glyphImages.length&&(glyphSelectedIndex=r,redraw())}else if(mouseCoordX>-1&&mouseCoordY>-1&&mouseCoordX<screenwidth-2&&mouseCoordY<screenheight-2-editorRowCount){for(var n=glyphImagesCorrespondance[glyphSelectedIndex],l=state.glyphDict[n],a=new BitVec(STRIDE_OBJ),i=0;i<l.length;i++){var s=l[i];s>=0&&a.ibitset(s)}var d=state.layerMasks[state.backgroundlayer];a.bitsClearInArray(d.data)&&a.ibitset(state.backgroundid);var c=mouseCoordY+mouseCoordX*level.height,u=level.getCell(c);if(u.equals(a))return;!1===anyEditsSinceMouseDown&&(anyEditsSinceMouseDown=!0,backups.push(backupLevel())),level.setCell(c,a),redraw()}else t&&(-1===mouseCoordX?(addLeftColumn(),canvasResize()):mouseCoordX===screenwidth-2&&(addRightColumn(),canvasResize()),-1===mouseCoordY?(addTopRow(),canvasResize()):mouseCoordY===screenheight-2-editorRowCount&&(addBottomRow(),canvasResize()))}function levelEditorRightClick(e,t){if(-2===mouseCoordY)mouseCoordX<=glyphImages.length&&(glyphSelectedIndex=mouseCoordX,redraw());else if(mouseCoordX>-1&&mouseCoordY>-1&&mouseCoordX<screenwidth-2&&mouseCoordY<screenheight-2-editorRowCount){var o=mouseCoordY+mouseCoordX*level.height,r=new BitVec(STRIDE_OBJ);r.ibitset(state.backgroundid),level.setCell(o,r),redraw()}else t&&(-1===mouseCoordX?(removeLeftColumn(),canvasResize()):mouseCoordX===screenwidth-2&&(removeRightColumn(),canvasResize()),-1===mouseCoordY?(removeTopRow(),canvasResize()):mouseCoordY===screenheight-2-editorRowCount&&(removeBottomRow(),canvasResize()))}function onMouseDown(e){if(!e.handled){ULBS();var t=0===e.button,o=2===e.button;if("touchstart"==e.type&&(t=!0),t&&(e.ctrlKey||e.metaKey)&&(t=!1,o=!0),t){if(lastDownTarget=e.target,keybuffer=[],(e.target===canvas||"tapFocusIndicator"===e.target.className)&&(setMouseCoord(e),dragging=!0,rightdragging=!1,levelEditorOpened))return anyEditsSinceMouseDown=!1,levelEditorClick(e,!0);dragging=!1,rightdragging=!1}else if(o&&(e.target===canvas||"tapFocusIndicator"===e.target.className)&&(setMouseCoord(e),dragging=!1,rightdragging=!0,levelEditorOpened))return levelEditorRightClick(e,!0);e.handled=!0}}function rightClickCanvas(e){return prevent(e)}function onMouseUp(e){e.handled||(dragging=!1,rightdragging=!1,e.handled=!0)}function onKeyDown(e){ULBS(),e=e||window.event,!IDE&&[32,37,38,39,40].indexOf(e.keyCode)>-1&&(e&&(e.ctrlKey||e.metaKey)||prevent(e)),IDE||77!==e.keyCode||toggleMute(),keybuffer.indexOf(e.keyCode)>=0||((lastDownTarget===canvas||window.Mobile&&lastDownTarget===window.Mobile.focusIndicator)&&-1===keybuffer.indexOf(e.keyCode)&&(e&&(e.ctrlKey||e.metaKey)||(keybuffer.splice(keyRepeatIndex,0,e.keyCode),keyRepeatTimer=0,checkKey(e,!0))),!0===canDump&&(74===e.keyCode&&(e.ctrlKey||e.metaKey)?(dumpTestCase(),prevent(e)):75===e.keyCode&&(e.ctrlKey||e.metaKey)?(makeGIF(),prevent(e)):83===e.keyCode&&(e.ctrlKey||e.metaKey)?(saveClick(),prevent(e)):13===e.keyCode&&(e.ctrlKey||e.metaKey)&&(canvas.focus(),editor.display.input.blur(),rebuildClick(),prevent(e))))}function relMouseCoords(e){var t=0,o=0,r=0,n=0,l=this;do{t+=l.offsetLeft-l.scrollLeft,o+=l.offsetTop-l.scrollTop}while(l=l.offsetParent);return null==e.touches?(r=e.pageX-t,n=e.pageY-o):(r=e.touches[0].pageX-t,n=e.touches[0].pageY-o),{x:r,y:n}}function onKeyUp(e){e=e||window.event;var t=keybuffer.indexOf(e.keyCode);t>=0&&(keybuffer.splice(t,1),keyRepeatIndex>=t&&keyRepeatIndex--)}function onMyFocus(e){keybuffer=[],keyRepeatIndex=0,keyRepeatTimer=0}function onMyBlur(e){keybuffer=[],keyRepeatIndex=0,keyRepeatTimer=0}function setMouseCoord(e){var t=canvas.relMouseCoords(e);mouseCoordX=t.x-xoffset,mouseCoordY=t.y-yoffset,mouseCoordX=Math.floor(mouseCoordX/cellwidth),mouseCoordY=Math.floor(mouseCoordY/cellheight)}function mouseMove(e){e.handled||(levelEditorOpened&&(setMouseCoord(e),dragging?levelEditorClick(e,!1):rightdragging&&levelEditorRightClick(e,!1),redraw()),e.handled=!0)}function mouseOut(){}function prevent(e){return e.preventDefault&&e.preventDefault(),e.stopImmediatePropagation&&e.stopImmediatePropagation(),e.stopPropagation&&e.stopPropagation(),e.returnValue=!1,!1}function checkKey(e,t){if(ULBS(),!(winning||e&&(e.ctrlKey||e.metaKey||e.altKey))){var o=-1;switch(e.keyCode){case 65:case 37:o=1;break;case 38:case 87:o=0;break;case 68:case 39:o=3;break;case 83:case 40:o=2;break;case 80:printLevel();break;case 13:case 32:case 67:case 88:if(!1!==norepeat_action&&!t)return;o=4;break;case 85:case 90:if(!1===textMode)return pushInput("undo"),DoUndo(!1,!0),canvasResize(),prevent(e);break;case 82:if(!1===textMode&&t)return pushInput("restart"),DoRestart(),canvasResize(),prevent(e);break;case 27:if(!1===titleScreen)return goToTitleScreen(),tryPlayTitleSound(),canvasResize(),prevent(e);break;case 69:if(canOpenEditor)return t&&(titleScreen&&("EMPTY GAME"===state.title?compile(["loadFirstNonMessageLevel"]):nextLevel()),levelEditorOpened=!levelEditorOpened,!1===levelEditorOpened&&printLevel(),restartTarget=backupLevel(),canvasResize()),prevent(e);break;case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:if(levelEditorOpened&&t){var r=9;return e.keyCode>=49&&(r=e.keyCode-49),r<glyphImages.length?glyphSelectedIndex=r:consolePrint("Trying to select tile outside of range in level editor.",!0),canvasResize(),prevent(e)}break;case 189:if(levelEditorOpened&&t&&glyphSelectedIndex>0)return glyphSelectedIndex--,canvasResize(),prevent(e);break;case 187:if(levelEditorOpened&&t&&glyphSelectedIndex+1<glyphImages.length)return glyphSelectedIndex++,canvasResize(),prevent(e)}if(throttle_movement&&o>=0&&o<=3){if(lastinput==o&&input_throttle_timer<repeatinterval)return;lastinput=o,input_throttle_timer=0}if(textMode){if(0===state.levels.length);else if(titleScreen)0===titleMode?4===o&&t&&!1===titleSelected&&(tryPlayStartGameSound(),titleSelected=!0,messageselected=!1,timer=0,quittingTitleScreen=!0,generateTitleScreen(),canvasResize()):4==o&&t?!1===titleSelected&&(tryPlayStartGameSound(),titleSelected=!0,messageselected=!1,timer=0,quittingTitleScreen=!0,generateTitleScreen(),redraw()):0!==o&&2!==o||(titleSelection=0===o?0:1,generateTitleScreen(),redraw());else if(4==o&&t){if(unitTesting)return void nextLevel();!1===messageselected&&(messageselected=!0,timer=0,quittingMessageScreen=!0,tryPlayCloseMessageSound(),titleScreen=!1,drawMessageScreen())}}else if(!againing&&o>=0)return 4===o&&"noaction"in state.metadata||(pushInput(o),processInput(o)&&redraw()),prevent(e)}}function update(){if(timer+=deltatime,input_throttle_timer+=deltatime,quittingTitleScreen&&timer/1e3>.3&&(quittingTitleScreen=!1,nextLevel()),againing&&timer>againinterval&&0==messagetext.length&&processInput(-1)&&(redraw(),keyRepeatTimer=0,autotick=0),quittingMessageScreen&&timer/1e3>.15&&(quittingMessageScreen=!1,""===messagetext?nextLevel():(messagetext="",textMode=!1,titleScreen=!1,titleMode=curlevel>0||null!==curlevelTarget?1:0,titleSelected=!1,titleSelection=0,canvasResize(),checkWin())),winning&&timer/1e3>.5&&(winning=!1,nextLevel()),keybuffer.length>0){keyRepeatTimer+=deltatime;var e=throttle_movement?repeatinterval:repeatinterval/Math.sqrt(keybuffer.length);if(keyRepeatTimer>e){keyRepeatTimer=0,keyRepeatIndex=(keyRepeatIndex+1)%keybuffer.length;checkKey({keyCode:keybuffer[keyRepeatIndex]},!1)}}!(autotickinterval>0)||textMode||levelEditorOpened||againing||winning||(autotick+=deltatime,autotick>autotickinterval&&(autotick=0,pushInput("tick"),processInput(-1)&&redraw()))}var keyRepeatTimer=0,keyRepeatIndex=0,input_throttle_timer=0,lastinput=-100,dragging=!1,rightdragging=!1,columnAdded=!1,htmlEntityMap={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"},selectableint=0,anyEditsSinceMouseDown=!1;HTMLCanvasElement.prototype.relMouseCoords=relMouseCoords;var mouseCoordX=0,mouseCoordY=0;document.addEventListener("touchstart",onMouseDown,!1),document.addEventListener("touchmove",mouseMove,!1),document.addEventListener("touchend",onMouseUp,!1),document.addEventListener("mousedown",onMouseDown,!1),document.addEventListener("mouseup",onMouseUp,!1),document.addEventListener("keydown",onKeyDown,!1),document.addEventListener("keyup",onKeyUp,!1),window.addEventListener("focus",onMyFocus,!1),window.addEventListener("blur",onMyBlur,!1),setInterval(function(){update()},deltatime);</script> <script>function Animatable(t,i,e){function n(){var t;return o+=i,o>=1&&(t=!0,o=1),e(o),t}function s(){var t;return o-=i,o<=0&&(t=!0,o=0),e(o),t}var o,a;return a={animateUp:function(){Animator.getInstance().animate(t,n)},animateDown:function(){Animator.getInstance().animate(t,s)}},o=0,a}window.Mobile={},Mobile.hasTouch=function(){var t;return("ontouchstart"in window||window.DocumentTouch&&document instanceof DocumentTouch)&&(t=!0),t},Mobile.enable=function(t){return(t||Mobile.hasTouch()&&!Mobile._instance)&&(Mobile._instance=new Mobile.GestureHandler,Mobile._instance.bindEvents(),Mobile._instance.bootstrap()),Mobile._instance},window.Mobile.GestureHandler=function(){this.initialize.apply(this,arguments)},Mobile.log=function(t){var i;i=document.getElementsByTagName("h1")[0],i.innerHTML=Math.random().toString().substring(4,1)+"-"+t},Mobile.debugDot=function(t){var i,e,n;n="border-radius: 50px;width: 5px;height: 5px;background: red;position: absolute;left: "+t.touches[0].clientX+"px;top: "+t.touches[0].clientY+"px;",i=document.createElement("div"),i.setAttribute("style",n),e=document.getElementsByTagName("body")[0],e.appendChild(i)},function(t){"use strict";var i={action:88,left:37,right:39,up:38,down:40,undo:85,restart:82,quit:27},e=['<div class="tab">','  <div class="tab-affordance"></div>','  <div class="tab-icon">','    <div class="slice"></div>','    <div class="slice"></div>',"  </div>","</div>"].join("\n");t.initialize=function(){this.firstPos={x:0,y:0},this.setTabAnimationRatio=this.setTabAnimationRatio.bind(this),this.setMenuAnimationRatio=this.setMenuAnimationRatio.bind(this),this.repeatTick=this.repeatTick.bind(this),this.isFocused=!0},t.setFocusElement=function(t){this.focusElement=t,this.isFocused=!1,this.buildFocusIndicator()},t.bindEvents=function(){window.addEventListener("touchstart",this.onTouchStart.bind(this)),window.addEventListener("touchend",this.onTouchEnd.bind(this)),window.addEventListener("touchmove",this.onTouchMove.bind(this))},t.bootstrap=function(){this.showTab(),this.disableScrolling(),this.isAudioSupported()||this.disableAudio(),this.disableSelection()},t.onTouchStart=function(t){this.isTouching||(this.handleFocusChange(t),this.isFocused&&"A"!==t.target.tagName.toUpperCase()&&(this.isTouching=!0,this.mayBeSwiping=!0,this.gestured=!1,this.swipeDirection=void 0,this.swipeDistance=0,this.startTime=(new Date).getTime(),this.firstPos.x=t.touches[0].clientX,this.firstPos.y=t.touches[0].clientY))},t.onTouchEnd=function(t){this.isFocused&&this.isTouching&&(this.gestured||0===t.touches.length&&this.handleTap(),0===t.touches.length&&(this.isTouching=!1,this.endRepeatWatcher()))},t.onTouchMove=function(t){if(this.isFocused&&!levelEditorOpened)return this.isSuccessfulSwipe()?(this.handleSwipe(this.swipeDirection,this.touchCount),this.gestured=!0,this.mayBeSwiping=!1,this.beginRepeatWatcher(t)):this.mayBeSwiping?this.swipeStep(t):this.isRepeating&&this.repeatStep(t),prevent(t),!1},t.handleFocusChange=function(t){this.focusElement&&(this.isFocused=this.isTouchInsideFocusElement(t),this.setFocusIndicatorVisibility(this.isFocused),canvas.focus(),editor.display.input.blur())},t.isTouchInsideFocusElement=function(t){var i;return!(!t.touches||!t.touches[0])&&(i=this.absoluteElementPosition(this.focusElement),!(t.touches[0].clientX<i.left||t.touches[0].clientY<i.top)&&!(t.touches[0].clientX>i.left+this.focusElement.clientWidth||t.touches[0].clientY>i.top+this.focusElement.clientHeight))},t.setFocusIndicatorVisibility=function(t){},t.absoluteElementPosition=function(t){var i,e;for(i={top:t.offsetTop||0,left:t.offsetLeft||0},e=document.getElementsByTagName("body")[0],i.top-=e.scrollTop||0;;){if(!(t=t.offsetParent))break;i.top+=t.offsetTop||0,i.left+=t.offsetLeft||0}return i},t.beginRepeatWatcher=function(t){var i;this.repeatInterval||(this.isRepeating=!0,i=1e3*state.metadata.key_repeat_interval,!isNaN(i)&&i||(i=150),this.repeatInterval=setInterval(this.repeatTick,i),this.recenter(t))},t.endRepeatWatcher=function(){this.repeatInterval&&(clearInterval(this.repeatInterval),delete this.repeatInterval,this.isRepeating=!1)},t.repeatTick=function(){this.isTouching&&this.handleSwipe(this.direction,this.touchCount)},t.recenter=function(t){this.firstPos.x=t.touches[0].clientX,this.firstPos.y=t.touches[0].clientY},t.isSuccessfulSwipe=function(){var t;return this.mayBeSwiping&&void 0!==this.swipeDirection&&this.swipeDistance>=50&&(t=!0),t},t.swipeStep=function(t){var i,e,n;this.mayBeSwiping&&(i={x:t.touches[0].clientX,y:t.touches[0].clientY},e=(new Date).getTime(),n=t.touches.length,this.swipeDistance=this.cardinalDistance(this.firstPos,i),this.swipeDirection?e-this.startTime>1e3&&(this.mayBeSwiping=!1):this.swipeDistance>10&&(this.swipeDirection=this.dominantDirection(this.firstPos,i),this.touchCount=n))},t.repeatStep=function(t){var i,e;i={x:t.touches[0].clientX,y:t.touches[0].clientY},(e=this.cardinalDistance(this.firstPos,i))>=50&&(this.swipeDirection=this.dominantDirection(this.firstPos,i),this.recenter(t))},t.cardinalDistance=function(t,i){var e,n;return e=Math.abs(t.x-i.x),n=Math.abs(t.y-i.y),Math.max(e,n)},t.dominantDirection=function(t,i){var e,n,s;return e=i.x-t.x,n=i.y-t.y,s="x",Math.abs(n)>Math.abs(e)&&(s="y"),"x"===s?e>0?"right":"left":n>0?"down":"up"},t.handleSwipe=function(t,i){1===i?this.emitKeydown(this.swipeDirection):i>1&&this.toggleMenu()},t.handleTap=function(){this.emitKeydown("action")},t.emitKeydown=function(t){var e;e={keyCode:i[t]},this.fakeCanvasFocus(),onKeyDown(e),onKeyUp(e)},t.fakeCanvasFocus=function(){var t;t=document.getElementById("gameCanvas"),onMouseDown({button:0,target:t})},t.toggleMenu=function(){this.isMenuVisible?this.hideMenu():this.showMenu()},t.showMenu=function(){this.menuElem||this.buildMenu(),this.getAnimatables().menu.animateUp(),this.isMenuVisible=!0,this.hideTab()},t.hideMenu=function(){this.menuElem&&this.getAnimatables().menu.animateDown(),this.isMenuVisible=!1,this.showTab()},t.getAnimatables=function(){var t=this;return this._animatables||(this._animatables={tab:Animatable("tab",.1,t.setTabAnimationRatio),menu:Animatable("menu",.1,t.setMenuAnimationRatio)}),this._animatables},t.showTab=function(){this.tabElem||this.buildTab(),this.getAnimatables().tab.animateDown()},t.hideTab=function(){this.tabElem&&this.tabElem.setAttribute("style","display: none;"),this.getAnimatables().tab.animateUp()},t.buildTab=function(){var t,i,n,s,o=this;t=document.createElement("div"),t.innerHTML=e,s=t.children[0],n=function(t){t.stopPropagation(),o.showMenu()},this.tabAffordance=s.getElementsByClassName("tab-affordance")[0],this.tabElem=s.getElementsByClassName("tab-icon")[0],this.tabAffordance.addEventListener("touchstart",n),this.tabElem.addEventListener("touchstart",n),i=document.getElementsByTagName("body")[0],i.appendChild(s)},t.buildMenu=function(){var t,i,e,n,s,o,a,c=this;t=document.createElement("div"),t.innerHTML=this.buildMenuString(state),this.menuElem=t.children[0],this.closeElem=this.menuElem.getElementsByClassName("close")[0],a=function(t){t.stopPropagation(),c.hideMenu()},this.closeAffordance=this.menuElem.getElementsByClassName("close-affordance")[0],o=this.menuElem.getElementsByClassName("close")[0],this.closeAffordance.addEventListener("touchstart",a),o.addEventListener("touchstart",a),e=this.menuElem.getElementsByClassName("undo")[0],e&&e.addEventListener("touchstart",function(t){t.stopPropagation(),c.emitKeydown("undo")}),n=this.menuElem.getElementsByClassName("restart")[0],n&&n.addEventListener("touchstart",function(t){t.stopPropagation(),c.emitKeydown("restart")}),s=this.menuElem.getElementsByClassName("quit")[0],s.addEventListener("touchstart",function(t){t.stopPropagation(),c.emitKeydown("quit")}),i=document.getElementsByTagName("body")[0],i.appendChild(this.menuElem)},t.buildMenuString=function(t){var i,e,n,s;return n=t.metadata.noundo,s=t.metadata.norestart,i=3,n&&(i-=1),s&&(i-=1),e=['<div class="mobile-menu item-count-'+i+'">','  <div class="close-affordance"></div>','  <div class="close">','    <div class="slice"></div>','    <div class="slice"></div>',"  </div>"],n||e.push('  <div class="undo button">Undo</div>'),s||e.push('  <div class="restart button">Restart</div>'),e=e.concat(['  <div class="quit button">Quit to Menu</div>','  <div class="clear"></div>',"</div>"]),e.join("\n")},t.buildFocusIndicator=function(){var t;this.focusIndicator=document.createElement("DIV"),this.focusIndicator.setAttribute("class","tapFocusIndicator"),this.focusIndicator.setAttribute("style","visibility: hidden;"),t=this.focusElement.parentNode,t.appendChild(this.focusIndicator)},t.setTabAnimationRatio=function(t){var i,e,n;t=Math.round(1e3*t)/1e3,t>=.999?this.tabAffordance.setAttribute("style","display: none;"):this.tabAffordance.setAttribute("style","display: block;"),i=66*t+18*(1-t),e="opacity: "+(1-t)+";",n=e+" width: "+i+"px;",this.tabElem.setAttribute("style",n)},t.setMenuAnimationRatio=function(t){var i,e,n;t=Math.round(1e3*t)/1e3,i=-18*t+-66*(1-t),e="opacity: "+t+";",n="left: "+(i-4)+"px; "+e+" width: "+-i+"px;",t=Math.round(1e3*t)/1e3,t<=.001?(this.closeAffordance.setAttribute("style","display: none;"),e="display:none;"):this.closeAffordance.setAttribute("style","display: block;"),this.closeElem.setAttribute("style",n),this.menuElem.setAttribute("style",e)},t.disableScrolling=function(){var t={height:"100%",overflow:"hidden",position:"fixed",width:"100%"},i="";for(var e in t)i+=e+": "+t[e]+"; ";document.body.setAttribute("style",i)},t.disableAudio=function(){window.playSeed=function(){}},t.isAudioSupported=function(){var t=!0;return"undefined"!=typeof webkitAudioContext&&(t=!1),t},t.disableSelection=function(){var t;t=document.getElementsByTagName("body")[0],t.setAttribute("class",t.getAttribute("class")+" disable-select")}}(window.Mobile.GestureHandler.prototype),window.Animator=function(){this.initialize.apply(this,arguments)},function(t){t.initialize=function(){this._animations={},this.tick=this.tick.bind(this)},t.animate=function(t,i){this._animations[t]=i,this.wakeup()},t.wakeup=function(){this._isAnimating||(this._isAnimating=!0,this.tick())},t.tick=function(){var t,i,e,n,s;n=[],e=!0;for(t in this._animations){if(!this._animations.hasOwnProperty(t))return;i=this._animations[t](),i?n.push(t):e=!1}if(e){for(s=0;s<n.length;n++)delete this._isAnimating[n[s]];this._isAnimating=!1}else requestAnimationFrame(this.tick)}}(window.Animator.prototype),window.Animator.getInstance=function(){return window.Animator._instance||(window.Animator._instance=new window.Animator),window.Animator._instance},function(){"use strict";var t,i,e=["ms","moz","webkit","o"];for(t=0;t<e.length&&!window.requestAnimationFrame;t++)window.requestAnimationFrame=window[e[t]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[e[t]+"CancelAnimationFrame"],window.cancelAnimationFrame||(window.cancelAnimationFrame=window[e[t]+"CancelRequestAnimationFrame"]);window.requestAnimationFrame||(i=0,window.requestAnimationFrame=function(t,e){var n,s,o;return n=(new Date).getTime(),s=Math.max(0,16-(n-i)),o=window.setTimeout(function(){t(n+s)},s),i=n+s,o}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(t){clearTimeout(t)}),Mobile.enable()}();</script> <script>var sourceCode=__GAMEDAT__;compile(["restart"],sourceCode);</script> </body> </html> 